// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Attachment collection filtering options.
type AttachmentCollectionFilter struct {
	// Compound filters, all of which need to be matched by the attachment.
	And []*AttachmentCollectionFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the attachments creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that needs to be matched by all attachments.
	Every *AttachmentFilter `json:"every,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
	// Compound filters, one of which need to be matched by the attachment.
	Or []*AttachmentCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some attachments.
	Some *AttachmentFilter `json:"some,omitempty"`
	// Comparator for the source type.
	SourceType *SourceTypeComparator `json:"sourceType,omitempty"`
	// Comparator for the subtitle.
	Subtitle *NullableStringComparator `json:"subtitle,omitempty"`
	// Comparator for the title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the url.
	Url *StringComparator `json:"url,omitempty"`
}

// GetAnd returns AttachmentCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetAnd() []*AttachmentCollectionFilter { return v.And }

// GetCreatedAt returns AttachmentCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns AttachmentCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetEvery returns AttachmentCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetEvery() *AttachmentFilter { return v.Every }

// GetId returns AttachmentCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetId() *IDComparator { return v.Id }

// GetLength returns AttachmentCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetLength() *NumberComparator { return v.Length }

// GetOr returns AttachmentCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetOr() []*AttachmentCollectionFilter { return v.Or }

// GetSome returns AttachmentCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetSome() *AttachmentFilter { return v.Some }

// GetSourceType returns AttachmentCollectionFilter.SourceType, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetSourceType() *SourceTypeComparator { return v.SourceType }

// GetSubtitle returns AttachmentCollectionFilter.Subtitle, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetSubtitle() *NullableStringComparator { return v.Subtitle }

// GetTitle returns AttachmentCollectionFilter.Title, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetTitle() *StringComparator { return v.Title }

// GetUpdatedAt returns AttachmentCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetUrl returns AttachmentCollectionFilter.Url, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetUrl() *StringComparator { return v.Url }

// Attachment filtering options.
type AttachmentFilter struct {
	// Compound filters, all of which need to be matched by the attachment.
	And []*AttachmentFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the attachments creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Compound filters, one of which need to be matched by the attachment.
	Or []*AttachmentFilter `json:"or,omitempty"`
	// Comparator for the source type.
	SourceType *SourceTypeComparator `json:"sourceType,omitempty"`
	// Comparator for the subtitle.
	Subtitle *NullableStringComparator `json:"subtitle,omitempty"`
	// Comparator for the title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the url.
	Url *StringComparator `json:"url,omitempty"`
}

// GetAnd returns AttachmentFilter.And, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetAnd() []*AttachmentFilter { return v.And }

// GetCreatedAt returns AttachmentFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns AttachmentFilter.Creator, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetId returns AttachmentFilter.Id, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetId() *IDComparator { return v.Id }

// GetOr returns AttachmentFilter.Or, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetOr() []*AttachmentFilter { return v.Or }

// GetSourceType returns AttachmentFilter.SourceType, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetSourceType() *SourceTypeComparator { return v.SourceType }

// GetSubtitle returns AttachmentFilter.Subtitle, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetSubtitle() *NullableStringComparator { return v.Subtitle }

// GetTitle returns AttachmentFilter.Title, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetTitle() *StringComparator { return v.Title }

// GetUpdatedAt returns AttachmentFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetUrl returns AttachmentFilter.Url, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetUrl() *StringComparator { return v.Url }

// Comparator for booleans.
type BooleanComparator struct {
	// Equals constraint.
	Eq *bool `json:"eq,omitempty"`
	// Not equals constraint.
	Neq *bool `json:"neq,omitempty"`
}

// GetEq returns BooleanComparator.Eq, and is useful for accessing the field via an interface.
func (v *BooleanComparator) GetEq() *bool { return v.Eq }

// GetNeq returns BooleanComparator.Neq, and is useful for accessing the field via an interface.
func (v *BooleanComparator) GetNeq() *bool { return v.Neq }

// Comment filtering options.
type CommentCollectionFilter struct {
	// Compound filters, all of which need to be matched by the comment.
	And []*CommentCollectionFilter `json:"and,omitempty"`
	// Comparator for the comments body.
	Body *StringComparator `json:"body,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that needs to be matched by all comments.
	Every *CommentFilter `json:"every,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that the comments issue must satisfy.
	Issue *IssueFilter `json:"issue,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
	// Compound filters, one of which need to be matched by the comment.
	Or []*CommentCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some comments.
	Some *CommentFilter `json:"some,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Filters that the comments creator must satisfy.
	User *UserFilter `json:"user,omitempty"`
}

// GetAnd returns CommentCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetAnd() []*CommentCollectionFilter { return v.And }

// GetBody returns CommentCollectionFilter.Body, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetBody() *StringComparator { return v.Body }

// GetCreatedAt returns CommentCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetEvery returns CommentCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetEvery() *CommentFilter { return v.Every }

// GetId returns CommentCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetId() *IDComparator { return v.Id }

// GetIssue returns CommentCollectionFilter.Issue, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetIssue() *IssueFilter { return v.Issue }

// GetLength returns CommentCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetLength() *NumberComparator { return v.Length }

// GetOr returns CommentCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetOr() []*CommentCollectionFilter { return v.Or }

// GetSome returns CommentCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetSome() *CommentFilter { return v.Some }

// GetUpdatedAt returns CommentCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetUser returns CommentCollectionFilter.User, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetUser() *UserFilter { return v.User }

// Comment filtering options.
type CommentFilter struct {
	// Compound filters, all of which need to be matched by the comment.
	And []*CommentFilter `json:"and,omitempty"`
	// Comparator for the comments body.
	Body *StringComparator `json:"body,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that the comments issue must satisfy.
	Issue *IssueFilter `json:"issue,omitempty"`
	// Compound filters, one of which need to be matched by the comment.
	Or []*CommentFilter `json:"or,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Filters that the comments creator must satisfy.
	User *UserFilter `json:"user,omitempty"`
}

// GetAnd returns CommentFilter.And, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetAnd() []*CommentFilter { return v.And }

// GetBody returns CommentFilter.Body, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetBody() *StringComparator { return v.Body }

// GetCreatedAt returns CommentFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetId returns CommentFilter.Id, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetId() *IDComparator { return v.Id }

// GetIssue returns CommentFilter.Issue, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetIssue() *IssueFilter { return v.Issue }

// GetOr returns CommentFilter.Or, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetOr() []*CommentFilter { return v.Or }

// GetUpdatedAt returns CommentFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetUser returns CommentFilter.User, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetUser() *UserFilter { return v.User }

// [Internal] Comparator for content.
type ContentComparator struct {
	// [Internal] Contains constraint.
	Contains *string `json:"contains,omitempty"`
	// [Internal] Not-contains constraint.
	NotContains *string `json:"notContains,omitempty"`
}

// GetContains returns ContentComparator.Contains, and is useful for accessing the field via an interface.
func (v *ContentComparator) GetContains() *string { return v.Contains }

// GetNotContains returns ContentComparator.NotContains, and is useful for accessing the field via an interface.
func (v *ContentComparator) GetNotContains() *string { return v.NotContains }

// Cycle filtering options.
type CycleFilter struct {
	// Compound filters, all of which need to be matched by the cycle.
	And []*CycleFilter `json:"and,omitempty"`
	// Comparator for the cycle completed at date.
	CompletedAt *DateComparator `json:"completedAt,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the cycle ends at date.
	EndsAt *DateComparator `json:"endsAt,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the filtering active cycle.
	IsActive *BooleanComparator `json:"isActive,omitempty"`
	// Comparator for the filtering future cycles.
	IsFuture *BooleanComparator `json:"isFuture,omitempty"`
	// Comparator for the filtering next cycle.
	IsNext *BooleanComparator `json:"isNext,omitempty"`
	// Comparator for the filtering past cycles.
	IsPast *BooleanComparator `json:"isPast,omitempty"`
	// Comparator for the filtering previous cycle.
	IsPrevious *BooleanComparator `json:"isPrevious,omitempty"`
	// Filters that the cycles issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Comparator for the cycle name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the cycle number.
	Number *NumberComparator `json:"number,omitempty"`
	// Compound filters, one of which need to be matched by the cycle.
	Or []*CycleFilter `json:"or,omitempty"`
	// Comparator for the cycle start date.
	StartsAt *DateComparator `json:"startsAt,omitempty"`
	// Filters that the cycles team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns CycleFilter.And, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetAnd() []*CycleFilter { return v.And }

// GetCompletedAt returns CycleFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetCompletedAt() *DateComparator { return v.CompletedAt }

// GetCreatedAt returns CycleFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetEndsAt returns CycleFilter.EndsAt, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetEndsAt() *DateComparator { return v.EndsAt }

// GetId returns CycleFilter.Id, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetId() *IDComparator { return v.Id }

// GetIsActive returns CycleFilter.IsActive, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetIsActive() *BooleanComparator { return v.IsActive }

// GetIsFuture returns CycleFilter.IsFuture, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetIsFuture() *BooleanComparator { return v.IsFuture }

// GetIsNext returns CycleFilter.IsNext, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetIsNext() *BooleanComparator { return v.IsNext }

// GetIsPast returns CycleFilter.IsPast, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetIsPast() *BooleanComparator { return v.IsPast }

// GetIsPrevious returns CycleFilter.IsPrevious, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetIsPrevious() *BooleanComparator { return v.IsPrevious }

// GetIssues returns CycleFilter.Issues, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetName returns CycleFilter.Name, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetName() *StringComparator { return v.Name }

// GetNumber returns CycleFilter.Number, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetNumber() *NumberComparator { return v.Number }

// GetOr returns CycleFilter.Or, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetOr() []*CycleFilter { return v.Or }

// GetStartsAt returns CycleFilter.StartsAt, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetStartsAt() *DateComparator { return v.StartsAt }

// GetTeam returns CycleFilter.Team, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetTeam() *TeamFilter { return v.Team }

// GetUpdatedAt returns CycleFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CycleFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Comparator for dates.
type DateComparator struct {
	// Equals constraint.
	Eq *time.Time `json:"eq,omitempty"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt *time.Time `json:"gt,omitempty"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte *time.Time `json:"gte,omitempty"`
	// In-array constraint.
	In []*time.Time `json:"in,omitempty"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt *time.Time `json:"lt,omitempty"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte *time.Time `json:"lte,omitempty"`
	// Not-equals constraint.
	Neq *time.Time `json:"neq,omitempty"`
	// Not-in-array constraint.
	Nin []*time.Time `json:"nin,omitempty"`
}

// GetEq returns DateComparator.Eq, and is useful for accessing the field via an interface.
func (v *DateComparator) GetEq() *time.Time { return v.Eq }

// GetGt returns DateComparator.Gt, and is useful for accessing the field via an interface.
func (v *DateComparator) GetGt() *time.Time { return v.Gt }

// GetGte returns DateComparator.Gte, and is useful for accessing the field via an interface.
func (v *DateComparator) GetGte() *time.Time { return v.Gte }

// GetIn returns DateComparator.In, and is useful for accessing the field via an interface.
func (v *DateComparator) GetIn() []*time.Time { return v.In }

// GetLt returns DateComparator.Lt, and is useful for accessing the field via an interface.
func (v *DateComparator) GetLt() *time.Time { return v.Lt }

// GetLte returns DateComparator.Lte, and is useful for accessing the field via an interface.
func (v *DateComparator) GetLte() *time.Time { return v.Lte }

// GetNeq returns DateComparator.Neq, and is useful for accessing the field via an interface.
func (v *DateComparator) GetNeq() *time.Time { return v.Neq }

// GetNin returns DateComparator.Nin, and is useful for accessing the field via an interface.
func (v *DateComparator) GetNin() []*time.Time { return v.Nin }

// The day of the week.
type Day string

const (
	DayFriday    Day = "Friday"
	DayMonday    Day = "Monday"
	DaySaturday  Day = "Saturday"
	DaySunday    Day = "Sunday"
	DayThursday  Day = "Thursday"
	DayTuesday   Day = "Tuesday"
	DayWednesday Day = "Wednesday"
)

// Comparator for estimates.
type EstimateComparator struct {
	// Compound filters, one of which need to be matched by the estimate.
	And []*NullableNumberComparator `json:"and,omitempty"`
	// Equals constraint.
	Eq *float64 `json:"eq,omitempty"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt *float64 `json:"gt,omitempty"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte *float64 `json:"gte,omitempty"`
	// In-array constraint.
	In []*float64 `json:"in,omitempty"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt *float64 `json:"lt,omitempty"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte *float64 `json:"lte,omitempty"`
	// Not-equals constraint.
	Neq *float64 `json:"neq,omitempty"`
	// Not-in-array constraint.
	Nin []*float64 `json:"nin,omitempty"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null *bool `json:"null,omitempty"`
	// Compound filters, all of which need to be matched by the estimate.
	Or []*NullableNumberComparator `json:"or,omitempty"`
}

// GetAnd returns EstimateComparator.And, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetAnd() []*NullableNumberComparator { return v.And }

// GetEq returns EstimateComparator.Eq, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetEq() *float64 { return v.Eq }

// GetGt returns EstimateComparator.Gt, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetGt() *float64 { return v.Gt }

// GetGte returns EstimateComparator.Gte, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetGte() *float64 { return v.Gte }

// GetIn returns EstimateComparator.In, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetIn() []*float64 { return v.In }

// GetLt returns EstimateComparator.Lt, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetLt() *float64 { return v.Lt }

// GetLte returns EstimateComparator.Lte, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetLte() *float64 { return v.Lte }

// GetNeq returns EstimateComparator.Neq, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetNeq() *float64 { return v.Neq }

// GetNin returns EstimateComparator.Nin, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetNin() []*float64 { return v.Nin }

// GetNull returns EstimateComparator.Null, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetNull() *bool { return v.Null }

// GetOr returns EstimateComparator.Or, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetOr() []*NullableNumberComparator { return v.Or }

// Comparator for identifiers.
type IDComparator struct {
	// Equals constraint.
	Eq *string `json:"eq,omitempty"`
	// In-array constraint.
	In []*string `json:"in,omitempty"`
	// Not-equals constraint.
	Neq *string `json:"neq,omitempty"`
	// Not-in-array constraint.
	Nin []*string `json:"nin,omitempty"`
}

// GetEq returns IDComparator.Eq, and is useful for accessing the field via an interface.
func (v *IDComparator) GetEq() *string { return v.Eq }

// GetIn returns IDComparator.In, and is useful for accessing the field via an interface.
func (v *IDComparator) GetIn() []*string { return v.In }

// GetNeq returns IDComparator.Neq, and is useful for accessing the field via an interface.
func (v *IDComparator) GetNeq() *string { return v.Neq }

// GetNin returns IDComparator.Nin, and is useful for accessing the field via an interface.
func (v *IDComparator) GetNin() []*string { return v.Nin }

// Issue filtering options.
type IssueCollectionFilter struct {
	// Compound filters, all of which need to be matched by the issue.
	And []*IssueCollectionFilter `json:"and,omitempty"`
	// Filters that the issues assignee must satisfy.
	Assignee *NullableUserFilter `json:"assignee,omitempty"`
	// Filters that the issues attachments must satisfy.
	Attachments *AttachmentCollectionFilter `json:"attachments,omitempty"`
	// Comparator for the issues auto archived at date.
	AutoArchivedAt *NullableDateComparator `json:"autoArchivedAt,omitempty"`
	// Comparator for the issues auto closed at date.
	AutoClosedAt *NullableDateComparator `json:"autoClosedAt,omitempty"`
	// Comparator for the issues canceled at date.
	CanceledAt *NullableDateComparator `json:"canceledAt,omitempty"`
	// Filters that the child issues must satisfy.
	Children *IssueCollectionFilter `json:"children,omitempty"`
	// Filters that the issues comments must satisfy.
	Comments *CommentCollectionFilter `json:"comments,omitempty"`
	// Comparator for the issues completed at date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the issues creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that the issues cycle must satisfy.
	Cycle *NullableCycleFilter `json:"cycle,omitempty"`
	// Comparator for the issues description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Comparator for the issues due date.
	DueDate *NullableTimelessDateComparator `json:"dueDate,omitempty"`
	// Comparator for the issues estimate.
	Estimate *EstimateComparator `json:"estimate,omitempty"`
	// Filters that needs to be matched by all issues.
	Every *IssueFilter `json:"every,omitempty"`
	// Comparator for filtering issues which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering issues which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for filtering issues which are duplicates.
	HasDuplicateRelations *RelationExistsComparator `json:"hasDuplicateRelations,omitempty"`
	// Comparator for filtering issues with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that issue labels must satisfy.
	Labels *IssueLabelCollectionFilter `json:"labels,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
	// Comparator for the issues number.
	Number *NumberComparator `json:"number,omitempty"`
	// Compound filters, one of which need to be matched by the issue.
	Or []*IssueCollectionFilter `json:"or,omitempty"`
	// Filters that the issue parent must satisfy.
	Parent *NullableIssueFilter `json:"parent,omitempty"`
	// Comparator for the issues priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// Filters that the issues project must satisfy.
	Project *NullableProjectFilter `json:"project,omitempty"`
	// Filters that the issues project milestone must satisfy.
	ProjectMilestone *NullableProjectMilestoneFilter `json:"projectMilestone,omitempty"`
	// [Internal] Comparator for the issues content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for the issues sla status.
	SlaStatus *SlaStatusComparator `json:"slaStatus,omitempty"`
	// Filters that the issues snoozer must satisfy.
	SnoozedBy *NullableUserFilter `json:"snoozedBy,omitempty"`
	// Comparator for the issues snoozed until date.
	SnoozedUntilAt *NullableDateComparator `json:"snoozedUntilAt,omitempty"`
	// Filters that needs to be matched by some issues.
	Some *IssueFilter `json:"some,omitempty"`
	// Comparator for the issues started at date.
	StartedAt *NullableDateComparator `json:"startedAt,omitempty"`
	// Filters that the issues state must satisfy.
	State *WorkflowStateFilter `json:"state,omitempty"`
	// Filters that issue subscribers must satisfy.
	Subscribers *UserCollectionFilter `json:"subscribers,omitempty"`
	// Filters that the issues team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Comparator for the issues title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the issues triaged at date.
	TriagedAt *NullableDateComparator `json:"triagedAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns IssueCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAnd() []*IssueCollectionFilter { return v.And }

// GetAssignee returns IssueCollectionFilter.Assignee, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAssignee() *NullableUserFilter { return v.Assignee }

// GetAttachments returns IssueCollectionFilter.Attachments, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAttachments() *AttachmentCollectionFilter { return v.Attachments }

// GetAutoArchivedAt returns IssueCollectionFilter.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAutoArchivedAt() *NullableDateComparator { return v.AutoArchivedAt }

// GetAutoClosedAt returns IssueCollectionFilter.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAutoClosedAt() *NullableDateComparator { return v.AutoClosedAt }

// GetCanceledAt returns IssueCollectionFilter.CanceledAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCanceledAt() *NullableDateComparator { return v.CanceledAt }

// GetChildren returns IssueCollectionFilter.Children, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetChildren() *IssueCollectionFilter { return v.Children }

// GetComments returns IssueCollectionFilter.Comments, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetComments() *CommentCollectionFilter { return v.Comments }

// GetCompletedAt returns IssueCollectionFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetCreatedAt returns IssueCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns IssueCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetCycle returns IssueCollectionFilter.Cycle, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCycle() *NullableCycleFilter { return v.Cycle }

// GetDescription returns IssueCollectionFilter.Description, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetDueDate returns IssueCollectionFilter.DueDate, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetDueDate() *NullableTimelessDateComparator { return v.DueDate }

// GetEstimate returns IssueCollectionFilter.Estimate, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetEstimate() *EstimateComparator { return v.Estimate }

// GetEvery returns IssueCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetEvery() *IssueFilter { return v.Every }

// GetHasBlockedByRelations returns IssueCollectionFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns IssueCollectionFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetHasDuplicateRelations returns IssueCollectionFilter.HasDuplicateRelations, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetHasDuplicateRelations() *RelationExistsComparator {
	return v.HasDuplicateRelations
}

// GetHasRelatedRelations returns IssueCollectionFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetId returns IssueCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetId() *IDComparator { return v.Id }

// GetLabels returns IssueCollectionFilter.Labels, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetLabels() *IssueLabelCollectionFilter { return v.Labels }

// GetLength returns IssueCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetLength() *NumberComparator { return v.Length }

// GetNumber returns IssueCollectionFilter.Number, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetNumber() *NumberComparator { return v.Number }

// GetOr returns IssueCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetOr() []*IssueCollectionFilter { return v.Or }

// GetParent returns IssueCollectionFilter.Parent, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetParent() *NullableIssueFilter { return v.Parent }

// GetPriority returns IssueCollectionFilter.Priority, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetProject returns IssueCollectionFilter.Project, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetProject() *NullableProjectFilter { return v.Project }

// GetProjectMilestone returns IssueCollectionFilter.ProjectMilestone, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetProjectMilestone() *NullableProjectMilestoneFilter {
	return v.ProjectMilestone
}

// GetSearchableContent returns IssueCollectionFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSearchableContent() *ContentComparator { return v.SearchableContent }

// GetSlaStatus returns IssueCollectionFilter.SlaStatus, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSlaStatus() *SlaStatusComparator { return v.SlaStatus }

// GetSnoozedBy returns IssueCollectionFilter.SnoozedBy, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSnoozedBy() *NullableUserFilter { return v.SnoozedBy }

// GetSnoozedUntilAt returns IssueCollectionFilter.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSnoozedUntilAt() *NullableDateComparator { return v.SnoozedUntilAt }

// GetSome returns IssueCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSome() *IssueFilter { return v.Some }

// GetStartedAt returns IssueCollectionFilter.StartedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetStartedAt() *NullableDateComparator { return v.StartedAt }

// GetState returns IssueCollectionFilter.State, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetState() *WorkflowStateFilter { return v.State }

// GetSubscribers returns IssueCollectionFilter.Subscribers, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSubscribers() *UserCollectionFilter { return v.Subscribers }

// GetTeam returns IssueCollectionFilter.Team, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetTeam() *TeamFilter { return v.Team }

// GetTitle returns IssueCollectionFilter.Title, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetTitle() *StringComparator { return v.Title }

// GetTriagedAt returns IssueCollectionFilter.TriagedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetTriagedAt() *NullableDateComparator { return v.TriagedAt }

// GetUpdatedAt returns IssueCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Issue filtering options.
type IssueFilter struct {
	// Compound filters, all of which need to be matched by the issue.
	And []*IssueFilter `json:"and,omitempty"`
	// Filters that the issues assignee must satisfy.
	Assignee *NullableUserFilter `json:"assignee,omitempty"`
	// Filters that the issues attachments must satisfy.
	Attachments *AttachmentCollectionFilter `json:"attachments,omitempty"`
	// Comparator for the issues auto archived at date.
	AutoArchivedAt *NullableDateComparator `json:"autoArchivedAt,omitempty"`
	// Comparator for the issues auto closed at date.
	AutoClosedAt *NullableDateComparator `json:"autoClosedAt,omitempty"`
	// Comparator for the issues canceled at date.
	CanceledAt *NullableDateComparator `json:"canceledAt,omitempty"`
	// Filters that the child issues must satisfy.
	Children *IssueCollectionFilter `json:"children,omitempty"`
	// Filters that the issues comments must satisfy.
	Comments *CommentCollectionFilter `json:"comments,omitempty"`
	// Comparator for the issues completed at date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the issues creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that the issues cycle must satisfy.
	Cycle *NullableCycleFilter `json:"cycle,omitempty"`
	// Comparator for the issues description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Comparator for the issues due date.
	DueDate *NullableTimelessDateComparator `json:"dueDate,omitempty"`
	// Comparator for the issues estimate.
	Estimate *EstimateComparator `json:"estimate,omitempty"`
	// Comparator for filtering issues which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering issues which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for filtering issues which are duplicates.
	HasDuplicateRelations *RelationExistsComparator `json:"hasDuplicateRelations,omitempty"`
	// Comparator for filtering issues with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that issue labels must satisfy.
	Labels *IssueLabelCollectionFilter `json:"labels,omitempty"`
	// Comparator for the issues number.
	Number *NumberComparator `json:"number,omitempty"`
	// Compound filters, one of which need to be matched by the issue.
	Or []*IssueFilter `json:"or,omitempty"`
	// Filters that the issue parent must satisfy.
	Parent *NullableIssueFilter `json:"parent,omitempty"`
	// Comparator for the issues priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// Filters that the issues project must satisfy.
	Project *NullableProjectFilter `json:"project,omitempty"`
	// Filters that the issues project milestone must satisfy.
	ProjectMilestone *NullableProjectMilestoneFilter `json:"projectMilestone,omitempty"`
	// [Internal] Comparator for the issues content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for the issues sla status.
	SlaStatus *SlaStatusComparator `json:"slaStatus,omitempty"`
	// Filters that the issues snoozer must satisfy.
	SnoozedBy *NullableUserFilter `json:"snoozedBy,omitempty"`
	// Comparator for the issues snoozed until date.
	SnoozedUntilAt *NullableDateComparator `json:"snoozedUntilAt,omitempty"`
	// Comparator for the issues started at date.
	StartedAt *NullableDateComparator `json:"startedAt,omitempty"`
	// Filters that the issues state must satisfy.
	State *WorkflowStateFilter `json:"state,omitempty"`
	// Filters that issue subscribers must satisfy.
	Subscribers *UserCollectionFilter `json:"subscribers,omitempty"`
	// Filters that the issues team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Comparator for the issues title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the issues triaged at date.
	TriagedAt *NullableDateComparator `json:"triagedAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns IssueFilter.And, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAnd() []*IssueFilter { return v.And }

// GetAssignee returns IssueFilter.Assignee, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAssignee() *NullableUserFilter { return v.Assignee }

// GetAttachments returns IssueFilter.Attachments, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAttachments() *AttachmentCollectionFilter { return v.Attachments }

// GetAutoArchivedAt returns IssueFilter.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAutoArchivedAt() *NullableDateComparator { return v.AutoArchivedAt }

// GetAutoClosedAt returns IssueFilter.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAutoClosedAt() *NullableDateComparator { return v.AutoClosedAt }

// GetCanceledAt returns IssueFilter.CanceledAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCanceledAt() *NullableDateComparator { return v.CanceledAt }

// GetChildren returns IssueFilter.Children, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetChildren() *IssueCollectionFilter { return v.Children }

// GetComments returns IssueFilter.Comments, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetComments() *CommentCollectionFilter { return v.Comments }

// GetCompletedAt returns IssueFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetCreatedAt returns IssueFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns IssueFilter.Creator, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetCycle returns IssueFilter.Cycle, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCycle() *NullableCycleFilter { return v.Cycle }

// GetDescription returns IssueFilter.Description, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetDueDate returns IssueFilter.DueDate, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetDueDate() *NullableTimelessDateComparator { return v.DueDate }

// GetEstimate returns IssueFilter.Estimate, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetEstimate() *EstimateComparator { return v.Estimate }

// GetHasBlockedByRelations returns IssueFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns IssueFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetHasDuplicateRelations returns IssueFilter.HasDuplicateRelations, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetHasDuplicateRelations() *RelationExistsComparator {
	return v.HasDuplicateRelations
}

// GetHasRelatedRelations returns IssueFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetId returns IssueFilter.Id, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetId() *IDComparator { return v.Id }

// GetLabels returns IssueFilter.Labels, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetLabels() *IssueLabelCollectionFilter { return v.Labels }

// GetNumber returns IssueFilter.Number, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetNumber() *NumberComparator { return v.Number }

// GetOr returns IssueFilter.Or, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetOr() []*IssueFilter { return v.Or }

// GetParent returns IssueFilter.Parent, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetParent() *NullableIssueFilter { return v.Parent }

// GetPriority returns IssueFilter.Priority, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetProject returns IssueFilter.Project, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetProject() *NullableProjectFilter { return v.Project }

// GetProjectMilestone returns IssueFilter.ProjectMilestone, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetProjectMilestone() *NullableProjectMilestoneFilter {
	return v.ProjectMilestone
}

// GetSearchableContent returns IssueFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSearchableContent() *ContentComparator { return v.SearchableContent }

// GetSlaStatus returns IssueFilter.SlaStatus, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSlaStatus() *SlaStatusComparator { return v.SlaStatus }

// GetSnoozedBy returns IssueFilter.SnoozedBy, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSnoozedBy() *NullableUserFilter { return v.SnoozedBy }

// GetSnoozedUntilAt returns IssueFilter.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSnoozedUntilAt() *NullableDateComparator { return v.SnoozedUntilAt }

// GetStartedAt returns IssueFilter.StartedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetStartedAt() *NullableDateComparator { return v.StartedAt }

// GetState returns IssueFilter.State, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetState() *WorkflowStateFilter { return v.State }

// GetSubscribers returns IssueFilter.Subscribers, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSubscribers() *UserCollectionFilter { return v.Subscribers }

// GetTeam returns IssueFilter.Team, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetTeam() *TeamFilter { return v.Team }

// GetTitle returns IssueFilter.Title, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetTitle() *StringComparator { return v.Title }

// GetTriagedAt returns IssueFilter.TriagedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetTriagedAt() *NullableDateComparator { return v.TriagedAt }

// GetUpdatedAt returns IssueFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Issue label filtering options.
type IssueLabelCollectionFilter struct {
	// Compound filters, all of which need to be matched by the label.
	And []*IssueLabelCollectionFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the issue labels creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that needs to be matched by all issue labels.
	Every *IssueLabelFilter `json:"every,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
	// Comparator for the name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the label.
	Or []*IssueLabelCollectionFilter `json:"or,omitempty"`
	// Filters that the issue label's parent label must satisfy.
	Parent *IssueLabelFilter `json:"parent,omitempty"`
	// Filters that needs to be matched by some issue labels.
	Some *IssueLabelFilter `json:"some,omitempty"`
	// Filters that the issue labels team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns IssueLabelCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetAnd() []*IssueLabelCollectionFilter { return v.And }

// GetCreatedAt returns IssueLabelCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns IssueLabelCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetEvery returns IssueLabelCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetEvery() *IssueLabelFilter { return v.Every }

// GetId returns IssueLabelCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetId() *IDComparator { return v.Id }

// GetLength returns IssueLabelCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetLength() *NumberComparator { return v.Length }

// GetName returns IssueLabelCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetName() *StringComparator { return v.Name }

// GetOr returns IssueLabelCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetOr() []*IssueLabelCollectionFilter { return v.Or }

// GetParent returns IssueLabelCollectionFilter.Parent, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetParent() *IssueLabelFilter { return v.Parent }

// GetSome returns IssueLabelCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetSome() *IssueLabelFilter { return v.Some }

// GetTeam returns IssueLabelCollectionFilter.Team, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetTeam() *TeamFilter { return v.Team }

// GetUpdatedAt returns IssueLabelCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Issue label filtering options.
type IssueLabelFilter struct {
	// Compound filters, all of which need to be matched by the label.
	And []*IssueLabelFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the issue labels creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the label.
	Or []*IssueLabelFilter `json:"or,omitempty"`
	// Filters that the issue label's parent label must satisfy.
	Parent *IssueLabelFilter `json:"parent,omitempty"`
	// Filters that the issue labels team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns IssueLabelFilter.And, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetAnd() []*IssueLabelFilter { return v.And }

// GetCreatedAt returns IssueLabelFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns IssueLabelFilter.Creator, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetId returns IssueLabelFilter.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetId() *IDComparator { return v.Id }

// GetName returns IssueLabelFilter.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetName() *StringComparator { return v.Name }

// GetOr returns IssueLabelFilter.Or, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetOr() []*IssueLabelFilter { return v.Or }

// GetParent returns IssueLabelFilter.Parent, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetParent() *IssueLabelFilter { return v.Parent }

// GetTeam returns IssueLabelFilter.Team, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetTeam() *TeamFilter { return v.Team }

// GetUpdatedAt returns IssueLabelFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Cycle filtering options.
type NullableCycleFilter struct {
	// Compound filters, one of which need to be matched by the cycle.
	And []*NullableCycleFilter `json:"and,omitempty"`
	// Comparator for the cycle completed at date.
	CompletedAt *DateComparator `json:"completedAt,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the cycle ends at date.
	EndsAt *DateComparator `json:"endsAt,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the filtering active cycle.
	IsActive *BooleanComparator `json:"isActive,omitempty"`
	// Comparator for the filtering future cycles.
	IsFuture *BooleanComparator `json:"isFuture,omitempty"`
	// Comparator for the filtering next cycle.
	IsNext *BooleanComparator `json:"isNext,omitempty"`
	// Comparator for the filtering past cycles.
	IsPast *BooleanComparator `json:"isPast,omitempty"`
	// Comparator for the filtering previous cycle.
	IsPrevious *BooleanComparator `json:"isPrevious,omitempty"`
	// Filters that the cycles issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Comparator for the cycle name.
	Name *StringComparator `json:"name,omitempty"`
	// Filter based on the existence of the relation.
	Null *bool `json:"null,omitempty"`
	// Comparator for the cycle number.
	Number *NumberComparator `json:"number,omitempty"`
	// Compound filters, one of which need to be matched by the cycle.
	Or []*NullableCycleFilter `json:"or,omitempty"`
	// Comparator for the cycle start date.
	StartsAt *DateComparator `json:"startsAt,omitempty"`
	// Filters that the cycles team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns NullableCycleFilter.And, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetAnd() []*NullableCycleFilter { return v.And }

// GetCompletedAt returns NullableCycleFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetCompletedAt() *DateComparator { return v.CompletedAt }

// GetCreatedAt returns NullableCycleFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetEndsAt returns NullableCycleFilter.EndsAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetEndsAt() *DateComparator { return v.EndsAt }

// GetId returns NullableCycleFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetId() *IDComparator { return v.Id }

// GetIsActive returns NullableCycleFilter.IsActive, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsActive() *BooleanComparator { return v.IsActive }

// GetIsFuture returns NullableCycleFilter.IsFuture, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsFuture() *BooleanComparator { return v.IsFuture }

// GetIsNext returns NullableCycleFilter.IsNext, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsNext() *BooleanComparator { return v.IsNext }

// GetIsPast returns NullableCycleFilter.IsPast, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsPast() *BooleanComparator { return v.IsPast }

// GetIsPrevious returns NullableCycleFilter.IsPrevious, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsPrevious() *BooleanComparator { return v.IsPrevious }

// GetIssues returns NullableCycleFilter.Issues, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetName returns NullableCycleFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetName() *StringComparator { return v.Name }

// GetNull returns NullableCycleFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetNull() *bool { return v.Null }

// GetNumber returns NullableCycleFilter.Number, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetNumber() *NumberComparator { return v.Number }

// GetOr returns NullableCycleFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetOr() []*NullableCycleFilter { return v.Or }

// GetStartsAt returns NullableCycleFilter.StartsAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetStartsAt() *DateComparator { return v.StartsAt }

// GetTeam returns NullableCycleFilter.Team, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetTeam() *TeamFilter { return v.Team }

// GetUpdatedAt returns NullableCycleFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Comparator for optional dates.
type NullableDateComparator struct {
	// Equals constraint.
	Eq *time.Time `json:"eq,omitempty"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt *time.Time `json:"gt,omitempty"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte *time.Time `json:"gte,omitempty"`
	// In-array constraint.
	In []*time.Time `json:"in,omitempty"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt *time.Time `json:"lt,omitempty"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte *time.Time `json:"lte,omitempty"`
	// Not-equals constraint.
	Neq *time.Time `json:"neq,omitempty"`
	// Not-in-array constraint.
	Nin []*time.Time `json:"nin,omitempty"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null *bool `json:"null,omitempty"`
}

// GetEq returns NullableDateComparator.Eq, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetEq() *time.Time { return v.Eq }

// GetGt returns NullableDateComparator.Gt, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetGt() *time.Time { return v.Gt }

// GetGte returns NullableDateComparator.Gte, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetGte() *time.Time { return v.Gte }

// GetIn returns NullableDateComparator.In, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetIn() []*time.Time { return v.In }

// GetLt returns NullableDateComparator.Lt, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetLt() *time.Time { return v.Lt }

// GetLte returns NullableDateComparator.Lte, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetLte() *time.Time { return v.Lte }

// GetNeq returns NullableDateComparator.Neq, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetNeq() *time.Time { return v.Neq }

// GetNin returns NullableDateComparator.Nin, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetNin() []*time.Time { return v.Nin }

// GetNull returns NullableDateComparator.Null, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetNull() *bool { return v.Null }

// Issue filtering options.
type NullableIssueFilter struct {
	// Compound filters, all of which need to be matched by the issue.
	And []*NullableIssueFilter `json:"and,omitempty"`
	// Filters that the issues assignee must satisfy.
	Assignee *NullableUserFilter `json:"assignee,omitempty"`
	// Filters that the issues attachments must satisfy.
	Attachments *AttachmentCollectionFilter `json:"attachments,omitempty"`
	// Comparator for the issues auto archived at date.
	AutoArchivedAt *NullableDateComparator `json:"autoArchivedAt,omitempty"`
	// Comparator for the issues auto closed at date.
	AutoClosedAt *NullableDateComparator `json:"autoClosedAt,omitempty"`
	// Comparator for the issues canceled at date.
	CanceledAt *NullableDateComparator `json:"canceledAt,omitempty"`
	// Filters that the child issues must satisfy.
	Children *IssueCollectionFilter `json:"children,omitempty"`
	// Filters that the issues comments must satisfy.
	Comments *CommentCollectionFilter `json:"comments,omitempty"`
	// Comparator for the issues completed at date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the issues creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that the issues cycle must satisfy.
	Cycle *NullableCycleFilter `json:"cycle,omitempty"`
	// Comparator for the issues description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Comparator for the issues due date.
	DueDate *NullableTimelessDateComparator `json:"dueDate,omitempty"`
	// Comparator for the issues estimate.
	Estimate *EstimateComparator `json:"estimate,omitempty"`
	// Comparator for filtering issues which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering issues which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for filtering issues which are duplicates.
	HasDuplicateRelations *RelationExistsComparator `json:"hasDuplicateRelations,omitempty"`
	// Comparator for filtering issues with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that issue labels must satisfy.
	Labels *IssueLabelCollectionFilter `json:"labels,omitempty"`
	// Filter based on the existence of the relation.
	Null *bool `json:"null,omitempty"`
	// Comparator for the issues number.
	Number *NumberComparator `json:"number,omitempty"`
	// Compound filters, one of which need to be matched by the issue.
	Or []*NullableIssueFilter `json:"or,omitempty"`
	// Filters that the issue parent must satisfy.
	Parent *NullableIssueFilter `json:"parent,omitempty"`
	// Comparator for the issues priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// Filters that the issues project must satisfy.
	Project *NullableProjectFilter `json:"project,omitempty"`
	// Filters that the issues project milestone must satisfy.
	ProjectMilestone *NullableProjectMilestoneFilter `json:"projectMilestone,omitempty"`
	// [Internal] Comparator for the issues content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for the issues sla status.
	SlaStatus *SlaStatusComparator `json:"slaStatus,omitempty"`
	// Filters that the issues snoozer must satisfy.
	SnoozedBy *NullableUserFilter `json:"snoozedBy,omitempty"`
	// Comparator for the issues snoozed until date.
	SnoozedUntilAt *NullableDateComparator `json:"snoozedUntilAt,omitempty"`
	// Comparator for the issues started at date.
	StartedAt *NullableDateComparator `json:"startedAt,omitempty"`
	// Filters that the issues state must satisfy.
	State *WorkflowStateFilter `json:"state,omitempty"`
	// Filters that issue subscribers must satisfy.
	Subscribers *UserCollectionFilter `json:"subscribers,omitempty"`
	// Filters that the issues team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Comparator for the issues title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the issues triaged at date.
	TriagedAt *NullableDateComparator `json:"triagedAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns NullableIssueFilter.And, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAnd() []*NullableIssueFilter { return v.And }

// GetAssignee returns NullableIssueFilter.Assignee, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAssignee() *NullableUserFilter { return v.Assignee }

// GetAttachments returns NullableIssueFilter.Attachments, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAttachments() *AttachmentCollectionFilter { return v.Attachments }

// GetAutoArchivedAt returns NullableIssueFilter.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAutoArchivedAt() *NullableDateComparator { return v.AutoArchivedAt }

// GetAutoClosedAt returns NullableIssueFilter.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAutoClosedAt() *NullableDateComparator { return v.AutoClosedAt }

// GetCanceledAt returns NullableIssueFilter.CanceledAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCanceledAt() *NullableDateComparator { return v.CanceledAt }

// GetChildren returns NullableIssueFilter.Children, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetChildren() *IssueCollectionFilter { return v.Children }

// GetComments returns NullableIssueFilter.Comments, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetComments() *CommentCollectionFilter { return v.Comments }

// GetCompletedAt returns NullableIssueFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetCreatedAt returns NullableIssueFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns NullableIssueFilter.Creator, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetCycle returns NullableIssueFilter.Cycle, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCycle() *NullableCycleFilter { return v.Cycle }

// GetDescription returns NullableIssueFilter.Description, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetDueDate returns NullableIssueFilter.DueDate, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetDueDate() *NullableTimelessDateComparator { return v.DueDate }

// GetEstimate returns NullableIssueFilter.Estimate, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetEstimate() *EstimateComparator { return v.Estimate }

// GetHasBlockedByRelations returns NullableIssueFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns NullableIssueFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetHasDuplicateRelations returns NullableIssueFilter.HasDuplicateRelations, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetHasDuplicateRelations() *RelationExistsComparator {
	return v.HasDuplicateRelations
}

// GetHasRelatedRelations returns NullableIssueFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetId returns NullableIssueFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetId() *IDComparator { return v.Id }

// GetLabels returns NullableIssueFilter.Labels, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetLabels() *IssueLabelCollectionFilter { return v.Labels }

// GetNull returns NullableIssueFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetNull() *bool { return v.Null }

// GetNumber returns NullableIssueFilter.Number, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetNumber() *NumberComparator { return v.Number }

// GetOr returns NullableIssueFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetOr() []*NullableIssueFilter { return v.Or }

// GetParent returns NullableIssueFilter.Parent, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetParent() *NullableIssueFilter { return v.Parent }

// GetPriority returns NullableIssueFilter.Priority, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetProject returns NullableIssueFilter.Project, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetProject() *NullableProjectFilter { return v.Project }

// GetProjectMilestone returns NullableIssueFilter.ProjectMilestone, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetProjectMilestone() *NullableProjectMilestoneFilter {
	return v.ProjectMilestone
}

// GetSearchableContent returns NullableIssueFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSearchableContent() *ContentComparator { return v.SearchableContent }

// GetSlaStatus returns NullableIssueFilter.SlaStatus, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSlaStatus() *SlaStatusComparator { return v.SlaStatus }

// GetSnoozedBy returns NullableIssueFilter.SnoozedBy, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSnoozedBy() *NullableUserFilter { return v.SnoozedBy }

// GetSnoozedUntilAt returns NullableIssueFilter.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSnoozedUntilAt() *NullableDateComparator { return v.SnoozedUntilAt }

// GetStartedAt returns NullableIssueFilter.StartedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetStartedAt() *NullableDateComparator { return v.StartedAt }

// GetState returns NullableIssueFilter.State, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetState() *WorkflowStateFilter { return v.State }

// GetSubscribers returns NullableIssueFilter.Subscribers, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSubscribers() *UserCollectionFilter { return v.Subscribers }

// GetTeam returns NullableIssueFilter.Team, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetTeam() *TeamFilter { return v.Team }

// GetTitle returns NullableIssueFilter.Title, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetTitle() *StringComparator { return v.Title }

// GetTriagedAt returns NullableIssueFilter.TriagedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetTriagedAt() *NullableDateComparator { return v.TriagedAt }

// GetUpdatedAt returns NullableIssueFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Comparator for optional numbers.
type NullableNumberComparator struct {
	// Equals constraint.
	Eq *float64 `json:"eq,omitempty"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt *float64 `json:"gt,omitempty"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte *float64 `json:"gte,omitempty"`
	// In-array constraint.
	In []*float64 `json:"in,omitempty"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt *float64 `json:"lt,omitempty"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte *float64 `json:"lte,omitempty"`
	// Not-equals constraint.
	Neq *float64 `json:"neq,omitempty"`
	// Not-in-array constraint.
	Nin []*float64 `json:"nin,omitempty"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null *bool `json:"null,omitempty"`
}

// GetEq returns NullableNumberComparator.Eq, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetEq() *float64 { return v.Eq }

// GetGt returns NullableNumberComparator.Gt, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetGt() *float64 { return v.Gt }

// GetGte returns NullableNumberComparator.Gte, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetGte() *float64 { return v.Gte }

// GetIn returns NullableNumberComparator.In, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetIn() []*float64 { return v.In }

// GetLt returns NullableNumberComparator.Lt, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetLt() *float64 { return v.Lt }

// GetLte returns NullableNumberComparator.Lte, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetLte() *float64 { return v.Lte }

// GetNeq returns NullableNumberComparator.Neq, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetNeq() *float64 { return v.Neq }

// GetNin returns NullableNumberComparator.Nin, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetNin() []*float64 { return v.Nin }

// GetNull returns NullableNumberComparator.Null, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetNull() *bool { return v.Null }

// Project filtering options.
type NullableProjectFilter struct {
	// Compound filters, all of which need to be matched by the project.
	And []*NullableProjectFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the projects creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that the projects issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Filters that the projects lead must satisfy.
	Lead *NullableUserFilter `json:"lead,omitempty"`
	// Filters that the projects members must satisfy.
	Members *UserFilter `json:"members,omitempty"`
	// Comparator for the project name.
	Name *StringComparator `json:"name,omitempty"`
	// Filter based on the existence of the relation.
	Null *bool `json:"null,omitempty"`
	// Compound filters, one of which need to be matched by the project.
	Or []*NullableProjectFilter `json:"or,omitempty"`
	// Filters that the projects roadmaps must satisfy.
	Roadmaps *RoadmapCollectionFilter `json:"roadmaps,omitempty"`
	// Comparator for the project slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Comparator for the project start date.
	StartDate *NullableDateComparator `json:"startDate,omitempty"`
	// Comparator for the project state.
	State *StringComparator `json:"state,omitempty"`
	// Comparator for the project target date.
	TargetDate *NullableDateComparator `json:"targetDate,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns NullableProjectFilter.And, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetAnd() []*NullableProjectFilter { return v.And }

// GetCreatedAt returns NullableProjectFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns NullableProjectFilter.Creator, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetCreator() *UserFilter { return v.Creator }

// GetId returns NullableProjectFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetId() *IDComparator { return v.Id }

// GetIssues returns NullableProjectFilter.Issues, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetLead returns NullableProjectFilter.Lead, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetLead() *NullableUserFilter { return v.Lead }

// GetMembers returns NullableProjectFilter.Members, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetMembers() *UserFilter { return v.Members }

// GetName returns NullableProjectFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetName() *StringComparator { return v.Name }

// GetNull returns NullableProjectFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetNull() *bool { return v.Null }

// GetOr returns NullableProjectFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetOr() []*NullableProjectFilter { return v.Or }

// GetRoadmaps returns NullableProjectFilter.Roadmaps, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetRoadmaps() *RoadmapCollectionFilter { return v.Roadmaps }

// GetSlugId returns NullableProjectFilter.SlugId, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetStartDate returns NullableProjectFilter.StartDate, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetStartDate() *NullableDateComparator { return v.StartDate }

// GetState returns NullableProjectFilter.State, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetState() *StringComparator { return v.State }

// GetTargetDate returns NullableProjectFilter.TargetDate, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetTargetDate() *NullableDateComparator { return v.TargetDate }

// GetUpdatedAt returns NullableProjectFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Project milestone filtering options.
type NullableProjectMilestoneFilter struct {
	// Compound filters, all of which need to be matched by the project milestone.
	And []*NullableProjectMilestoneFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filter based on the existence of the relation.
	Null *bool `json:"null,omitempty"`
	// Compound filters, one of which need to be matched by the project milestone.
	Or []*NullableProjectMilestoneFilter `json:"or,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns NullableProjectMilestoneFilter.And, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetAnd() []*NullableProjectMilestoneFilter { return v.And }

// GetCreatedAt returns NullableProjectMilestoneFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetId returns NullableProjectMilestoneFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetId() *IDComparator { return v.Id }

// GetNull returns NullableProjectMilestoneFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetNull() *bool { return v.Null }

// GetOr returns NullableProjectMilestoneFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetOr() []*NullableProjectMilestoneFilter { return v.Or }

// GetUpdatedAt returns NullableProjectMilestoneFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Comparator for optional strings.
type NullableStringComparator struct {
	// Contains constraint. Matches any values that contain the given string.
	Contains *string `json:"contains,omitempty"`
	// Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
	ContainsIgnoreCase *string `json:"containsIgnoreCase,omitempty"`
	// Ends with constraint. Matches any values that end with the given string.
	EndsWith *string `json:"endsWith,omitempty"`
	// Equals constraint.
	Eq *string `json:"eq,omitempty"`
	// Equals case insensitive. Matches any values that matches the given string case insensitive.
	EqIgnoreCase *string `json:"eqIgnoreCase,omitempty"`
	// In-array constraint.
	In []*string `json:"in,omitempty"`
	// Not-equals constraint.
	Neq *string `json:"neq,omitempty"`
	// Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
	NeqIgnoreCase *string `json:"neqIgnoreCase,omitempty"`
	// Not-in-array constraint.
	Nin []*string `json:"nin,omitempty"`
	// Doesn't contain constraint. Matches any values that don't contain the given string.
	NotContains *string `json:"notContains,omitempty"`
	// Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
	NotContainsIgnoreCase *string `json:"notContainsIgnoreCase,omitempty"`
	// Doesn't end with constraint. Matches any values that don't end with the given string.
	NotEndsWith *string `json:"notEndsWith,omitempty"`
	// Doesn't start with constraint. Matches any values that don't start with the given string.
	NotStartsWith *string `json:"notStartsWith,omitempty"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null *bool `json:"null,omitempty"`
	// Starts with constraint. Matches any values that start with the given string.
	StartsWith *string `json:"startsWith,omitempty"`
}

// GetContains returns NullableStringComparator.Contains, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetContains() *string { return v.Contains }

// GetContainsIgnoreCase returns NullableStringComparator.ContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetContainsIgnoreCase() *string { return v.ContainsIgnoreCase }

// GetEndsWith returns NullableStringComparator.EndsWith, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetEndsWith() *string { return v.EndsWith }

// GetEq returns NullableStringComparator.Eq, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetEq() *string { return v.Eq }

// GetEqIgnoreCase returns NullableStringComparator.EqIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetEqIgnoreCase() *string { return v.EqIgnoreCase }

// GetIn returns NullableStringComparator.In, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetIn() []*string { return v.In }

// GetNeq returns NullableStringComparator.Neq, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNeq() *string { return v.Neq }

// GetNeqIgnoreCase returns NullableStringComparator.NeqIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNeqIgnoreCase() *string { return v.NeqIgnoreCase }

// GetNin returns NullableStringComparator.Nin, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNin() []*string { return v.Nin }

// GetNotContains returns NullableStringComparator.NotContains, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNotContains() *string { return v.NotContains }

// GetNotContainsIgnoreCase returns NullableStringComparator.NotContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNotContainsIgnoreCase() *string { return v.NotContainsIgnoreCase }

// GetNotEndsWith returns NullableStringComparator.NotEndsWith, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNotEndsWith() *string { return v.NotEndsWith }

// GetNotStartsWith returns NullableStringComparator.NotStartsWith, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNotStartsWith() *string { return v.NotStartsWith }

// GetNull returns NullableStringComparator.Null, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNull() *bool { return v.Null }

// GetStartsWith returns NullableStringComparator.StartsWith, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetStartsWith() *string { return v.StartsWith }

type NullableTimelessDateComparator struct {
	// Equals constraint.
	Eq *time.Time `json:"eq,omitempty"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt *time.Time `json:"gt,omitempty"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte *time.Time `json:"gte,omitempty"`
	// In-array constraint.
	In []*time.Time `json:"in,omitempty"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt *time.Time `json:"lt,omitempty"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte *time.Time `json:"lte,omitempty"`
	// Not-equals constraint.
	Neq *time.Time `json:"neq,omitempty"`
	// Not-in-array constraint.
	Nin []*time.Time `json:"nin,omitempty"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null *bool `json:"null,omitempty"`
}

// GetEq returns NullableTimelessDateComparator.Eq, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetEq() *time.Time { return v.Eq }

// GetGt returns NullableTimelessDateComparator.Gt, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetGt() *time.Time { return v.Gt }

// GetGte returns NullableTimelessDateComparator.Gte, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetGte() *time.Time { return v.Gte }

// GetIn returns NullableTimelessDateComparator.In, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetIn() []*time.Time { return v.In }

// GetLt returns NullableTimelessDateComparator.Lt, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetLt() *time.Time { return v.Lt }

// GetLte returns NullableTimelessDateComparator.Lte, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetLte() *time.Time { return v.Lte }

// GetNeq returns NullableTimelessDateComparator.Neq, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetNeq() *time.Time { return v.Neq }

// GetNin returns NullableTimelessDateComparator.Nin, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetNin() []*time.Time { return v.Nin }

// GetNull returns NullableTimelessDateComparator.Null, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetNull() *bool { return v.Null }

// User filtering options.
type NullableUserFilter struct {
	// Comparator for the user's activity status.
	Active *BooleanComparator `json:"active,omitempty"`
	// Comparator for the user's admin status.
	Admin *BooleanComparator `json:"admin,omitempty"`
	// Compound filters, all of which need to be matched by the user.
	And []*NullableUserFilter `json:"and,omitempty"`
	// Filters that the users assigned issues must satisfy.
	AssignedIssues *IssueCollectionFilter `json:"assignedIssues,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the user's display name.
	DisplayName *StringComparator `json:"displayName,omitempty"`
	// Comparator for the user's email.
	Email *StringComparator `json:"email,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
	IsMe *BooleanComparator `json:"isMe,omitempty"`
	// Comparator for the user's name.
	Name *StringComparator `json:"name,omitempty"`
	// Filter based on the existence of the relation.
	Null *bool `json:"null,omitempty"`
	// Compound filters, one of which need to be matched by the user.
	Or []*NullableUserFilter `json:"or,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetActive returns NullableUserFilter.Active, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetActive() *BooleanComparator { return v.Active }

// GetAdmin returns NullableUserFilter.Admin, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetAdmin() *BooleanComparator { return v.Admin }

// GetAnd returns NullableUserFilter.And, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetAnd() []*NullableUserFilter { return v.And }

// GetAssignedIssues returns NullableUserFilter.AssignedIssues, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetAssignedIssues() *IssueCollectionFilter { return v.AssignedIssues }

// GetCreatedAt returns NullableUserFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetDisplayName returns NullableUserFilter.DisplayName, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetDisplayName() *StringComparator { return v.DisplayName }

// GetEmail returns NullableUserFilter.Email, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetEmail() *StringComparator { return v.Email }

// GetId returns NullableUserFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetId() *IDComparator { return v.Id }

// GetIsMe returns NullableUserFilter.IsMe, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetIsMe() *BooleanComparator { return v.IsMe }

// GetName returns NullableUserFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetName() *StringComparator { return v.Name }

// GetNull returns NullableUserFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetNull() *bool { return v.Null }

// GetOr returns NullableUserFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetOr() []*NullableUserFilter { return v.Or }

// GetUpdatedAt returns NullableUserFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Comparator for numbers.
type NumberComparator struct {
	// Equals constraint.
	Eq *float64 `json:"eq,omitempty"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt *float64 `json:"gt,omitempty"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte *float64 `json:"gte,omitempty"`
	// In-array constraint.
	In []*float64 `json:"in,omitempty"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt *float64 `json:"lt,omitempty"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte *float64 `json:"lte,omitempty"`
	// Not-equals constraint.
	Neq *float64 `json:"neq,omitempty"`
	// Not-in-array constraint.
	Nin []*float64 `json:"nin,omitempty"`
}

// GetEq returns NumberComparator.Eq, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetEq() *float64 { return v.Eq }

// GetGt returns NumberComparator.Gt, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetGt() *float64 { return v.Gt }

// GetGte returns NumberComparator.Gte, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetGte() *float64 { return v.Gte }

// GetIn returns NumberComparator.In, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetIn() []*float64 { return v.In }

// GetLt returns NumberComparator.Lt, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetLt() *float64 { return v.Lt }

// GetLte returns NumberComparator.Lte, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetLte() *float64 { return v.Lte }

// GetNeq returns NumberComparator.Neq, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetNeq() *float64 { return v.Neq }

// GetNin returns NumberComparator.Nin, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetNin() []*float64 { return v.Nin }

// Project filtering options.
type ProjectFilter struct {
	// Compound filters, all of which need to be matched by the project.
	And []*ProjectFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the projects creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that the projects issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Filters that the projects lead must satisfy.
	Lead *NullableUserFilter `json:"lead,omitempty"`
	// Filters that the projects members must satisfy.
	Members *UserFilter `json:"members,omitempty"`
	// Comparator for the project name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the project.
	Or []*ProjectFilter `json:"or,omitempty"`
	// Filters that the projects roadmaps must satisfy.
	Roadmaps *RoadmapCollectionFilter `json:"roadmaps,omitempty"`
	// Comparator for the project slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Comparator for the project start date.
	StartDate *NullableDateComparator `json:"startDate,omitempty"`
	// Comparator for the project state.
	State *StringComparator `json:"state,omitempty"`
	// Comparator for the project target date.
	TargetDate *NullableDateComparator `json:"targetDate,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns ProjectFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetAnd() []*ProjectFilter { return v.And }

// GetCreatedAt returns ProjectFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns ProjectFilter.Creator, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetCreator() *UserFilter { return v.Creator }

// GetId returns ProjectFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetId() *IDComparator { return v.Id }

// GetIssues returns ProjectFilter.Issues, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetLead returns ProjectFilter.Lead, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetLead() *NullableUserFilter { return v.Lead }

// GetMembers returns ProjectFilter.Members, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetMembers() *UserFilter { return v.Members }

// GetName returns ProjectFilter.Name, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetName() *StringComparator { return v.Name }

// GetOr returns ProjectFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetOr() []*ProjectFilter { return v.Or }

// GetRoadmaps returns ProjectFilter.Roadmaps, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetRoadmaps() *RoadmapCollectionFilter { return v.Roadmaps }

// GetSlugId returns ProjectFilter.SlugId, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetStartDate returns ProjectFilter.StartDate, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetStartDate() *NullableDateComparator { return v.StartDate }

// GetState returns ProjectFilter.State, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetState() *StringComparator { return v.State }

// GetTargetDate returns ProjectFilter.TargetDate, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetTargetDate() *NullableDateComparator { return v.TargetDate }

// GetUpdatedAt returns ProjectFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// The frequency at which to send project update reminders.
type ProjectUpdateReminderFrequency string

const (
	ProjectUpdateReminderFrequencyNever    ProjectUpdateReminderFrequency = "never"
	ProjectUpdateReminderFrequencyTwoweeks ProjectUpdateReminderFrequency = "twoWeeks"
	ProjectUpdateReminderFrequencyWeek     ProjectUpdateReminderFrequency = "week"
)

// Comparator for relation existence.
type RelationExistsComparator struct {
	// Equals constraint.
	Eq *bool `json:"eq,omitempty"`
	// Not equals constraint.
	Neq *bool `json:"neq,omitempty"`
}

// GetEq returns RelationExistsComparator.Eq, and is useful for accessing the field via an interface.
func (v *RelationExistsComparator) GetEq() *bool { return v.Eq }

// GetNeq returns RelationExistsComparator.Neq, and is useful for accessing the field via an interface.
func (v *RelationExistsComparator) GetNeq() *bool { return v.Neq }

// Features release channel
type ReleaseChannel string

const (
	ReleaseChannelBeta       ReleaseChannel = "beta"
	ReleaseChannelInternal   ReleaseChannel = "internal"
	ReleaseChannelPrerelease ReleaseChannel = "preRelease"
	ReleaseChannelPublic     ReleaseChannel = "public"
)

// Roadmap collection filtering options.
type RoadmapCollectionFilter struct {
	// Compound filters, all of which need to be matched by the roadmap.
	And []*RoadmapCollectionFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the roadmap creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Filters that needs to be matched by all roadmaps.
	Every *RoadmapFilter `json:"every,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
	// Comparator for the roadmap name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the roadmap.
	Or []*RoadmapCollectionFilter `json:"or,omitempty"`
	// Comparator for the roadmap slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Filters that needs to be matched by some roadmaps.
	Some *RoadmapFilter `json:"some,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns RoadmapCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetAnd() []*RoadmapCollectionFilter { return v.And }

// GetCreatedAt returns RoadmapCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns RoadmapCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetCreator() *UserFilter { return v.Creator }

// GetEvery returns RoadmapCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetEvery() *RoadmapFilter { return v.Every }

// GetId returns RoadmapCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetId() *IDComparator { return v.Id }

// GetLength returns RoadmapCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetLength() *NumberComparator { return v.Length }

// GetName returns RoadmapCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetName() *StringComparator { return v.Name }

// GetOr returns RoadmapCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetOr() []*RoadmapCollectionFilter { return v.Or }

// GetSlugId returns RoadmapCollectionFilter.SlugId, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetSome returns RoadmapCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetSome() *RoadmapFilter { return v.Some }

// GetUpdatedAt returns RoadmapCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Roadmap filtering options.
type RoadmapFilter struct {
	// Compound filters, all of which need to be matched by the roadmap.
	And []*RoadmapFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Filters that the roadmap creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the roadmap name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the roadmap.
	Or []*RoadmapFilter `json:"or,omitempty"`
	// Comparator for the roadmap slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns RoadmapFilter.And, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetAnd() []*RoadmapFilter { return v.And }

// GetCreatedAt returns RoadmapFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetCreator returns RoadmapFilter.Creator, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetCreator() *UserFilter { return v.Creator }

// GetId returns RoadmapFilter.Id, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetId() *IDComparator { return v.Id }

// GetName returns RoadmapFilter.Name, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetName() *StringComparator { return v.Name }

// GetOr returns RoadmapFilter.Or, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetOr() []*RoadmapFilter { return v.Or }

// GetSlugId returns RoadmapFilter.SlugId, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetUpdatedAt returns RoadmapFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

type SlaStatus string

const (
	SlaStatusBreached   SlaStatus = "Breached"
	SlaStatusCompleted  SlaStatus = "Completed"
	SlaStatusFailed     SlaStatus = "Failed"
	SlaStatusHighrisk   SlaStatus = "HighRisk"
	SlaStatusLowrisk    SlaStatus = "LowRisk"
	SlaStatusMediumrisk SlaStatus = "MediumRisk"
)

// Comparator for sla status.
type SlaStatusComparator struct {
	// Equals constraint.
	Eq *SlaStatus `json:"eq,omitempty"`
	// In-array constraint.
	In []*SlaStatus `json:"in,omitempty"`
	// Not-equals constraint.
	Neq *SlaStatus `json:"neq,omitempty"`
	// Not-in-array constraint.
	Nin []*SlaStatus `json:"nin,omitempty"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null *bool `json:"null,omitempty"`
}

// GetEq returns SlaStatusComparator.Eq, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetEq() *SlaStatus { return v.Eq }

// GetIn returns SlaStatusComparator.In, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetIn() []*SlaStatus { return v.In }

// GetNeq returns SlaStatusComparator.Neq, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetNeq() *SlaStatus { return v.Neq }

// GetNin returns SlaStatusComparator.Nin, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetNin() []*SlaStatus { return v.Nin }

// GetNull returns SlaStatusComparator.Null, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetNull() *bool { return v.Null }

// Comparator for `sourceType` field.
type SourceTypeComparator struct {
	// Contains constraint. Matches any values that contain the given string.
	Contains *string `json:"contains,omitempty"`
	// Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
	ContainsIgnoreCase *string `json:"containsIgnoreCase,omitempty"`
	// Ends with constraint. Matches any values that end with the given string.
	EndsWith *string `json:"endsWith,omitempty"`
	// Equals constraint.
	Eq *string `json:"eq,omitempty"`
	// Equals case insensitive. Matches any values that matches the given string case insensitive.
	EqIgnoreCase *string `json:"eqIgnoreCase,omitempty"`
	// In-array constraint.
	In []*string `json:"in,omitempty"`
	// Not-equals constraint.
	Neq *string `json:"neq,omitempty"`
	// Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
	NeqIgnoreCase *string `json:"neqIgnoreCase,omitempty"`
	// Not-in-array constraint.
	Nin []*string `json:"nin,omitempty"`
	// Doesn't contain constraint. Matches any values that don't contain the given string.
	NotContains *string `json:"notContains,omitempty"`
	// Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
	NotContainsIgnoreCase *string `json:"notContainsIgnoreCase,omitempty"`
	// Doesn't end with constraint. Matches any values that don't end with the given string.
	NotEndsWith *string `json:"notEndsWith,omitempty"`
	// Doesn't start with constraint. Matches any values that don't start with the given string.
	NotStartsWith *string `json:"notStartsWith,omitempty"`
	// Starts with constraint. Matches any values that start with the given string.
	StartsWith *string `json:"startsWith,omitempty"`
}

// GetContains returns SourceTypeComparator.Contains, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetContains() *string { return v.Contains }

// GetContainsIgnoreCase returns SourceTypeComparator.ContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetContainsIgnoreCase() *string { return v.ContainsIgnoreCase }

// GetEndsWith returns SourceTypeComparator.EndsWith, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetEndsWith() *string { return v.EndsWith }

// GetEq returns SourceTypeComparator.Eq, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetEq() *string { return v.Eq }

// GetEqIgnoreCase returns SourceTypeComparator.EqIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetEqIgnoreCase() *string { return v.EqIgnoreCase }

// GetIn returns SourceTypeComparator.In, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetIn() []*string { return v.In }

// GetNeq returns SourceTypeComparator.Neq, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNeq() *string { return v.Neq }

// GetNeqIgnoreCase returns SourceTypeComparator.NeqIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNeqIgnoreCase() *string { return v.NeqIgnoreCase }

// GetNin returns SourceTypeComparator.Nin, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNin() []*string { return v.Nin }

// GetNotContains returns SourceTypeComparator.NotContains, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNotContains() *string { return v.NotContains }

// GetNotContainsIgnoreCase returns SourceTypeComparator.NotContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNotContainsIgnoreCase() *string { return v.NotContainsIgnoreCase }

// GetNotEndsWith returns SourceTypeComparator.NotEndsWith, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNotEndsWith() *string { return v.NotEndsWith }

// GetNotStartsWith returns SourceTypeComparator.NotStartsWith, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNotStartsWith() *string { return v.NotStartsWith }

// GetStartsWith returns SourceTypeComparator.StartsWith, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetStartsWith() *string { return v.StartsWith }

// Comparator for strings.
type StringComparator struct {
	// Contains constraint. Matches any values that contain the given string.
	Contains *string `json:"contains,omitempty"`
	// Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
	ContainsIgnoreCase *string `json:"containsIgnoreCase,omitempty"`
	// Ends with constraint. Matches any values that end with the given string.
	EndsWith *string `json:"endsWith,omitempty"`
	// Equals constraint.
	Eq *string `json:"eq,omitempty"`
	// Equals case insensitive. Matches any values that matches the given string case insensitive.
	EqIgnoreCase *string `json:"eqIgnoreCase,omitempty"`
	// In-array constraint.
	In []*string `json:"in,omitempty"`
	// Not-equals constraint.
	Neq *string `json:"neq,omitempty"`
	// Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
	NeqIgnoreCase *string `json:"neqIgnoreCase,omitempty"`
	// Not-in-array constraint.
	Nin []*string `json:"nin,omitempty"`
	// Doesn't contain constraint. Matches any values that don't contain the given string.
	NotContains *string `json:"notContains,omitempty"`
	// Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
	NotContainsIgnoreCase *string `json:"notContainsIgnoreCase,omitempty"`
	// Doesn't end with constraint. Matches any values that don't end with the given string.
	NotEndsWith *string `json:"notEndsWith,omitempty"`
	// Doesn't start with constraint. Matches any values that don't start with the given string.
	NotStartsWith *string `json:"notStartsWith,omitempty"`
	// Starts with constraint. Matches any values that start with the given string.
	StartsWith *string `json:"startsWith,omitempty"`
}

// GetContains returns StringComparator.Contains, and is useful for accessing the field via an interface.
func (v *StringComparator) GetContains() *string { return v.Contains }

// GetContainsIgnoreCase returns StringComparator.ContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetContainsIgnoreCase() *string { return v.ContainsIgnoreCase }

// GetEndsWith returns StringComparator.EndsWith, and is useful for accessing the field via an interface.
func (v *StringComparator) GetEndsWith() *string { return v.EndsWith }

// GetEq returns StringComparator.Eq, and is useful for accessing the field via an interface.
func (v *StringComparator) GetEq() *string { return v.Eq }

// GetEqIgnoreCase returns StringComparator.EqIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetEqIgnoreCase() *string { return v.EqIgnoreCase }

// GetIn returns StringComparator.In, and is useful for accessing the field via an interface.
func (v *StringComparator) GetIn() []*string { return v.In }

// GetNeq returns StringComparator.Neq, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNeq() *string { return v.Neq }

// GetNeqIgnoreCase returns StringComparator.NeqIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNeqIgnoreCase() *string { return v.NeqIgnoreCase }

// GetNin returns StringComparator.Nin, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNin() []*string { return v.Nin }

// GetNotContains returns StringComparator.NotContains, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNotContains() *string { return v.NotContains }

// GetNotContainsIgnoreCase returns StringComparator.NotContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNotContainsIgnoreCase() *string { return v.NotContainsIgnoreCase }

// GetNotEndsWith returns StringComparator.NotEndsWith, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNotEndsWith() *string { return v.NotEndsWith }

// GetNotStartsWith returns StringComparator.NotStartsWith, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNotStartsWith() *string { return v.NotStartsWith }

// GetStartsWith returns StringComparator.StartsWith, and is useful for accessing the field via an interface.
func (v *StringComparator) GetStartsWith() *string { return v.StartsWith }

// Team filtering options.
type TeamFilter struct {
	// Compound filters, all of which need to be matched by the team.
	And []*TeamFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the team description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that the teams issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Comparator for the team key.
	Key *StringComparator `json:"key,omitempty"`
	// Comparator for the team name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the team.
	Or []*TeamFilter `json:"or,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns TeamFilter.And, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetAnd() []*TeamFilter { return v.And }

// GetCreatedAt returns TeamFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetDescription returns TeamFilter.Description, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetId returns TeamFilter.Id, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetId() *IDComparator { return v.Id }

// GetIssues returns TeamFilter.Issues, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetKey returns TeamFilter.Key, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetKey() *StringComparator { return v.Key }

// GetName returns TeamFilter.Name, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetName() *StringComparator { return v.Name }

// GetOr returns TeamFilter.Or, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetOr() []*TeamFilter { return v.Or }

// GetUpdatedAt returns TeamFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// User filtering options.
type UserCollectionFilter struct {
	// Comparator for the user's activity status.
	Active *BooleanComparator `json:"active,omitempty"`
	// Comparator for the user's admin status.
	Admin *BooleanComparator `json:"admin,omitempty"`
	// Compound filters, all of which need to be matched by the user.
	And []*UserCollectionFilter `json:"and,omitempty"`
	// Filters that the users assigned issues must satisfy.
	AssignedIssues *IssueCollectionFilter `json:"assignedIssues,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the user's display name.
	DisplayName *StringComparator `json:"displayName,omitempty"`
	// Comparator for the user's email.
	Email *StringComparator `json:"email,omitempty"`
	// Filters that needs to be matched by all users.
	Every *UserFilter `json:"every,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
	IsMe *BooleanComparator `json:"isMe,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
	// Comparator for the user's name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the user.
	Or []*UserCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some users.
	Some *UserFilter `json:"some,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetActive returns UserCollectionFilter.Active, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetActive() *BooleanComparator { return v.Active }

// GetAdmin returns UserCollectionFilter.Admin, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetAdmin() *BooleanComparator { return v.Admin }

// GetAnd returns UserCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetAnd() []*UserCollectionFilter { return v.And }

// GetAssignedIssues returns UserCollectionFilter.AssignedIssues, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetAssignedIssues() *IssueCollectionFilter { return v.AssignedIssues }

// GetCreatedAt returns UserCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetDisplayName returns UserCollectionFilter.DisplayName, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetDisplayName() *StringComparator { return v.DisplayName }

// GetEmail returns UserCollectionFilter.Email, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetEmail() *StringComparator { return v.Email }

// GetEvery returns UserCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetEvery() *UserFilter { return v.Every }

// GetId returns UserCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetId() *IDComparator { return v.Id }

// GetIsMe returns UserCollectionFilter.IsMe, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetIsMe() *BooleanComparator { return v.IsMe }

// GetLength returns UserCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetLength() *NumberComparator { return v.Length }

// GetName returns UserCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetName() *StringComparator { return v.Name }

// GetOr returns UserCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetOr() []*UserCollectionFilter { return v.Or }

// GetSome returns UserCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetSome() *UserFilter { return v.Some }

// GetUpdatedAt returns UserCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// User filtering options.
type UserFilter struct {
	// Comparator for the user's activity status.
	Active *BooleanComparator `json:"active,omitempty"`
	// Comparator for the user's admin status.
	Admin *BooleanComparator `json:"admin,omitempty"`
	// Compound filters, all of which need to be matched by the user.
	And []*UserFilter `json:"and,omitempty"`
	// Filters that the users assigned issues must satisfy.
	AssignedIssues *IssueCollectionFilter `json:"assignedIssues,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the user's display name.
	DisplayName *StringComparator `json:"displayName,omitempty"`
	// Comparator for the user's email.
	Email *StringComparator `json:"email,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
	IsMe *BooleanComparator `json:"isMe,omitempty"`
	// Comparator for the user's name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the user.
	Or []*UserFilter `json:"or,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetActive returns UserFilter.Active, and is useful for accessing the field via an interface.
func (v *UserFilter) GetActive() *BooleanComparator { return v.Active }

// GetAdmin returns UserFilter.Admin, and is useful for accessing the field via an interface.
func (v *UserFilter) GetAdmin() *BooleanComparator { return v.Admin }

// GetAnd returns UserFilter.And, and is useful for accessing the field via an interface.
func (v *UserFilter) GetAnd() []*UserFilter { return v.And }

// GetAssignedIssues returns UserFilter.AssignedIssues, and is useful for accessing the field via an interface.
func (v *UserFilter) GetAssignedIssues() *IssueCollectionFilter { return v.AssignedIssues }

// GetCreatedAt returns UserFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetDisplayName returns UserFilter.DisplayName, and is useful for accessing the field via an interface.
func (v *UserFilter) GetDisplayName() *StringComparator { return v.DisplayName }

// GetEmail returns UserFilter.Email, and is useful for accessing the field via an interface.
func (v *UserFilter) GetEmail() *StringComparator { return v.Email }

// GetId returns UserFilter.Id, and is useful for accessing the field via an interface.
func (v *UserFilter) GetId() *IDComparator { return v.Id }

// GetIsMe returns UserFilter.IsMe, and is useful for accessing the field via an interface.
func (v *UserFilter) GetIsMe() *BooleanComparator { return v.IsMe }

// GetName returns UserFilter.Name, and is useful for accessing the field via an interface.
func (v *UserFilter) GetName() *StringComparator { return v.Name }

// GetOr returns UserFilter.Or, and is useful for accessing the field via an interface.
func (v *UserFilter) GetOr() []*UserFilter { return v.Or }

// GetUpdatedAt returns UserFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// Workflow state filtering options.
type WorkflowStateFilter struct {
	// Compound filters, all of which need to be matched by the workflow state.
	And []*WorkflowStateFilter `json:"and,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the workflow state description.
	Description *StringComparator `json:"description,omitempty"`
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Filters that the workflow states issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Comparator for the workflow state name.
	Name *StringComparator `json:"name,omitempty"`
	// Compound filters, one of which need to be matched by the workflow state.
	Or []*WorkflowStateFilter `json:"or,omitempty"`
	// Comparator for the workflow state position.
	Position *NumberComparator `json:"position,omitempty"`
	// Filters that the workflow states team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Comparator for the workflow state type.
	Type *StringComparator `json:"type,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
}

// GetAnd returns WorkflowStateFilter.And, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetAnd() []*WorkflowStateFilter { return v.And }

// GetCreatedAt returns WorkflowStateFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetDescription returns WorkflowStateFilter.Description, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetDescription() *StringComparator { return v.Description }

// GetId returns WorkflowStateFilter.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetId() *IDComparator { return v.Id }

// GetIssues returns WorkflowStateFilter.Issues, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetName returns WorkflowStateFilter.Name, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetName() *StringComparator { return v.Name }

// GetOr returns WorkflowStateFilter.Or, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetOr() []*WorkflowStateFilter { return v.Or }

// GetPosition returns WorkflowStateFilter.Position, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetPosition() *NumberComparator { return v.Position }

// GetTeam returns WorkflowStateFilter.Team, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetTeam() *TeamFilter { return v.Team }

// GetType returns WorkflowStateFilter.Type, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetType() *StringComparator { return v.Type }

// GetUpdatedAt returns WorkflowStateFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// __listAttachmentInput is used internally by genqlient
type __listAttachmentInput struct {
	First           int               `json:"first,omitempty"`
	After           string            `json:"after,omitempty"`
	IncludeArchived bool              `json:"includeArchived,omitempty"`
	Filter          *AttachmentFilter `json:"filter,omitempty"`
	IncludeCreator  *bool             `json:"includeCreator,omitempty"`
	IncludeIssue    *bool             `json:"includeIssue,omitempty"`
}

// GetFirst returns __listAttachmentInput.First, and is useful for accessing the field via an interface.
func (v *__listAttachmentInput) GetFirst() int { return v.First }

// GetAfter returns __listAttachmentInput.After, and is useful for accessing the field via an interface.
func (v *__listAttachmentInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listAttachmentInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listAttachmentInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listAttachmentInput.Filter, and is useful for accessing the field via an interface.
func (v *__listAttachmentInput) GetFilter() *AttachmentFilter { return v.Filter }

// GetIncludeCreator returns __listAttachmentInput.IncludeCreator, and is useful for accessing the field via an interface.
func (v *__listAttachmentInput) GetIncludeCreator() *bool { return v.IncludeCreator }

// GetIncludeIssue returns __listAttachmentInput.IncludeIssue, and is useful for accessing the field via an interface.
func (v *__listAttachmentInput) GetIncludeIssue() *bool { return v.IncludeIssue }

// __listCommentInput is used internally by genqlient
type __listCommentInput struct {
	First           int            `json:"first,omitempty"`
	After           string         `json:"after,omitempty"`
	IncludeArchived bool           `json:"includeArchived,omitempty"`
	Filter          *CommentFilter `json:"filter,omitempty"`
	IncludeIssue    *bool          `json:"includeIssue,omitempty"`
	IncludeParent   *bool          `json:"includeParent,omitempty"`
	IncludeUser     *bool          `json:"includeUser,omitempty"`
}

// GetFirst returns __listCommentInput.First, and is useful for accessing the field via an interface.
func (v *__listCommentInput) GetFirst() int { return v.First }

// GetAfter returns __listCommentInput.After, and is useful for accessing the field via an interface.
func (v *__listCommentInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listCommentInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listCommentInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listCommentInput.Filter, and is useful for accessing the field via an interface.
func (v *__listCommentInput) GetFilter() *CommentFilter { return v.Filter }

// GetIncludeIssue returns __listCommentInput.IncludeIssue, and is useful for accessing the field via an interface.
func (v *__listCommentInput) GetIncludeIssue() *bool { return v.IncludeIssue }

// GetIncludeParent returns __listCommentInput.IncludeParent, and is useful for accessing the field via an interface.
func (v *__listCommentInput) GetIncludeParent() *bool { return v.IncludeParent }

// GetIncludeUser returns __listCommentInput.IncludeUser, and is useful for accessing the field via an interface.
func (v *__listCommentInput) GetIncludeUser() *bool { return v.IncludeUser }

// __listCycleInput is used internally by genqlient
type __listCycleInput struct {
	First           int          `json:"first,omitempty"`
	After           string       `json:"after,omitempty"`
	IncludeArchived bool         `json:"includeArchived,omitempty"`
	Filter          *CycleFilter `json:"filter,omitempty"`
	IncludeTeam     *bool        `json:"includeTeam,omitempty"`
}

// GetFirst returns __listCycleInput.First, and is useful for accessing the field via an interface.
func (v *__listCycleInput) GetFirst() int { return v.First }

// GetAfter returns __listCycleInput.After, and is useful for accessing the field via an interface.
func (v *__listCycleInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listCycleInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listCycleInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listCycleInput.Filter, and is useful for accessing the field via an interface.
func (v *__listCycleInput) GetFilter() *CycleFilter { return v.Filter }

// GetIncludeTeam returns __listCycleInput.IncludeTeam, and is useful for accessing the field via an interface.
func (v *__listCycleInput) GetIncludeTeam() *bool { return v.IncludeTeam }

// __listIntegrationInput is used internally by genqlient
type __listIntegrationInput struct {
	First               int    `json:"first,omitempty"`
	After               string `json:"after,omitempty"`
	IncludeArchived     bool   `json:"includeArchived,omitempty"`
	IncludeCreator      *bool  `json:"includeCreator,omitempty"`
	IncludeOrganization *bool  `json:"includeOrganization,omitempty"`
	IncludeTeam         *bool  `json:"includeTeam,omitempty"`
}

// GetFirst returns __listIntegrationInput.First, and is useful for accessing the field via an interface.
func (v *__listIntegrationInput) GetFirst() int { return v.First }

// GetAfter returns __listIntegrationInput.After, and is useful for accessing the field via an interface.
func (v *__listIntegrationInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listIntegrationInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listIntegrationInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetIncludeCreator returns __listIntegrationInput.IncludeCreator, and is useful for accessing the field via an interface.
func (v *__listIntegrationInput) GetIncludeCreator() *bool { return v.IncludeCreator }

// GetIncludeOrganization returns __listIntegrationInput.IncludeOrganization, and is useful for accessing the field via an interface.
func (v *__listIntegrationInput) GetIncludeOrganization() *bool { return v.IncludeOrganization }

// GetIncludeTeam returns __listIntegrationInput.IncludeTeam, and is useful for accessing the field via an interface.
func (v *__listIntegrationInput) GetIncludeTeam() *bool { return v.IncludeTeam }

// __listIssueInput is used internally by genqlient
type __listIssueInput struct {
	First                   int          `json:"first,omitempty"`
	After                   string       `json:"after,omitempty"`
	IncludeArchived         bool         `json:"includeArchived,omitempty"`
	Filter                  *IssueFilter `json:"filter,omitempty"`
	IncludeTeam             *bool        `json:"includeTeam,omitempty"`
	IncludeCycle            *bool        `json:"includeCycle,omitempty"`
	IncludeProject          *bool        `json:"includeProject,omitempty"`
	IncludeCreator          *bool        `json:"includeCreator,omitempty"`
	IncludeAssignee         *bool        `json:"includeAssignee,omitempty"`
	IncludeSnoozedBy        *bool        `json:"includeSnoozedBy,omitempty"`
	IncludeState            *bool        `json:"includeState,omitempty"`
	IncludeParent           *bool        `json:"includeParent,omitempty"`
	IncludeProjectMilestone *bool        `json:"includeProjectMilestone,omitempty"`
}

// GetFirst returns __listIssueInput.First, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetFirst() int { return v.First }

// GetAfter returns __listIssueInput.After, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listIssueInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listIssueInput.Filter, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetFilter() *IssueFilter { return v.Filter }

// GetIncludeTeam returns __listIssueInput.IncludeTeam, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeTeam() *bool { return v.IncludeTeam }

// GetIncludeCycle returns __listIssueInput.IncludeCycle, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeCycle() *bool { return v.IncludeCycle }

// GetIncludeProject returns __listIssueInput.IncludeProject, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeProject() *bool { return v.IncludeProject }

// GetIncludeCreator returns __listIssueInput.IncludeCreator, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeCreator() *bool { return v.IncludeCreator }

// GetIncludeAssignee returns __listIssueInput.IncludeAssignee, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeAssignee() *bool { return v.IncludeAssignee }

// GetIncludeSnoozedBy returns __listIssueInput.IncludeSnoozedBy, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeSnoozedBy() *bool { return v.IncludeSnoozedBy }

// GetIncludeState returns __listIssueInput.IncludeState, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeState() *bool { return v.IncludeState }

// GetIncludeParent returns __listIssueInput.IncludeParent, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeParent() *bool { return v.IncludeParent }

// GetIncludeProjectMilestone returns __listIssueInput.IncludeProjectMilestone, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetIncludeProjectMilestone() *bool { return v.IncludeProjectMilestone }

// __listIssueLabelInput is used internally by genqlient
type __listIssueLabelInput struct {
	First               int               `json:"first,omitempty"`
	After               string            `json:"after,omitempty"`
	IncludeArchived     bool              `json:"includeArchived,omitempty"`
	Filter              *IssueLabelFilter `json:"filter,omitempty"`
	IncludeCreator      *bool             `json:"includeCreator,omitempty"`
	IncludeOrganization *bool             `json:"includeOrganization,omitempty"`
	IncludeParent       *bool             `json:"includeParent,omitempty"`
	IncludeTeam         *bool             `json:"includeTeam,omitempty"`
}

// GetFirst returns __listIssueLabelInput.First, and is useful for accessing the field via an interface.
func (v *__listIssueLabelInput) GetFirst() int { return v.First }

// GetAfter returns __listIssueLabelInput.After, and is useful for accessing the field via an interface.
func (v *__listIssueLabelInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listIssueLabelInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listIssueLabelInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listIssueLabelInput.Filter, and is useful for accessing the field via an interface.
func (v *__listIssueLabelInput) GetFilter() *IssueLabelFilter { return v.Filter }

// GetIncludeCreator returns __listIssueLabelInput.IncludeCreator, and is useful for accessing the field via an interface.
func (v *__listIssueLabelInput) GetIncludeCreator() *bool { return v.IncludeCreator }

// GetIncludeOrganization returns __listIssueLabelInput.IncludeOrganization, and is useful for accessing the field via an interface.
func (v *__listIssueLabelInput) GetIncludeOrganization() *bool { return v.IncludeOrganization }

// GetIncludeParent returns __listIssueLabelInput.IncludeParent, and is useful for accessing the field via an interface.
func (v *__listIssueLabelInput) GetIncludeParent() *bool { return v.IncludeParent }

// GetIncludeTeam returns __listIssueLabelInput.IncludeTeam, and is useful for accessing the field via an interface.
func (v *__listIssueLabelInput) GetIncludeTeam() *bool { return v.IncludeTeam }

// __listOrganizationInput is used internally by genqlient
type __listOrganizationInput struct {
	IncludeSubscription *bool `json:"includeSubscription"`
}

// GetIncludeSubscription returns __listOrganizationInput.IncludeSubscription, and is useful for accessing the field via an interface.
func (v *__listOrganizationInput) GetIncludeSubscription() *bool { return v.IncludeSubscription }

// __listProjectInput is used internally by genqlient
type __listProjectInput struct {
	First                       int            `json:"first,omitempty"`
	After                       string         `json:"after,omitempty"`
	IncludeArchived             bool           `json:"includeArchived,omitempty"`
	Filter                      *ProjectFilter `json:"filter,omitempty"`
	IncludeConvertedFromIssue   *bool          `json:"includeConvertedFromIssue,omitempty"`
	IncludeIntegrationsSettings *bool          `json:"includeIntegrationsSettings,omitempty"`
	IncludeLead                 *bool          `json:"includeLead,omitempty"`
	IncludeCreator              *bool          `json:"includeCreator,omitempty"`
}

// GetFirst returns __listProjectInput.First, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetFirst() int { return v.First }

// GetAfter returns __listProjectInput.After, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listProjectInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listProjectInput.Filter, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetFilter() *ProjectFilter { return v.Filter }

// GetIncludeConvertedFromIssue returns __listProjectInput.IncludeConvertedFromIssue, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetIncludeConvertedFromIssue() *bool { return v.IncludeConvertedFromIssue }

// GetIncludeIntegrationsSettings returns __listProjectInput.IncludeIntegrationsSettings, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetIncludeIntegrationsSettings() *bool {
	return v.IncludeIntegrationsSettings
}

// GetIncludeLead returns __listProjectInput.IncludeLead, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetIncludeLead() *bool { return v.IncludeLead }

// GetIncludeCreator returns __listProjectInput.IncludeCreator, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetIncludeCreator() *bool { return v.IncludeCreator }

// __listTeamInput is used internally by genqlient
type __listTeamInput struct {
	First                         int         `json:"first,omitempty"`
	After                         string      `json:"after,omitempty"`
	IncludeArchived               bool        `json:"includeArchived,omitempty"`
	Filter                        *TeamFilter `json:"filter,omitempty"`
	IncludeCycle                  *bool       `json:"includeCycle,omitempty"`
	IncludeIssueState             *bool       `json:"includeIssueState,omitempty"`
	IncludeTemplateForMembers     *bool       `json:"includeTemplateForMembers,omitempty"`
	IncludeTemplateForNonMembers  *bool       `json:"includeTemplateForNonMembers,omitempty"`
	IncludeWorkflowState          *bool       `json:"includeWorkflowState,omitempty"`
	IncludeIntegrationsSettings   *bool       `json:"includeIntegrationsSettings,omitempty"`
	IncludeDuplicateWorkflowState *bool       `json:"includeDuplicateWorkflowState,omitempty"`
	IncludeOrganization           *bool       `json:"includeOrganization,omitempty"`
	IncludeReviewWorkflowState    *bool       `json:"includeReviewWorkflowState,omitempty"`
	IncludeStartWorkflowState     *bool       `json:"includeStartWorkflowState,omitempty"`
	IncludeTriageWorkflowState    *bool       `json:"includeTriageWorkflowState,omitempty"`
}

// GetFirst returns __listTeamInput.First, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetFirst() int { return v.First }

// GetAfter returns __listTeamInput.After, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listTeamInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listTeamInput.Filter, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetFilter() *TeamFilter { return v.Filter }

// GetIncludeCycle returns __listTeamInput.IncludeCycle, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeCycle() *bool { return v.IncludeCycle }

// GetIncludeIssueState returns __listTeamInput.IncludeIssueState, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeIssueState() *bool { return v.IncludeIssueState }

// GetIncludeTemplateForMembers returns __listTeamInput.IncludeTemplateForMembers, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeTemplateForMembers() *bool { return v.IncludeTemplateForMembers }

// GetIncludeTemplateForNonMembers returns __listTeamInput.IncludeTemplateForNonMembers, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeTemplateForNonMembers() *bool {
	return v.IncludeTemplateForNonMembers
}

// GetIncludeWorkflowState returns __listTeamInput.IncludeWorkflowState, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeWorkflowState() *bool { return v.IncludeWorkflowState }

// GetIncludeIntegrationsSettings returns __listTeamInput.IncludeIntegrationsSettings, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeIntegrationsSettings() *bool {
	return v.IncludeIntegrationsSettings
}

// GetIncludeDuplicateWorkflowState returns __listTeamInput.IncludeDuplicateWorkflowState, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeDuplicateWorkflowState() *bool {
	return v.IncludeDuplicateWorkflowState
}

// GetIncludeOrganization returns __listTeamInput.IncludeOrganization, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeOrganization() *bool { return v.IncludeOrganization }

// GetIncludeReviewWorkflowState returns __listTeamInput.IncludeReviewWorkflowState, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeReviewWorkflowState() *bool { return v.IncludeReviewWorkflowState }

// GetIncludeStartWorkflowState returns __listTeamInput.IncludeStartWorkflowState, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeStartWorkflowState() *bool { return v.IncludeStartWorkflowState }

// GetIncludeTriageWorkflowState returns __listTeamInput.IncludeTriageWorkflowState, and is useful for accessing the field via an interface.
func (v *__listTeamInput) GetIncludeTriageWorkflowState() *bool { return v.IncludeTriageWorkflowState }

// __listTeamMembershipInput is used internally by genqlient
type __listTeamMembershipInput struct {
	First           int    `json:"first,omitempty"`
	After           string `json:"after,omitempty"`
	IncludeArchived bool   `json:"includeArchived,omitempty"`
	IncludeTeam     *bool  `json:"includeTeam,omitempty"`
	IncludeUser     *bool  `json:"includeUser,omitempty"`
}

// GetFirst returns __listTeamMembershipInput.First, and is useful for accessing the field via an interface.
func (v *__listTeamMembershipInput) GetFirst() int { return v.First }

// GetAfter returns __listTeamMembershipInput.After, and is useful for accessing the field via an interface.
func (v *__listTeamMembershipInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listTeamMembershipInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listTeamMembershipInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetIncludeTeam returns __listTeamMembershipInput.IncludeTeam, and is useful for accessing the field via an interface.
func (v *__listTeamMembershipInput) GetIncludeTeam() *bool { return v.IncludeTeam }

// GetIncludeUser returns __listTeamMembershipInput.IncludeUser, and is useful for accessing the field via an interface.
func (v *__listTeamMembershipInput) GetIncludeUser() *bool { return v.IncludeUser }

// __listUserInput is used internally by genqlient
type __listUserInput struct {
	First               int         `json:"first,omitempty"`
	After               string      `json:"after,omitempty"`
	IncludeArchived     bool        `json:"includeArchived,omitempty"`
	Filter              *UserFilter `json:"filter,omitempty"`
	IncludeOrganization *bool       `json:"includeOrganization,omitempty"`
}

// GetFirst returns __listUserInput.First, and is useful for accessing the field via an interface.
func (v *__listUserInput) GetFirst() int { return v.First }

// GetAfter returns __listUserInput.After, and is useful for accessing the field via an interface.
func (v *__listUserInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listUserInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listUserInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listUserInput.Filter, and is useful for accessing the field via an interface.
func (v *__listUserInput) GetFilter() *UserFilter { return v.Filter }

// GetIncludeOrganization returns __listUserInput.IncludeOrganization, and is useful for accessing the field via an interface.
func (v *__listUserInput) GetIncludeOrganization() *bool { return v.IncludeOrganization }

// __listWorkflowStateInput is used internally by genqlient
type __listWorkflowStateInput struct {
	First           int                  `json:"first,omitempty"`
	After           string               `json:"after,omitempty"`
	IncludeArchived bool                 `json:"includeArchived,omitempty"`
	Filter          *WorkflowStateFilter `json:"filter,omitempty"`
	IncludeTeam     *bool                `json:"includeTeam,omitempty"`
}

// GetFirst returns __listWorkflowStateInput.First, and is useful for accessing the field via an interface.
func (v *__listWorkflowStateInput) GetFirst() int { return v.First }

// GetAfter returns __listWorkflowStateInput.After, and is useful for accessing the field via an interface.
func (v *__listWorkflowStateInput) GetAfter() string { return v.After }

// GetIncludeArchived returns __listWorkflowStateInput.IncludeArchived, and is useful for accessing the field via an interface.
func (v *__listWorkflowStateInput) GetIncludeArchived() bool { return v.IncludeArchived }

// GetFilter returns __listWorkflowStateInput.Filter, and is useful for accessing the field via an interface.
func (v *__listWorkflowStateInput) GetFilter() *WorkflowStateFilter { return v.Filter }

// GetIncludeTeam returns __listWorkflowStateInput.IncludeTeam, and is useful for accessing the field via an interface.
func (v *__listWorkflowStateInput) GetIncludeTeam() *bool { return v.IncludeTeam }

// listAttachmentAttachmentsAttachmentConnection includes the requested fields of the GraphQL type AttachmentConnection.
type listAttachmentAttachmentsAttachmentConnection struct {
	PageInfo *listAttachmentAttachmentsAttachmentConnectionPageInfo          `json:"pageInfo"`
	Nodes    []*listAttachmentAttachmentsAttachmentConnectionNodesAttachment `json:"nodes"`
}

// GetPageInfo returns listAttachmentAttachmentsAttachmentConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnection) GetPageInfo() *listAttachmentAttachmentsAttachmentConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listAttachmentAttachmentsAttachmentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnection) GetNodes() []*listAttachmentAttachmentsAttachmentConnectionNodesAttachment {
	return v.Nodes
}

// listAttachmentAttachmentsAttachmentConnectionNodesAttachment includes the requested fields of the GraphQL type Attachment.
// The GraphQL type's documentation follows.
//
// Issue attachment (e.g. support ticket, pull request).
type listAttachmentAttachmentsAttachmentConnectionNodesAttachment struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Indicates if attachments for the same source application should be grouped in the Linear UI.
	GroupBySource *bool `json:"groupBySource"`
	// Custom metadata related to the attachment.
	Metadata *string `json:"metadata"`
	// Information about the source which created the attachment.
	Source *string `json:"source"`
	// An accessor helper to source.type, defines the source type of the attachment.
	SourceType *string `json:"sourceType"`
	// Content for the subtitle line in the Linear attachment widget.
	Subtitle *string `json:"subtitle"`
	// Content for the title line in the Linear attachment widget.
	Title *string `json:"title"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Location of the attachment which is also used as an identifier.
	Url *string `json:"url"`
	// The creator of the attachment.
	Creator *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser `json:"creator"`
	// The issue this attachment belongs to.
	Issue *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue `json:"issue"`
}

// GetId returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.Id, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetId() *string { return v.Id }

// GetArchivedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetGroupBySource returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.GroupBySource, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetGroupBySource() *bool {
	return v.GroupBySource
}

// GetMetadata returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.Metadata, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetMetadata() *string {
	return v.Metadata
}

// GetSource returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.Source, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetSource() *string {
	return v.Source
}

// GetSourceType returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.SourceType, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetSourceType() *string {
	return v.SourceType
}

// GetSubtitle returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.Subtitle, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetSubtitle() *string {
	return v.Subtitle
}

// GetTitle returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.Title, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetTitle() *string {
	return v.Title
}

// GetUpdatedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.Url, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetUrl() *string { return v.Url }

// GetCreator returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.Creator, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetCreator() *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser {
	return v.Creator
}

// GetIssue returns listAttachmentAttachmentsAttachmentConnectionNodesAttachment.Issue, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachment) GetIssue() *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue {
	return v.Issue
}

// listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetId() *string {
	return v.Id
}

// GetActive returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Active, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetActive() *bool {
	return v.Active
}

// GetAdmin returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Admin, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetAdmin() *bool {
	return v.Admin
}

// GetArchivedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Description, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Email, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetEmail() *string {
	return v.Email
}

// GetGuest returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Guest, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetGuest() *bool {
	return v.Guest
}

// GetInviteHash returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.IsMe, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetIsMe() *bool {
	return v.IsMe
}

// GetLastSeen returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Name, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetName() *string {
	return v.Name
}

// GetStatusEmoji returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Timezone, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser.Url, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentCreatorUser) GetUrl() *string {
	return v.Url
}

// listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number *float64 `json:"number"`
	// The issue's title.
	Title *string `json:"title"`
	// The issue's description in markdown format.
	Description *string `json:"description"`
	// The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
	Priority *float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate *float64 `json:"estimate"`
	// The order of the item in relation to other items in the organization.
	SortOrder *float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt *time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt *time.Time `json:"completedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt *time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt *time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate *time.Time `json:"dueDate"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed *bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt *time.Time `json:"snoozedUntilAt"`
	// Previous identifiers of the issue if it has been moved between teams.
	PreviousIdentifiers []*string `json:"previousIdentifiers"`
	// The order of the item in the sub-issue list. Only set if the issue has a parent.
	SubIssueSortOrder *float64 `json:"subIssueSortOrder"`
	// Label for the priority.
	PriorityLabel *string `json:"priorityLabel"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier *string `json:"identifier"`
	// Issue URL.
	Url *string `json:"url"`
	// Suggested branch name for the issue.
	BranchName *string `json:"branchName"`
	// Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
	CustomerTicketCount *int `json:"customerTicketCount"`
}

// GetId returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Id, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetId() *string {
	return v.Id
}

// GetCreatedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetArchivedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetNumber returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Number, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetNumber() *float64 {
	return v.Number
}

// GetTitle returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Title, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetTitle() *string {
	return v.Title
}

// GetDescription returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Description, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetDescription() *string {
	return v.Description
}

// GetPriority returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Priority, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetPriority() *float64 {
	return v.Priority
}

// GetEstimate returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Estimate, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetEstimate() *float64 {
	return v.Estimate
}

// GetSortOrder returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetSortOrder() *float64 {
	return v.SortOrder
}

// GetStartedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetStartedAt() *time.Time {
	return v.StartedAt
}

// GetCompletedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetCompletedAt() *time.Time {
	return v.CompletedAt
}

// GetCanceledAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetCanceledAt() *time.Time {
	return v.CanceledAt
}

// GetAutoClosedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetAutoClosedAt() *time.Time {
	return v.AutoClosedAt
}

// GetAutoArchivedAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetDueDate returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.DueDate, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetDueDate() *time.Time {
	return v.DueDate
}

// GetTrashed returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Trashed, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetTrashed() *bool {
	return v.Trashed
}

// GetSnoozedUntilAt returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetSnoozedUntilAt() *time.Time {
	return v.SnoozedUntilAt
}

// GetPreviousIdentifiers returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.PreviousIdentifiers, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetPreviousIdentifiers() []*string {
	return v.PreviousIdentifiers
}

// GetSubIssueSortOrder returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.SubIssueSortOrder, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetSubIssueSortOrder() *float64 {
	return v.SubIssueSortOrder
}

// GetPriorityLabel returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.PriorityLabel, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetPriorityLabel() *string {
	return v.PriorityLabel
}

// GetIdentifier returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Identifier, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetIdentifier() *string {
	return v.Identifier
}

// GetUrl returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.Url, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetUrl() *string {
	return v.Url
}

// GetBranchName returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.BranchName, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetBranchName() *string {
	return v.BranchName
}

// GetCustomerTicketCount returns listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue.CustomerTicketCount, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionNodesAttachmentIssue) GetCustomerTicketCount() *int {
	return v.CustomerTicketCount
}

// listAttachmentAttachmentsAttachmentConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listAttachmentAttachmentsAttachmentConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listAttachmentAttachmentsAttachmentConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionPageInfo) GetHasNextPage() *bool {
	return v.HasNextPage
}

// GetEndCursor returns listAttachmentAttachmentsAttachmentConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listAttachmentAttachmentsAttachmentConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// listAttachmentResponse is returned by listAttachment on success.
type listAttachmentResponse struct {
	// All issue attachments.
	//
	// To get attachments for a given URL, use `attachmentsForURL` query.
	Attachments *listAttachmentAttachmentsAttachmentConnection `json:"attachments"`
}

// GetAttachments returns listAttachmentResponse.Attachments, and is useful for accessing the field via an interface.
func (v *listAttachmentResponse) GetAttachments() *listAttachmentAttachmentsAttachmentConnection {
	return v.Attachments
}

// listCommentCommentsCommentConnection includes the requested fields of the GraphQL type CommentConnection.
type listCommentCommentsCommentConnection struct {
	PageInfo *listCommentCommentsCommentConnectionPageInfo       `json:"pageInfo"`
	Nodes    []*listCommentCommentsCommentConnectionNodesComment `json:"nodes"`
}

// GetPageInfo returns listCommentCommentsCommentConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnection) GetPageInfo() *listCommentCommentsCommentConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listCommentCommentsCommentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnection) GetNodes() []*listCommentCommentsCommentConnectionNodesComment {
	return v.Nodes
}

// listCommentCommentsCommentConnectionNodesComment includes the requested fields of the GraphQL type Comment.
// The GraphQL type's documentation follows.
//
// A comment associated with an issue.
type listCommentCommentsCommentConnectionNodesComment struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The comment content in markdown format.
	Body *string `json:"body"`
	// The comment content as a Prosemirror document.
	BodyData *string `json:"bodyData"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The time user edited the comment.
	EditedAt *time.Time `json:"editedAt"`
	// Emoji reaction summary, grouped by emoji type
	ReactionData *string `json:"reactionData"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Comment's URL.
	Url *string `json:"url"`
	// The user who wrote the comment.
	User *listCommentCommentsCommentConnectionNodesCommentUser `json:"user"`
	// The parent comment under which the current comment is nested.
	Parent *listCommentCommentsCommentConnectionNodesCommentParentComment `json:"parent"`
	// The issue that the comment is associated with.
	Issue *listCommentCommentsCommentConnectionNodesCommentIssue `json:"issue"`
}

// GetId returns listCommentCommentsCommentConnectionNodesComment.Id, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetId() *string { return v.Id }

// GetArchivedAt returns listCommentCommentsCommentConnectionNodesComment.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetBody returns listCommentCommentsCommentConnectionNodesComment.Body, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetBody() *string { return v.Body }

// GetBodyData returns listCommentCommentsCommentConnectionNodesComment.BodyData, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetBodyData() *string { return v.BodyData }

// GetCreatedAt returns listCommentCommentsCommentConnectionNodesComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetEditedAt returns listCommentCommentsCommentConnectionNodesComment.EditedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetEditedAt() *time.Time {
	return v.EditedAt
}

// GetReactionData returns listCommentCommentsCommentConnectionNodesComment.ReactionData, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetReactionData() *string {
	return v.ReactionData
}

// GetUpdatedAt returns listCommentCommentsCommentConnectionNodesComment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listCommentCommentsCommentConnectionNodesComment.Url, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetUrl() *string { return v.Url }

// GetUser returns listCommentCommentsCommentConnectionNodesComment.User, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetUser() *listCommentCommentsCommentConnectionNodesCommentUser {
	return v.User
}

// GetParent returns listCommentCommentsCommentConnectionNodesComment.Parent, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetParent() *listCommentCommentsCommentConnectionNodesCommentParentComment {
	return v.Parent
}

// GetIssue returns listCommentCommentsCommentConnectionNodesComment.Issue, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesComment) GetIssue() *listCommentCommentsCommentConnectionNodesCommentIssue {
	return v.Issue
}

// listCommentCommentsCommentConnectionNodesCommentIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listCommentCommentsCommentConnectionNodesCommentIssue struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number *float64 `json:"number"`
	// The issue's title.
	Title *string `json:"title"`
	// The issue's description in markdown format.
	Description *string `json:"description"`
	// The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
	Priority *float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate *float64 `json:"estimate"`
	// The order of the item in relation to other items in the organization.
	SortOrder *float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt *time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt *time.Time `json:"completedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt *time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt *time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate *time.Time `json:"dueDate"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed *bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt *time.Time `json:"snoozedUntilAt"`
	// Previous identifiers of the issue if it has been moved between teams.
	PreviousIdentifiers []*string `json:"previousIdentifiers"`
	// The order of the item in the sub-issue list. Only set if the issue has a parent.
	SubIssueSortOrder *float64 `json:"subIssueSortOrder"`
	// Label for the priority.
	PriorityLabel *string `json:"priorityLabel"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier *string `json:"identifier"`
	// Issue URL.
	Url *string `json:"url"`
	// Suggested branch name for the issue.
	BranchName *string `json:"branchName"`
	// Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
	CustomerTicketCount *int `json:"customerTicketCount"`
}

// GetId returns listCommentCommentsCommentConnectionNodesCommentIssue.Id, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetId() *string { return v.Id }

// GetCreatedAt returns listCommentCommentsCommentConnectionNodesCommentIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns listCommentCommentsCommentConnectionNodesCommentIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetArchivedAt returns listCommentCommentsCommentConnectionNodesCommentIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetNumber returns listCommentCommentsCommentConnectionNodesCommentIssue.Number, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetNumber() *float64 { return v.Number }

// GetTitle returns listCommentCommentsCommentConnectionNodesCommentIssue.Title, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetTitle() *string { return v.Title }

// GetDescription returns listCommentCommentsCommentConnectionNodesCommentIssue.Description, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetDescription() *string {
	return v.Description
}

// GetPriority returns listCommentCommentsCommentConnectionNodesCommentIssue.Priority, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetPriority() *float64 {
	return v.Priority
}

// GetEstimate returns listCommentCommentsCommentConnectionNodesCommentIssue.Estimate, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetEstimate() *float64 {
	return v.Estimate
}

// GetSortOrder returns listCommentCommentsCommentConnectionNodesCommentIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetSortOrder() *float64 {
	return v.SortOrder
}

// GetStartedAt returns listCommentCommentsCommentConnectionNodesCommentIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetStartedAt() *time.Time {
	return v.StartedAt
}

// GetCompletedAt returns listCommentCommentsCommentConnectionNodesCommentIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetCompletedAt() *time.Time {
	return v.CompletedAt
}

// GetCanceledAt returns listCommentCommentsCommentConnectionNodesCommentIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetCanceledAt() *time.Time {
	return v.CanceledAt
}

// GetAutoClosedAt returns listCommentCommentsCommentConnectionNodesCommentIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetAutoClosedAt() *time.Time {
	return v.AutoClosedAt
}

// GetAutoArchivedAt returns listCommentCommentsCommentConnectionNodesCommentIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetDueDate returns listCommentCommentsCommentConnectionNodesCommentIssue.DueDate, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetDueDate() *time.Time {
	return v.DueDate
}

// GetTrashed returns listCommentCommentsCommentConnectionNodesCommentIssue.Trashed, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetTrashed() *bool { return v.Trashed }

// GetSnoozedUntilAt returns listCommentCommentsCommentConnectionNodesCommentIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetSnoozedUntilAt() *time.Time {
	return v.SnoozedUntilAt
}

// GetPreviousIdentifiers returns listCommentCommentsCommentConnectionNodesCommentIssue.PreviousIdentifiers, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetPreviousIdentifiers() []*string {
	return v.PreviousIdentifiers
}

// GetSubIssueSortOrder returns listCommentCommentsCommentConnectionNodesCommentIssue.SubIssueSortOrder, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetSubIssueSortOrder() *float64 {
	return v.SubIssueSortOrder
}

// GetPriorityLabel returns listCommentCommentsCommentConnectionNodesCommentIssue.PriorityLabel, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetPriorityLabel() *string {
	return v.PriorityLabel
}

// GetIdentifier returns listCommentCommentsCommentConnectionNodesCommentIssue.Identifier, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetIdentifier() *string {
	return v.Identifier
}

// GetUrl returns listCommentCommentsCommentConnectionNodesCommentIssue.Url, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetUrl() *string { return v.Url }

// GetBranchName returns listCommentCommentsCommentConnectionNodesCommentIssue.BranchName, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetBranchName() *string {
	return v.BranchName
}

// GetCustomerTicketCount returns listCommentCommentsCommentConnectionNodesCommentIssue.CustomerTicketCount, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentIssue) GetCustomerTicketCount() *int {
	return v.CustomerTicketCount
}

// listCommentCommentsCommentConnectionNodesCommentParentComment includes the requested fields of the GraphQL type Comment.
// The GraphQL type's documentation follows.
//
// A comment associated with an issue.
type listCommentCommentsCommentConnectionNodesCommentParentComment struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The comment content in markdown format.
	Body *string `json:"body"`
	// The comment content as a Prosemirror document.
	BodyData *string `json:"bodyData"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The time user edited the comment.
	EditedAt *time.Time `json:"editedAt"`
	// Emoji reaction summary, grouped by emoji type
	ReactionData *string `json:"reactionData"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Comment's URL.
	Url *string `json:"url"`
}

// GetId returns listCommentCommentsCommentConnectionNodesCommentParentComment.Id, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetId() *string { return v.Id }

// GetArchivedAt returns listCommentCommentsCommentConnectionNodesCommentParentComment.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetBody returns listCommentCommentsCommentConnectionNodesCommentParentComment.Body, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetBody() *string {
	return v.Body
}

// GetBodyData returns listCommentCommentsCommentConnectionNodesCommentParentComment.BodyData, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetBodyData() *string {
	return v.BodyData
}

// GetCreatedAt returns listCommentCommentsCommentConnectionNodesCommentParentComment.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetEditedAt returns listCommentCommentsCommentConnectionNodesCommentParentComment.EditedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetEditedAt() *time.Time {
	return v.EditedAt
}

// GetReactionData returns listCommentCommentsCommentConnectionNodesCommentParentComment.ReactionData, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetReactionData() *string {
	return v.ReactionData
}

// GetUpdatedAt returns listCommentCommentsCommentConnectionNodesCommentParentComment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listCommentCommentsCommentConnectionNodesCommentParentComment.Url, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentParentComment) GetUrl() *string {
	return v.Url
}

// listCommentCommentsCommentConnectionNodesCommentUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listCommentCommentsCommentConnectionNodesCommentUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listCommentCommentsCommentConnectionNodesCommentUser.Id, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetId() *string { return v.Id }

// GetActive returns listCommentCommentsCommentConnectionNodesCommentUser.Active, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetActive() *bool { return v.Active }

// GetAdmin returns listCommentCommentsCommentConnectionNodesCommentUser.Admin, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetAdmin() *bool { return v.Admin }

// GetArchivedAt returns listCommentCommentsCommentConnectionNodesCommentUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listCommentCommentsCommentConnectionNodesCommentUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listCommentCommentsCommentConnectionNodesCommentUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listCommentCommentsCommentConnectionNodesCommentUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listCommentCommentsCommentConnectionNodesCommentUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listCommentCommentsCommentConnectionNodesCommentUser.Description, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listCommentCommentsCommentConnectionNodesCommentUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listCommentCommentsCommentConnectionNodesCommentUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listCommentCommentsCommentConnectionNodesCommentUser.Email, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetEmail() *string { return v.Email }

// GetGuest returns listCommentCommentsCommentConnectionNodesCommentUser.Guest, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetGuest() *bool { return v.Guest }

// GetInviteHash returns listCommentCommentsCommentConnectionNodesCommentUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listCommentCommentsCommentConnectionNodesCommentUser.IsMe, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetIsMe() *bool { return v.IsMe }

// GetLastSeen returns listCommentCommentsCommentConnectionNodesCommentUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listCommentCommentsCommentConnectionNodesCommentUser.Name, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetName() *string { return v.Name }

// GetStatusEmoji returns listCommentCommentsCommentConnectionNodesCommentUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listCommentCommentsCommentConnectionNodesCommentUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listCommentCommentsCommentConnectionNodesCommentUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listCommentCommentsCommentConnectionNodesCommentUser.Timezone, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listCommentCommentsCommentConnectionNodesCommentUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listCommentCommentsCommentConnectionNodesCommentUser.Url, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionNodesCommentUser) GetUrl() *string { return v.Url }

// listCommentCommentsCommentConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listCommentCommentsCommentConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listCommentCommentsCommentConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionPageInfo) GetHasNextPage() *bool { return v.HasNextPage }

// GetEndCursor returns listCommentCommentsCommentConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listCommentCommentsCommentConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// listCommentResponse is returned by listComment on success.
type listCommentResponse struct {
	// All comments.
	Comments *listCommentCommentsCommentConnection `json:"comments"`
}

// GetComments returns listCommentResponse.Comments, and is useful for accessing the field via an interface.
func (v *listCommentResponse) GetComments() *listCommentCommentsCommentConnection { return v.Comments }

// listCycleCyclesCycleConnection includes the requested fields of the GraphQL type CycleConnection.
type listCycleCyclesCycleConnection struct {
	PageInfo *listCycleCyclesCycleConnectionPageInfo     `json:"pageInfo"`
	Nodes    []*listCycleCyclesCycleConnectionNodesCycle `json:"nodes"`
}

// GetPageInfo returns listCycleCyclesCycleConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnection) GetPageInfo() *listCycleCyclesCycleConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listCycleCyclesCycleConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnection) GetNodes() []*listCycleCyclesCycleConnectionNodesCycle {
	return v.Nodes
}

// listCycleCyclesCycleConnectionNodesCycle includes the requested fields of the GraphQL type Cycle.
// The GraphQL type's documentation follows.
//
// A set of issues to be resolved in a specified amount of time.
type listCycleCyclesCycleConnectionNodesCycle struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the cycle was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The completion time of the cycle. If null, the cycle hasn't been completed.
	CompletedAt *time.Time `json:"completedAt"`
	// The number of completed issues in the cycle after each day.
	CompletedIssueCountHistory []*float64 `json:"completedIssueCountHistory"`
	// The number of completed estimation points after each day.
	CompletedScopeHistory []*float64 `json:"completedScopeHistory"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The cycle's description.
	Description *string `json:"description"`
	// The end time of the cycle.
	EndsAt *time.Time `json:"endsAt"`
	// The number of in progress estimation points after each day.
	InProgressScopeHistory []*float64 `json:"inProgressScopeHistory"`
	// The total number of issues in the cycle after each day.
	IssueCountHistory []*float64 `json:"issueCountHistory"`
	// The custom name of the cycle.
	Name *string `json:"name"`
	// The number of the cycle.
	Number *float64 `json:"number"`
	// The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
	Progress *float64 `json:"progress"`
	// The total number of estimation points after each day.
	ScopeHistory []*float64 `json:"scopeHistory"`
	// The start time of the cycle.
	StartsAt *time.Time `json:"startsAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The team that the cycle is associated with.
	Team *listCycleCyclesCycleConnectionNodesCycleTeam `json:"team"`
}

// GetId returns listCycleCyclesCycleConnectionNodesCycle.Id, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetId() *string { return v.Id }

// GetArchivedAt returns listCycleCyclesCycleConnectionNodesCycle.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetArchivedAt() *time.Time { return v.ArchivedAt }

// GetAutoArchivedAt returns listCycleCyclesCycleConnectionNodesCycle.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetCompletedAt returns listCycleCyclesCycleConnectionNodesCycle.CompletedAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetCompletedAt() *time.Time { return v.CompletedAt }

// GetCompletedIssueCountHistory returns listCycleCyclesCycleConnectionNodesCycle.CompletedIssueCountHistory, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetCompletedIssueCountHistory() []*float64 {
	return v.CompletedIssueCountHistory
}

// GetCompletedScopeHistory returns listCycleCyclesCycleConnectionNodesCycle.CompletedScopeHistory, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetCompletedScopeHistory() []*float64 {
	return v.CompletedScopeHistory
}

// GetCreatedAt returns listCycleCyclesCycleConnectionNodesCycle.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetDescription returns listCycleCyclesCycleConnectionNodesCycle.Description, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetDescription() *string { return v.Description }

// GetEndsAt returns listCycleCyclesCycleConnectionNodesCycle.EndsAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetEndsAt() *time.Time { return v.EndsAt }

// GetInProgressScopeHistory returns listCycleCyclesCycleConnectionNodesCycle.InProgressScopeHistory, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetInProgressScopeHistory() []*float64 {
	return v.InProgressScopeHistory
}

// GetIssueCountHistory returns listCycleCyclesCycleConnectionNodesCycle.IssueCountHistory, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetIssueCountHistory() []*float64 {
	return v.IssueCountHistory
}

// GetName returns listCycleCyclesCycleConnectionNodesCycle.Name, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetName() *string { return v.Name }

// GetNumber returns listCycleCyclesCycleConnectionNodesCycle.Number, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetNumber() *float64 { return v.Number }

// GetProgress returns listCycleCyclesCycleConnectionNodesCycle.Progress, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetProgress() *float64 { return v.Progress }

// GetScopeHistory returns listCycleCyclesCycleConnectionNodesCycle.ScopeHistory, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetScopeHistory() []*float64 {
	return v.ScopeHistory
}

// GetStartsAt returns listCycleCyclesCycleConnectionNodesCycle.StartsAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetStartsAt() *time.Time { return v.StartsAt }

// GetUpdatedAt returns listCycleCyclesCycleConnectionNodesCycle.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetTeam returns listCycleCyclesCycleConnectionNodesCycle.Team, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycle) GetTeam() *listCycleCyclesCycleConnectionNodesCycleTeam {
	return v.Team
}

// listCycleCyclesCycleConnectionNodesCycleTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listCycleCyclesCycleConnectionNodesCycleTeam struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod *float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
	AutoCloseStateId *string `json:"autoCloseStateId"`
	// The team's color.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Calendar feed URL (iCal) for cycles.
	CycleCalenderUrl *string `json:"cycleCalenderUrl"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime *float64 `json:"cycleCooldownTime"`
	// The duration of a cycle in weeks.
	CycleDuration *float64 `json:"cycleDuration"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted *bool `json:"cycleIssueAutoAssignCompleted"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted *bool `json:"cycleIssueAutoAssignStarted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive *bool `json:"cycleLockToActive"`
	// The day of the week that a new cycle starts.
	CycleStartDay *float64 `json:"cycleStartDay"`
	// Whether the team uses cycles.
	CyclesEnabled *bool `json:"cyclesEnabled"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate *float64 `json:"defaultIssueEstimate"`
	// The id of the default template to use for new issues created by members of the team.
	DefaultTemplateForMembersId *string `json:"defaultTemplateForMembersId"`
	// The id of the default template to use for new issues created by non-members of the team.
	DefaultTemplateForNonMembersId *string `json:"defaultTemplateForNonMembersId"`
	// The team's description.
	Description *string `json:"description"`
	// Whether to group recent issue history entries.
	GroupIssueHistory *bool `json:"groupIssueHistory"`
	// The icon of the team.
	Icon *string `json:"icon"`
	// Unique hash for the team to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero *bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended *bool `json:"issueEstimationExtended"`
	// The issue estimation type to use.
	IssueEstimationType *string `json:"issueEstimationType"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst *bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom *bool `json:"issueSortOrderDefaultToBottom"`
	// The team's unique key. The key is used in URLs.
	Key *string `json:"key"`
	// The team's name.
	Name *string `json:"name"`
	// Whether the team is private or not.
	Private *bool `json:"private"`
	// Whether an issue needs to have a priority set before leaving triage
	RequirePriorityToLeaveTriage *bool `json:"requirePriorityToLeaveTriage"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone *string `json:"timezone"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled *bool `json:"triageEnabled"`
	// How many upcoming cycles to create.
	UpcomingCycleCount *float64 `json:"upcomingCycleCount"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listCycleCyclesCycleConnectionNodesCycleTeam.Id, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetId() *string { return v.Id }

// GetArchivedAt returns listCycleCyclesCycleConnectionNodesCycleTeam.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivePeriod returns listCycleCyclesCycleConnectionNodesCycleTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetAutoArchivePeriod() *float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns listCycleCyclesCycleConnectionNodesCycleTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetAutoClosePeriod() *float64 {
	return v.AutoClosePeriod
}

// GetAutoCloseStateId returns listCycleCyclesCycleConnectionNodesCycleTeam.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetAutoCloseStateId() *string {
	return v.AutoCloseStateId
}

// GetColor returns listCycleCyclesCycleConnectionNodesCycleTeam.Color, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetColor() *string { return v.Color }

// GetCreatedAt returns listCycleCyclesCycleConnectionNodesCycleTeam.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetCycleCalenderUrl returns listCycleCyclesCycleConnectionNodesCycleTeam.CycleCalenderUrl, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCycleCalenderUrl() *string {
	return v.CycleCalenderUrl
}

// GetCycleCooldownTime returns listCycleCyclesCycleConnectionNodesCycleTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCycleCooldownTime() *float64 {
	return v.CycleCooldownTime
}

// GetCycleDuration returns listCycleCyclesCycleConnectionNodesCycleTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCycleDuration() *float64 {
	return v.CycleDuration
}

// GetCycleIssueAutoAssignCompleted returns listCycleCyclesCycleConnectionNodesCycleTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCycleIssueAutoAssignCompleted() *bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleIssueAutoAssignStarted returns listCycleCyclesCycleConnectionNodesCycleTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCycleIssueAutoAssignStarted() *bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleLockToActive returns listCycleCyclesCycleConnectionNodesCycleTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCycleLockToActive() *bool {
	return v.CycleLockToActive
}

// GetCycleStartDay returns listCycleCyclesCycleConnectionNodesCycleTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCycleStartDay() *float64 {
	return v.CycleStartDay
}

// GetCyclesEnabled returns listCycleCyclesCycleConnectionNodesCycleTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetCyclesEnabled() *bool {
	return v.CyclesEnabled
}

// GetDefaultIssueEstimate returns listCycleCyclesCycleConnectionNodesCycleTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetDefaultIssueEstimate() *float64 {
	return v.DefaultIssueEstimate
}

// GetDefaultTemplateForMembersId returns listCycleCyclesCycleConnectionNodesCycleTeam.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetDefaultTemplateForMembersId() *string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns listCycleCyclesCycleConnectionNodesCycleTeam.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetDefaultTemplateForNonMembersId() *string {
	return v.DefaultTemplateForNonMembersId
}

// GetDescription returns listCycleCyclesCycleConnectionNodesCycleTeam.Description, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetDescription() *string { return v.Description }

// GetGroupIssueHistory returns listCycleCyclesCycleConnectionNodesCycleTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetGroupIssueHistory() *bool {
	return v.GroupIssueHistory
}

// GetIcon returns listCycleCyclesCycleConnectionNodesCycleTeam.Icon, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetIcon() *string { return v.Icon }

// GetInviteHash returns listCycleCyclesCycleConnectionNodesCycleTeam.InviteHash, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetInviteHash() *string { return v.InviteHash }

// GetIssueEstimationAllowZero returns listCycleCyclesCycleConnectionNodesCycleTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetIssueEstimationAllowZero() *bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns listCycleCyclesCycleConnectionNodesCycleTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetIssueEstimationExtended() *bool {
	return v.IssueEstimationExtended
}

// GetIssueEstimationType returns listCycleCyclesCycleConnectionNodesCycleTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetIssueEstimationType() *string {
	return v.IssueEstimationType
}

// GetIssueOrderingNoPriorityFirst returns listCycleCyclesCycleConnectionNodesCycleTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetIssueOrderingNoPriorityFirst() *bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueSortOrderDefaultToBottom returns listCycleCyclesCycleConnectionNodesCycleTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetIssueSortOrderDefaultToBottom() *bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetKey returns listCycleCyclesCycleConnectionNodesCycleTeam.Key, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetKey() *string { return v.Key }

// GetName returns listCycleCyclesCycleConnectionNodesCycleTeam.Name, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetName() *string { return v.Name }

// GetPrivate returns listCycleCyclesCycleConnectionNodesCycleTeam.Private, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetPrivate() *bool { return v.Private }

// GetRequirePriorityToLeaveTriage returns listCycleCyclesCycleConnectionNodesCycleTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetRequirePriorityToLeaveTriage() *bool {
	return v.RequirePriorityToLeaveTriage
}

// GetSlackIssueComments returns listCycleCyclesCycleConnectionNodesCycleTeam.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listCycleCyclesCycleConnectionNodesCycleTeam.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listCycleCyclesCycleConnectionNodesCycleTeam.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetSlackNewIssue() *bool {
	return v.SlackNewIssue
}

// GetTimezone returns listCycleCyclesCycleConnectionNodesCycleTeam.Timezone, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetTimezone() *string { return v.Timezone }

// GetTriageEnabled returns listCycleCyclesCycleConnectionNodesCycleTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetTriageEnabled() *bool {
	return v.TriageEnabled
}

// GetUpcomingCycleCount returns listCycleCyclesCycleConnectionNodesCycleTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetUpcomingCycleCount() *float64 {
	return v.UpcomingCycleCount
}

// GetUpdatedAt returns listCycleCyclesCycleConnectionNodesCycleTeam.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionNodesCycleTeam) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// listCycleCyclesCycleConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listCycleCyclesCycleConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listCycleCyclesCycleConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionPageInfo) GetHasNextPage() *bool { return v.HasNextPage }

// GetEndCursor returns listCycleCyclesCycleConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listCycleCyclesCycleConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// listCycleResponse is returned by listCycle on success.
type listCycleResponse struct {
	// All cycles.
	Cycles *listCycleCyclesCycleConnection `json:"cycles"`
}

// GetCycles returns listCycleResponse.Cycles, and is useful for accessing the field via an interface.
func (v *listCycleResponse) GetCycles() *listCycleCyclesCycleConnection { return v.Cycles }

// listIntegrationIntegrationsIntegrationConnection includes the requested fields of the GraphQL type IntegrationConnection.
type listIntegrationIntegrationsIntegrationConnection struct {
	PageInfo *listIntegrationIntegrationsIntegrationConnectionPageInfo           `json:"pageInfo"`
	Nodes    []*listIntegrationIntegrationsIntegrationConnectionNodesIntegration `json:"nodes"`
}

// GetPageInfo returns listIntegrationIntegrationsIntegrationConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnection) GetPageInfo() *listIntegrationIntegrationsIntegrationConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listIntegrationIntegrationsIntegrationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnection) GetNodes() []*listIntegrationIntegrationsIntegrationConnectionNodesIntegration {
	return v.Nodes
}

// listIntegrationIntegrationsIntegrationConnectionNodesIntegration includes the requested fields of the GraphQL type Integration.
// The GraphQL type's documentation follows.
//
// An integration with an external service.
type listIntegrationIntegrationsIntegrationConnectionNodesIntegration struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The integration's type.
	Service *string `json:"service"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The team that the integration is associated with.
	Team *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam `json:"team"`
	// The user that added the integration.
	Creator *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser `json:"creator"`
	// The organization that the integration is associated with.
	Organization *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization `json:"organization"`
}

// GetId returns listIntegrationIntegrationsIntegrationConnectionNodesIntegration.Id, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegration) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegration.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegration) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegration) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetService returns listIntegrationIntegrationsIntegrationConnectionNodesIntegration.Service, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegration) GetService() *string {
	return v.Service
}

// GetUpdatedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegration) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetTeam returns listIntegrationIntegrationsIntegrationConnectionNodesIntegration.Team, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegration) GetTeam() *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam {
	return v.Team
}

// GetCreator returns listIntegrationIntegrationsIntegrationConnectionNodesIntegration.Creator, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegration) GetCreator() *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser {
	return v.Creator
}

// GetOrganization returns listIntegrationIntegrationsIntegrationConnectionNodesIntegration.Organization, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegration) GetOrganization() *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization {
	return v.Organization
}

// listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetId() *string {
	return v.Id
}

// GetActive returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Active, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetActive() *bool {
	return v.Active
}

// GetAdmin returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Admin, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetAdmin() *bool {
	return v.Admin
}

// GetArchivedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Description, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Email, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetEmail() *string {
	return v.Email
}

// GetGuest returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Guest, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetGuest() *bool {
	return v.Guest
}

// GetInviteHash returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.IsMe, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetIsMe() *bool {
	return v.IsMe
}

// GetLastSeen returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Name, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetName() *string {
	return v.Name
}

// GetStatusEmoji returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Timezone, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser.Url, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationCreatorUser) GetUrl() *string {
	return v.Url
}

// listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Allowed authentication providers, empty array means all are allowed
	AllowedAuthServices []*string `json:"allowedAuthServices"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues in the organization.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// The time at which deletion of the organization was requested.
	DeletionRequestedAt *time.Time `json:"deletionRequestedAt"`
	// How git branches are formatted. If null, default formatting will be used.
	GitBranchFormat *string `json:"gitBranchFormat"`
	// Whether the Git integration linkback messages should be sent to private repositories.
	GitLinkbackMessagesEnabled *bool `json:"gitLinkbackMessagesEnabled"`
	// Whether the Git integration linkback messages should be sent to public repositories.
	GitPublicLinkbackMessagesEnabled *bool `json:"gitPublicLinkbackMessagesEnabled"`
	// The organization's logo URL.
	LogoUrl *string `json:"logoUrl"`
	// The organization's name.
	Name *string `json:"name"`
	// Rolling 30-day total upload volume for the organization, in megabytes.
	PeriodUploadVolume *float64 `json:"periodUploadVolume"`
	// Previously used URL keys for the organization (last 3 are kept and redirected).
	PreviousUrlKeys []*string `json:"previousUrlKeys"`
	// The day at which to prompt for project updates.
	ProjectUpdateRemindersDay *Day `json:"projectUpdateRemindersDay"`
	// The hour at which to prompt for project updates.
	ProjectUpdateRemindersHour *float64 `json:"projectUpdateRemindersHour"`
	// The frequency at which to prompt for project updates.
	ProjectUpdatesReminderFrequency *ProjectUpdateReminderFrequency `json:"projectUpdatesReminderFrequency"`
	// The feature release channel the organization belongs to.
	ReleaseChannel *ReleaseChannel `json:"releaseChannel"`
	// Whether the organization is using a roadmap.
	RoadmapEnabled *bool `json:"roadmapEnabled"`
	// Whether SAML authentication is enabled for organization.
	SamlEnabled *bool `json:"samlEnabled"`
	// Whether SCIM provisioning is enabled for organization.
	ScimEnabled *bool `json:"scimEnabled"`
	// The time at which the trial of the plus plan will end.
	TrialEndsAt *time.Time `json:"trialEndsAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The organization's unique URL key.
	UrlKey *string `json:"urlKey"`
	// Number of active users in the organization.
	UserCount *int `json:"userCount"`
}

// GetId returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.Id, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetId() *string {
	return v.Id
}

// GetAllowedAuthServices returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.AllowedAuthServices, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetAllowedAuthServices() []*string {
	return v.AllowedAuthServices
}

// GetArchivedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDeletionRequestedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.DeletionRequestedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetDeletionRequestedAt() *time.Time {
	return v.DeletionRequestedAt
}

// GetGitBranchFormat returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.GitBranchFormat, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetGitBranchFormat() *string {
	return v.GitBranchFormat
}

// GetGitLinkbackMessagesEnabled returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetGitLinkbackMessagesEnabled() *bool {
	return v.GitLinkbackMessagesEnabled
}

// GetGitPublicLinkbackMessagesEnabled returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetGitPublicLinkbackMessagesEnabled() *bool {
	return v.GitPublicLinkbackMessagesEnabled
}

// GetLogoUrl returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.LogoUrl, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetLogoUrl() *string {
	return v.LogoUrl
}

// GetName returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.Name, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetName() *string {
	return v.Name
}

// GetPeriodUploadVolume returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.PeriodUploadVolume, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetPeriodUploadVolume() *float64 {
	return v.PeriodUploadVolume
}

// GetPreviousUrlKeys returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.PreviousUrlKeys, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetPreviousUrlKeys() []*string {
	return v.PreviousUrlKeys
}

// GetProjectUpdateRemindersDay returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.ProjectUpdateRemindersDay, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetProjectUpdateRemindersDay() *Day {
	return v.ProjectUpdateRemindersDay
}

// GetProjectUpdateRemindersHour returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.ProjectUpdateRemindersHour, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetProjectUpdateRemindersHour() *float64 {
	return v.ProjectUpdateRemindersHour
}

// GetProjectUpdatesReminderFrequency returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.ProjectUpdatesReminderFrequency, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetProjectUpdatesReminderFrequency() *ProjectUpdateReminderFrequency {
	return v.ProjectUpdatesReminderFrequency
}

// GetReleaseChannel returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.ReleaseChannel, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetReleaseChannel() *ReleaseChannel {
	return v.ReleaseChannel
}

// GetRoadmapEnabled returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetRoadmapEnabled() *bool {
	return v.RoadmapEnabled
}

// GetSamlEnabled returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.SamlEnabled, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetSamlEnabled() *bool {
	return v.SamlEnabled
}

// GetScimEnabled returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.ScimEnabled, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetScimEnabled() *bool {
	return v.ScimEnabled
}

// GetTrialEndsAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.TrialEndsAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetTrialEndsAt() *time.Time {
	return v.TrialEndsAt
}

// GetUpdatedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrlKey returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.UrlKey, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetUrlKey() *string {
	return v.UrlKey
}

// GetUserCount returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization.UserCount, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationOrganization) GetUserCount() *int {
	return v.UserCount
}

// listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod *float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
	AutoCloseStateId *string `json:"autoCloseStateId"`
	// The team's color.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Calendar feed URL (iCal) for cycles.
	CycleCalenderUrl *string `json:"cycleCalenderUrl"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime *float64 `json:"cycleCooldownTime"`
	// The duration of a cycle in weeks.
	CycleDuration *float64 `json:"cycleDuration"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted *bool `json:"cycleIssueAutoAssignCompleted"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted *bool `json:"cycleIssueAutoAssignStarted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive *bool `json:"cycleLockToActive"`
	// The day of the week that a new cycle starts.
	CycleStartDay *float64 `json:"cycleStartDay"`
	// Whether the team uses cycles.
	CyclesEnabled *bool `json:"cyclesEnabled"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate *float64 `json:"defaultIssueEstimate"`
	// The id of the default template to use for new issues created by members of the team.
	DefaultTemplateForMembersId *string `json:"defaultTemplateForMembersId"`
	// The id of the default template to use for new issues created by non-members of the team.
	DefaultTemplateForNonMembersId *string `json:"defaultTemplateForNonMembersId"`
	// The team's description.
	Description *string `json:"description"`
	// Whether to group recent issue history entries.
	GroupIssueHistory *bool `json:"groupIssueHistory"`
	// The icon of the team.
	Icon *string `json:"icon"`
	// Unique hash for the team to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero *bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended *bool `json:"issueEstimationExtended"`
	// The issue estimation type to use.
	IssueEstimationType *string `json:"issueEstimationType"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst *bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom *bool `json:"issueSortOrderDefaultToBottom"`
	// The team's unique key. The key is used in URLs.
	Key *string `json:"key"`
	// The team's name.
	Name *string `json:"name"`
	// Whether the team is private or not.
	Private *bool `json:"private"`
	// Whether an issue needs to have a priority set before leaving triage
	RequirePriorityToLeaveTriage *bool `json:"requirePriorityToLeaveTriage"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone *string `json:"timezone"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled *bool `json:"triageEnabled"`
	// How many upcoming cycles to create.
	UpcomingCycleCount *float64 `json:"upcomingCycleCount"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.Id, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivePeriod returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetAutoArchivePeriod() *float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetAutoClosePeriod() *float64 {
	return v.AutoClosePeriod
}

// GetAutoCloseStateId returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetAutoCloseStateId() *string {
	return v.AutoCloseStateId
}

// GetColor returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.Color, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCycleCalenderUrl returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CycleCalenderUrl, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCycleCalenderUrl() *string {
	return v.CycleCalenderUrl
}

// GetCycleCooldownTime returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCycleCooldownTime() *float64 {
	return v.CycleCooldownTime
}

// GetCycleDuration returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCycleDuration() *float64 {
	return v.CycleDuration
}

// GetCycleIssueAutoAssignCompleted returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCycleIssueAutoAssignCompleted() *bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleIssueAutoAssignStarted returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCycleIssueAutoAssignStarted() *bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleLockToActive returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCycleLockToActive() *bool {
	return v.CycleLockToActive
}

// GetCycleStartDay returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCycleStartDay() *float64 {
	return v.CycleStartDay
}

// GetCyclesEnabled returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetCyclesEnabled() *bool {
	return v.CyclesEnabled
}

// GetDefaultIssueEstimate returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetDefaultIssueEstimate() *float64 {
	return v.DefaultIssueEstimate
}

// GetDefaultTemplateForMembersId returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetDefaultTemplateForMembersId() *string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetDefaultTemplateForNonMembersId() *string {
	return v.DefaultTemplateForNonMembersId
}

// GetDescription returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.Description, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetDescription() *string {
	return v.Description
}

// GetGroupIssueHistory returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetGroupIssueHistory() *bool {
	return v.GroupIssueHistory
}

// GetIcon returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.Icon, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetIcon() *string {
	return v.Icon
}

// GetInviteHash returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.InviteHash, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetInviteHash() *string {
	return v.InviteHash
}

// GetIssueEstimationAllowZero returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetIssueEstimationAllowZero() *bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetIssueEstimationExtended() *bool {
	return v.IssueEstimationExtended
}

// GetIssueEstimationType returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetIssueEstimationType() *string {
	return v.IssueEstimationType
}

// GetIssueOrderingNoPriorityFirst returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetIssueOrderingNoPriorityFirst() *bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueSortOrderDefaultToBottom returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetIssueSortOrderDefaultToBottom() *bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetKey returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.Key, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetKey() *string {
	return v.Key
}

// GetName returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.Name, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetName() *string {
	return v.Name
}

// GetPrivate returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.Private, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetPrivate() *bool {
	return v.Private
}

// GetRequirePriorityToLeaveTriage returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetRequirePriorityToLeaveTriage() *bool {
	return v.RequirePriorityToLeaveTriage
}

// GetSlackIssueComments returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetSlackNewIssue() *bool {
	return v.SlackNewIssue
}

// GetTimezone returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.Timezone, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetTimezone() *string {
	return v.Timezone
}

// GetTriageEnabled returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetTriageEnabled() *bool {
	return v.TriageEnabled
}

// GetUpcomingCycleCount returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetUpcomingCycleCount() *float64 {
	return v.UpcomingCycleCount
}

// GetUpdatedAt returns listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionNodesIntegrationTeam) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listIntegrationIntegrationsIntegrationConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listIntegrationIntegrationsIntegrationConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listIntegrationIntegrationsIntegrationConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionPageInfo) GetHasNextPage() *bool {
	return v.HasNextPage
}

// GetEndCursor returns listIntegrationIntegrationsIntegrationConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listIntegrationIntegrationsIntegrationConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// listIntegrationResponse is returned by listIntegration on success.
type listIntegrationResponse struct {
	// All integrations.
	Integrations *listIntegrationIntegrationsIntegrationConnection `json:"integrations"`
}

// GetIntegrations returns listIntegrationResponse.Integrations, and is useful for accessing the field via an interface.
func (v *listIntegrationResponse) GetIntegrations() *listIntegrationIntegrationsIntegrationConnection {
	return v.Integrations
}

// listIssueIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
type listIssueIssuesIssueConnection struct {
	PageInfo *listIssueIssuesIssueConnectionPageInfo     `json:"pageInfo"`
	Nodes    []*listIssueIssuesIssueConnectionNodesIssue `json:"nodes"`
}

// GetPageInfo returns listIssueIssuesIssueConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnection) GetPageInfo() *listIssueIssuesIssueConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listIssueIssuesIssueConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnection) GetNodes() []*listIssueIssuesIssueConnectionNodesIssue {
	return v.Nodes
}

// listIssueIssuesIssueConnectionNodesIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listIssueIssuesIssueConnectionNodesIssue struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number *float64 `json:"number"`
	// The issue's title.
	Title *string `json:"title"`
	// The issue's description in markdown format.
	Description *string `json:"description"`
	// The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
	Priority *float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate *float64 `json:"estimate"`
	// The order of the item in relation to other items in the organization.
	SortOrder *float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt *time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt *time.Time `json:"completedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt *time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt *time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate *time.Time `json:"dueDate"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed *bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt *time.Time `json:"snoozedUntilAt"`
	// Previous identifiers of the issue if it has been moved between teams.
	PreviousIdentifiers []*string `json:"previousIdentifiers"`
	// The order of the item in the sub-issue list. Only set if the issue has a parent.
	SubIssueSortOrder *float64 `json:"subIssueSortOrder"`
	// Label for the priority.
	PriorityLabel *string `json:"priorityLabel"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier *string `json:"identifier"`
	// Issue URL.
	Url *string `json:"url"`
	// Suggested branch name for the issue.
	BranchName *string `json:"branchName"`
	// Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
	CustomerTicketCount *int `json:"customerTicketCount"`
	// Labels associated with this issue.
	Labels *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnection `json:"labels"`
	// The team that the issue is associated with.
	Team *listIssueIssuesIssueConnectionNodesIssueTeam `json:"team"`
	// The cycle that the issue is associated with.
	Cycle *listIssueIssuesIssueConnectionNodesIssueCycle `json:"cycle"`
	// The project that the issue is associated with.
	Project *listIssueIssuesIssueConnectionNodesIssueProject `json:"project"`
	// The user who created the issue.
	Creator *listIssueIssuesIssueConnectionNodesIssueCreatorUser `json:"creator"`
	// The user to whom the issue is assigned to.
	Assignee *listIssueIssuesIssueConnectionNodesIssueAssigneeUser `json:"assignee"`
	// The user who snoozed the issue.
	SnoozedBy *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser `json:"snoozedBy"`
	// The workflow state that the issue is associated with.
	State *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState `json:"state"`
	// The parent of the issue.
	Parent *listIssueIssuesIssueConnectionNodesIssueParentIssue `json:"parent"`
	// The projectMilestone that the issue is associated with.
	ProjectMilestone *listIssueIssuesIssueConnectionNodesIssueProjectMilestone `json:"projectMilestone"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssue.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetId() *string { return v.Id }

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetArchivedAt() *time.Time { return v.ArchivedAt }

// GetNumber returns listIssueIssuesIssueConnectionNodesIssue.Number, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetNumber() *float64 { return v.Number }

// GetTitle returns listIssueIssuesIssueConnectionNodesIssue.Title, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTitle() *string { return v.Title }

// GetDescription returns listIssueIssuesIssueConnectionNodesIssue.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetDescription() *string { return v.Description }

// GetPriority returns listIssueIssuesIssueConnectionNodesIssue.Priority, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPriority() *float64 { return v.Priority }

// GetEstimate returns listIssueIssuesIssueConnectionNodesIssue.Estimate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetEstimate() *float64 { return v.Estimate }

// GetSortOrder returns listIssueIssuesIssueConnectionNodesIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSortOrder() *float64 { return v.SortOrder }

// GetStartedAt returns listIssueIssuesIssueConnectionNodesIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetStartedAt() *time.Time { return v.StartedAt }

// GetCompletedAt returns listIssueIssuesIssueConnectionNodesIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCompletedAt() *time.Time { return v.CompletedAt }

// GetCanceledAt returns listIssueIssuesIssueConnectionNodesIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCanceledAt() *time.Time { return v.CanceledAt }

// GetAutoClosedAt returns listIssueIssuesIssueConnectionNodesIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAutoClosedAt() *time.Time {
	return v.AutoClosedAt
}

// GetAutoArchivedAt returns listIssueIssuesIssueConnectionNodesIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetDueDate returns listIssueIssuesIssueConnectionNodesIssue.DueDate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetDueDate() *time.Time { return v.DueDate }

// GetTrashed returns listIssueIssuesIssueConnectionNodesIssue.Trashed, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTrashed() *bool { return v.Trashed }

// GetSnoozedUntilAt returns listIssueIssuesIssueConnectionNodesIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSnoozedUntilAt() *time.Time {
	return v.SnoozedUntilAt
}

// GetPreviousIdentifiers returns listIssueIssuesIssueConnectionNodesIssue.PreviousIdentifiers, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPreviousIdentifiers() []*string {
	return v.PreviousIdentifiers
}

// GetSubIssueSortOrder returns listIssueIssuesIssueConnectionNodesIssue.SubIssueSortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSubIssueSortOrder() *float64 {
	return v.SubIssueSortOrder
}

// GetPriorityLabel returns listIssueIssuesIssueConnectionNodesIssue.PriorityLabel, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPriorityLabel() *string { return v.PriorityLabel }

// GetIdentifier returns listIssueIssuesIssueConnectionNodesIssue.Identifier, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetIdentifier() *string { return v.Identifier }

// GetUrl returns listIssueIssuesIssueConnectionNodesIssue.Url, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetUrl() *string { return v.Url }

// GetBranchName returns listIssueIssuesIssueConnectionNodesIssue.BranchName, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetBranchName() *string { return v.BranchName }

// GetCustomerTicketCount returns listIssueIssuesIssueConnectionNodesIssue.CustomerTicketCount, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCustomerTicketCount() *int {
	return v.CustomerTicketCount
}

// GetLabels returns listIssueIssuesIssueConnectionNodesIssue.Labels, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetLabels() *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnection {
	return v.Labels
}

// GetTeam returns listIssueIssuesIssueConnectionNodesIssue.Team, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTeam() *listIssueIssuesIssueConnectionNodesIssueTeam {
	return v.Team
}

// GetCycle returns listIssueIssuesIssueConnectionNodesIssue.Cycle, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCycle() *listIssueIssuesIssueConnectionNodesIssueCycle {
	return v.Cycle
}

// GetProject returns listIssueIssuesIssueConnectionNodesIssue.Project, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetProject() *listIssueIssuesIssueConnectionNodesIssueProject {
	return v.Project
}

// GetCreator returns listIssueIssuesIssueConnectionNodesIssue.Creator, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCreator() *listIssueIssuesIssueConnectionNodesIssueCreatorUser {
	return v.Creator
}

// GetAssignee returns listIssueIssuesIssueConnectionNodesIssue.Assignee, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAssignee() *listIssueIssuesIssueConnectionNodesIssueAssigneeUser {
	return v.Assignee
}

// GetSnoozedBy returns listIssueIssuesIssueConnectionNodesIssue.SnoozedBy, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSnoozedBy() *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser {
	return v.SnoozedBy
}

// GetState returns listIssueIssuesIssueConnectionNodesIssue.State, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetState() *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState {
	return v.State
}

// GetParent returns listIssueIssuesIssueConnectionNodesIssue.Parent, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetParent() *listIssueIssuesIssueConnectionNodesIssueParentIssue {
	return v.Parent
}

// GetProjectMilestone returns listIssueIssuesIssueConnectionNodesIssue.ProjectMilestone, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetProjectMilestone() *listIssueIssuesIssueConnectionNodesIssueProjectMilestone {
	return v.ProjectMilestone
}

// listIssueIssuesIssueConnectionNodesIssueAssigneeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueAssigneeUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetId() *string { return v.Id }

// GetActive returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Active, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetActive() *bool { return v.Active }

// GetAdmin returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Admin, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetAdmin() *bool { return v.Admin }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Email, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetEmail() *string { return v.Email }

// GetGuest returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Guest, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetGuest() *bool { return v.Guest }

// GetInviteHash returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.IsMe, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetIsMe() *bool { return v.IsMe }

// GetLastSeen returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetName() *string { return v.Name }

// GetStatusEmoji returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Timezone, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Url, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetUrl() *string { return v.Url }

// listIssueIssuesIssueConnectionNodesIssueCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueCreatorUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetId() *string { return v.Id }

// GetActive returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Active, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetActive() *bool { return v.Active }

// GetAdmin returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Admin, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetAdmin() *bool { return v.Admin }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Email, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetEmail() *string { return v.Email }

// GetGuest returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Guest, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetGuest() *bool { return v.Guest }

// GetInviteHash returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.IsMe, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetIsMe() *bool { return v.IsMe }

// GetLastSeen returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetName() *string { return v.Name }

// GetStatusEmoji returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Timezone, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Url, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetUrl() *string { return v.Url }

// listIssueIssuesIssueConnectionNodesIssueCycle includes the requested fields of the GraphQL type Cycle.
// The GraphQL type's documentation follows.
//
// A set of issues to be resolved in a specified amount of time.
type listIssueIssuesIssueConnectionNodesIssueCycle struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the cycle was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The completion time of the cycle. If null, the cycle hasn't been completed.
	CompletedAt *time.Time `json:"completedAt"`
	// The number of completed issues in the cycle after each day.
	CompletedIssueCountHistory []*float64 `json:"completedIssueCountHistory"`
	// The number of completed estimation points after each day.
	CompletedScopeHistory []*float64 `json:"completedScopeHistory"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The cycle's description.
	Description *string `json:"description"`
	// The end time of the cycle.
	EndsAt *time.Time `json:"endsAt"`
	// The number of in progress estimation points after each day.
	InProgressScopeHistory []*float64 `json:"inProgressScopeHistory"`
	// The total number of issues in the cycle after each day.
	IssueCountHistory []*float64 `json:"issueCountHistory"`
	// The custom name of the cycle.
	Name *string `json:"name"`
	// The number of the cycle.
	Number *float64 `json:"number"`
	// The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
	Progress *float64 `json:"progress"`
	// The total number of estimation points after each day.
	ScopeHistory []*float64 `json:"scopeHistory"`
	// The start time of the cycle.
	StartsAt *time.Time `json:"startsAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueCycle.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetId() *string { return v.Id }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueCycle.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivedAt returns listIssueIssuesIssueConnectionNodesIssueCycle.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetCompletedAt returns listIssueIssuesIssueConnectionNodesIssueCycle.CompletedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetCompletedAt() *time.Time {
	return v.CompletedAt
}

// GetCompletedIssueCountHistory returns listIssueIssuesIssueConnectionNodesIssueCycle.CompletedIssueCountHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetCompletedIssueCountHistory() []*float64 {
	return v.CompletedIssueCountHistory
}

// GetCompletedScopeHistory returns listIssueIssuesIssueConnectionNodesIssueCycle.CompletedScopeHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetCompletedScopeHistory() []*float64 {
	return v.CompletedScopeHistory
}

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueCycle.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueCycle.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetDescription() *string {
	return v.Description
}

// GetEndsAt returns listIssueIssuesIssueConnectionNodesIssueCycle.EndsAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetEndsAt() *time.Time { return v.EndsAt }

// GetInProgressScopeHistory returns listIssueIssuesIssueConnectionNodesIssueCycle.InProgressScopeHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetInProgressScopeHistory() []*float64 {
	return v.InProgressScopeHistory
}

// GetIssueCountHistory returns listIssueIssuesIssueConnectionNodesIssueCycle.IssueCountHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetIssueCountHistory() []*float64 {
	return v.IssueCountHistory
}

// GetName returns listIssueIssuesIssueConnectionNodesIssueCycle.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetName() *string { return v.Name }

// GetNumber returns listIssueIssuesIssueConnectionNodesIssueCycle.Number, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetNumber() *float64 { return v.Number }

// GetProgress returns listIssueIssuesIssueConnectionNodesIssueCycle.Progress, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetProgress() *float64 { return v.Progress }

// GetScopeHistory returns listIssueIssuesIssueConnectionNodesIssueCycle.ScopeHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetScopeHistory() []*float64 {
	return v.ScopeHistory
}

// GetStartsAt returns listIssueIssuesIssueConnectionNodesIssueCycle.StartsAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetStartsAt() *time.Time { return v.StartsAt }

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueCycle.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnection includes the requested fields of the GraphQL type IssueLabelConnection.
type listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnection struct {
	PageInfo *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionPageInfo          `json:"pageInfo"`
	Nodes    []*listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel `json:"nodes"`
}

// GetPageInfo returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnection) GetPageInfo() *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnection) GetNodes() []*listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel {
	return v.Nodes
}

// listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The label's color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The label's description.
	Description *string `json:"description"`
	// The label's name.
	Name *string `json:"name"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel) GetDescription() *string {
	return v.Description
}

// GetName returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel) GetName() *string {
	return v.Name
}

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionNodesIssueLabel) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionPageInfo) GetHasNextPage() *bool {
	return v.HasNextPage
}

// GetEndCursor returns listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueLabelsIssueLabelConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// listIssueIssuesIssueConnectionNodesIssueParentIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listIssueIssuesIssueConnectionNodesIssueParentIssue struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number *float64 `json:"number"`
	// The issue's title.
	Title *string `json:"title"`
	// The issue's description in markdown format.
	Description *string `json:"description"`
	// The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
	Priority *float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate *float64 `json:"estimate"`
	// The order of the item in relation to other items in the organization.
	SortOrder *float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt *time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt *time.Time `json:"completedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt *time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt *time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate *time.Time `json:"dueDate"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed *bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt *time.Time `json:"snoozedUntilAt"`
	// Previous identifiers of the issue if it has been moved between teams.
	PreviousIdentifiers []*string `json:"previousIdentifiers"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetId() *string { return v.Id }

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetNumber returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Number, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetNumber() *float64 { return v.Number }

// GetTitle returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Title, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetTitle() *string { return v.Title }

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetDescription() *string {
	return v.Description
}

// GetPriority returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Priority, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetPriority() *float64 {
	return v.Priority
}

// GetEstimate returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Estimate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetEstimate() *float64 {
	return v.Estimate
}

// GetSortOrder returns listIssueIssuesIssueConnectionNodesIssueParentIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetSortOrder() *float64 {
	return v.SortOrder
}

// GetStartedAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetStartedAt() *time.Time {
	return v.StartedAt
}

// GetCompletedAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetCompletedAt() *time.Time {
	return v.CompletedAt
}

// GetCanceledAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetCanceledAt() *time.Time {
	return v.CanceledAt
}

// GetAutoClosedAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetAutoClosedAt() *time.Time {
	return v.AutoClosedAt
}

// GetAutoArchivedAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetDueDate returns listIssueIssuesIssueConnectionNodesIssueParentIssue.DueDate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetDueDate() *time.Time {
	return v.DueDate
}

// GetTrashed returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Trashed, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetTrashed() *bool { return v.Trashed }

// GetSnoozedUntilAt returns listIssueIssuesIssueConnectionNodesIssueParentIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetSnoozedUntilAt() *time.Time {
	return v.SnoozedUntilAt
}

// GetPreviousIdentifiers returns listIssueIssuesIssueConnectionNodesIssueParentIssue.PreviousIdentifiers, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetPreviousIdentifiers() []*string {
	return v.PreviousIdentifiers
}

// listIssueIssuesIssueConnectionNodesIssueProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type listIssueIssuesIssueConnectionNodesIssueProject struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the project was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The time at which the project was moved into canceled state.
	CanceledAt *time.Time `json:"canceledAt"`
	// The project's color.
	Color *string `json:"color"`
	// The time at which the project was moved into completed state.
	CompletedAt *time.Time `json:"completedAt"`
	// The number of completed issues in the project after each week.
	CompletedIssueCountHistory []*float64 `json:"completedIssueCountHistory"`
	// The number of completed estimation points after each week.
	CompletedScopeHistory []*float64 `json:"completedScopeHistory"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The project's description.
	Description *string `json:"description"`
	// The icon of the project.
	Icon *string `json:"icon"`
	// The number of in progress estimation points after each week.
	InProgressScopeHistory []*float64 `json:"inProgressScopeHistory"`
	// The total number of issues in the project after each week.
	IssueCountHistory []*float64 `json:"issueCountHistory"`
	// The project's name.
	Name *string `json:"name"`
	// The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
	Progress *float64 `json:"progress"`
	// The time until which project update reminders are paused.
	ProjectUpdateRemindersPausedUntilAt *time.Time `json:"projectUpdateRemindersPausedUntilAt"`
	// The overall scope (total estimate points) of the project.
	Scope *float64 `json:"scope"`
	// The total number of estimation points after each week.
	ScopeHistory []*float64 `json:"scopeHistory"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The project's unique URL slug.
	SlugId *string `json:"slugId"`
	// The sort order for the project within the organization.
	SortOrder *float64 `json:"sortOrder"`
	// [Internal] The estimated start date of the project.
	StartDate *time.Time `json:"startDate"`
	// The time at which the project was moved into started state.
	StartedAt *time.Time `json:"startedAt"`
	// The type of the state.
	State *string `json:"state"`
	// The estimated completion date of the project.
	TargetDate *time.Time `json:"targetDate"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Project URL.
	Url *string `json:"url"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueProject.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetId() *string { return v.Id }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueProject.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivedAt returns listIssueIssuesIssueConnectionNodesIssueProject.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetCanceledAt returns listIssueIssuesIssueConnectionNodesIssueProject.CanceledAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetCanceledAt() *time.Time {
	return v.CanceledAt
}

// GetColor returns listIssueIssuesIssueConnectionNodesIssueProject.Color, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetColor() *string { return v.Color }

// GetCompletedAt returns listIssueIssuesIssueConnectionNodesIssueProject.CompletedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetCompletedAt() *time.Time {
	return v.CompletedAt
}

// GetCompletedIssueCountHistory returns listIssueIssuesIssueConnectionNodesIssueProject.CompletedIssueCountHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetCompletedIssueCountHistory() []*float64 {
	return v.CompletedIssueCountHistory
}

// GetCompletedScopeHistory returns listIssueIssuesIssueConnectionNodesIssueProject.CompletedScopeHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetCompletedScopeHistory() []*float64 {
	return v.CompletedScopeHistory
}

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueProject.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetDescription() *string {
	return v.Description
}

// GetIcon returns listIssueIssuesIssueConnectionNodesIssueProject.Icon, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetIcon() *string { return v.Icon }

// GetInProgressScopeHistory returns listIssueIssuesIssueConnectionNodesIssueProject.InProgressScopeHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetInProgressScopeHistory() []*float64 {
	return v.InProgressScopeHistory
}

// GetIssueCountHistory returns listIssueIssuesIssueConnectionNodesIssueProject.IssueCountHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetIssueCountHistory() []*float64 {
	return v.IssueCountHistory
}

// GetName returns listIssueIssuesIssueConnectionNodesIssueProject.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetName() *string { return v.Name }

// GetProgress returns listIssueIssuesIssueConnectionNodesIssueProject.Progress, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetProgress() *float64 { return v.Progress }

// GetProjectUpdateRemindersPausedUntilAt returns listIssueIssuesIssueConnectionNodesIssueProject.ProjectUpdateRemindersPausedUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetProjectUpdateRemindersPausedUntilAt() *time.Time {
	return v.ProjectUpdateRemindersPausedUntilAt
}

// GetScope returns listIssueIssuesIssueConnectionNodesIssueProject.Scope, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetScope() *float64 { return v.Scope }

// GetScopeHistory returns listIssueIssuesIssueConnectionNodesIssueProject.ScopeHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetScopeHistory() []*float64 {
	return v.ScopeHistory
}

// GetSlackIssueComments returns listIssueIssuesIssueConnectionNodesIssueProject.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listIssueIssuesIssueConnectionNodesIssueProject.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listIssueIssuesIssueConnectionNodesIssueProject.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetSlackNewIssue() *bool {
	return v.SlackNewIssue
}

// GetSlugId returns listIssueIssuesIssueConnectionNodesIssueProject.SlugId, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetSlugId() *string { return v.SlugId }

// GetSortOrder returns listIssueIssuesIssueConnectionNodesIssueProject.SortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetSortOrder() *float64 { return v.SortOrder }

// GetStartDate returns listIssueIssuesIssueConnectionNodesIssueProject.StartDate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetStartDate() *time.Time {
	return v.StartDate
}

// GetStartedAt returns listIssueIssuesIssueConnectionNodesIssueProject.StartedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetStartedAt() *time.Time {
	return v.StartedAt
}

// GetState returns listIssueIssuesIssueConnectionNodesIssueProject.State, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetState() *string { return v.State }

// GetTargetDate returns listIssueIssuesIssueConnectionNodesIssueProject.TargetDate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetTargetDate() *time.Time {
	return v.TargetDate
}

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listIssueIssuesIssueConnectionNodesIssueProject.Url, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetUrl() *string { return v.Url }

// listIssueIssuesIssueConnectionNodesIssueProjectMilestone includes the requested fields of the GraphQL type ProjectMilestone.
// The GraphQL type's documentation follows.
//
// A milestone for a project.
type listIssueIssuesIssueConnectionNodesIssueProjectMilestone struct {
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The description of the project milestone.
	Description *string `json:"description"`
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The name of the project milestone.
	Name *string `json:"name"`
	// The order of the milestone in relation to other milestones within a project.
	SortOrder *float64 `json:"sortOrder"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueProjectMilestone.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProjectMilestone) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueProjectMilestone.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProjectMilestone) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueProjectMilestone.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProjectMilestone) GetDescription() *string {
	return v.Description
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueProjectMilestone.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProjectMilestone) GetId() *string { return v.Id }

// GetName returns listIssueIssuesIssueConnectionNodesIssueProjectMilestone.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProjectMilestone) GetName() *string { return v.Name }

// GetSortOrder returns listIssueIssuesIssueConnectionNodesIssueProjectMilestone.SortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProjectMilestone) GetSortOrder() *float64 {
	return v.SortOrder
}

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueProjectMilestone.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProjectMilestone) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listIssueIssuesIssueConnectionNodesIssueSnoozedByUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueSnoozedByUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetId() *string { return v.Id }

// GetActive returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Active, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetActive() *bool { return v.Active }

// GetAdmin returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Admin, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetAdmin() *bool { return v.Admin }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Email, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetEmail() *string { return v.Email }

// GetGuest returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Guest, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetGuest() *bool { return v.Guest }

// GetInviteHash returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.IsMe, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetIsMe() *bool { return v.IsMe }

// GetLastSeen returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetName() *string { return v.Name }

// GetStatusEmoji returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Timezone, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Url, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetUrl() *string { return v.Url }

// listIssueIssuesIssueConnectionNodesIssueStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listIssueIssuesIssueConnectionNodesIssueStateWorkflowState struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The state's UI color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Description of the state.
	Description *string `json:"description"`
	// The state's name.
	Name *string `json:"name"`
	// The position of the state in the team flow.
	Position *float64 `json:"position"`
	// The type of the state.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetId() *string { return v.Id }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetDescription() *string {
	return v.Description
}

// GetName returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetName() *string { return v.Name }

// GetPosition returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetPosition() *float64 {
	return v.Position
}

// GetType returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetType() *string { return v.Type }

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listIssueIssuesIssueConnectionNodesIssueTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listIssueIssuesIssueConnectionNodesIssueTeam struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod *float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
	AutoCloseStateId *string `json:"autoCloseStateId"`
	// The team's color.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Calendar feed URL (iCal) for cycles.
	CycleCalenderUrl *string `json:"cycleCalenderUrl"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime *float64 `json:"cycleCooldownTime"`
	// The duration of a cycle in weeks.
	CycleDuration *float64 `json:"cycleDuration"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted *bool `json:"cycleIssueAutoAssignCompleted"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted *bool `json:"cycleIssueAutoAssignStarted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive *bool `json:"cycleLockToActive"`
	// The day of the week that a new cycle starts.
	CycleStartDay *float64 `json:"cycleStartDay"`
	// Whether the team uses cycles.
	CyclesEnabled *bool `json:"cyclesEnabled"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate *float64 `json:"defaultIssueEstimate"`
	// The id of the default template to use for new issues created by members of the team.
	DefaultTemplateForMembersId *string `json:"defaultTemplateForMembersId"`
	// The id of the default template to use for new issues created by non-members of the team.
	DefaultTemplateForNonMembersId *string `json:"defaultTemplateForNonMembersId"`
	// The team's description.
	Description *string `json:"description"`
	// Whether to group recent issue history entries.
	GroupIssueHistory *bool `json:"groupIssueHistory"`
	// The icon of the team.
	Icon *string `json:"icon"`
	// Unique hash for the team to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero *bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended *bool `json:"issueEstimationExtended"`
	// The issue estimation type to use.
	IssueEstimationType *string `json:"issueEstimationType"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst *bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom *bool `json:"issueSortOrderDefaultToBottom"`
	// The team's unique key. The key is used in URLs.
	Key *string `json:"key"`
	// The team's name.
	Name *string `json:"name"`
	// Whether the team is private or not.
	Private *bool `json:"private"`
	// Whether an issue needs to have a priority set before leaving triage
	RequirePriorityToLeaveTriage *bool `json:"requirePriorityToLeaveTriage"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone *string `json:"timezone"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled *bool `json:"triageEnabled"`
	// How many upcoming cycles to create.
	UpcomingCycleCount *float64 `json:"upcomingCycleCount"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueTeam.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetId() *string { return v.Id }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssueTeam.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivePeriod returns listIssueIssuesIssueConnectionNodesIssueTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetAutoArchivePeriod() *float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns listIssueIssuesIssueConnectionNodesIssueTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetAutoClosePeriod() *float64 {
	return v.AutoClosePeriod
}

// GetAutoCloseStateId returns listIssueIssuesIssueConnectionNodesIssueTeam.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetAutoCloseStateId() *string {
	return v.AutoCloseStateId
}

// GetColor returns listIssueIssuesIssueConnectionNodesIssueTeam.Color, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetColor() *string { return v.Color }

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssueTeam.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetCycleCalenderUrl returns listIssueIssuesIssueConnectionNodesIssueTeam.CycleCalenderUrl, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCycleCalenderUrl() *string {
	return v.CycleCalenderUrl
}

// GetCycleCooldownTime returns listIssueIssuesIssueConnectionNodesIssueTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCycleCooldownTime() *float64 {
	return v.CycleCooldownTime
}

// GetCycleDuration returns listIssueIssuesIssueConnectionNodesIssueTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCycleDuration() *float64 {
	return v.CycleDuration
}

// GetCycleIssueAutoAssignCompleted returns listIssueIssuesIssueConnectionNodesIssueTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCycleIssueAutoAssignCompleted() *bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleIssueAutoAssignStarted returns listIssueIssuesIssueConnectionNodesIssueTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCycleIssueAutoAssignStarted() *bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleLockToActive returns listIssueIssuesIssueConnectionNodesIssueTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCycleLockToActive() *bool {
	return v.CycleLockToActive
}

// GetCycleStartDay returns listIssueIssuesIssueConnectionNodesIssueTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCycleStartDay() *float64 {
	return v.CycleStartDay
}

// GetCyclesEnabled returns listIssueIssuesIssueConnectionNodesIssueTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetCyclesEnabled() *bool {
	return v.CyclesEnabled
}

// GetDefaultIssueEstimate returns listIssueIssuesIssueConnectionNodesIssueTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetDefaultIssueEstimate() *float64 {
	return v.DefaultIssueEstimate
}

// GetDefaultTemplateForMembersId returns listIssueIssuesIssueConnectionNodesIssueTeam.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetDefaultTemplateForMembersId() *string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns listIssueIssuesIssueConnectionNodesIssueTeam.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetDefaultTemplateForNonMembersId() *string {
	return v.DefaultTemplateForNonMembersId
}

// GetDescription returns listIssueIssuesIssueConnectionNodesIssueTeam.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetDescription() *string { return v.Description }

// GetGroupIssueHistory returns listIssueIssuesIssueConnectionNodesIssueTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetGroupIssueHistory() *bool {
	return v.GroupIssueHistory
}

// GetIcon returns listIssueIssuesIssueConnectionNodesIssueTeam.Icon, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetIcon() *string { return v.Icon }

// GetInviteHash returns listIssueIssuesIssueConnectionNodesIssueTeam.InviteHash, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetInviteHash() *string { return v.InviteHash }

// GetIssueEstimationAllowZero returns listIssueIssuesIssueConnectionNodesIssueTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetIssueEstimationAllowZero() *bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns listIssueIssuesIssueConnectionNodesIssueTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetIssueEstimationExtended() *bool {
	return v.IssueEstimationExtended
}

// GetIssueEstimationType returns listIssueIssuesIssueConnectionNodesIssueTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetIssueEstimationType() *string {
	return v.IssueEstimationType
}

// GetIssueOrderingNoPriorityFirst returns listIssueIssuesIssueConnectionNodesIssueTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetIssueOrderingNoPriorityFirst() *bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueSortOrderDefaultToBottom returns listIssueIssuesIssueConnectionNodesIssueTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetIssueSortOrderDefaultToBottom() *bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetKey returns listIssueIssuesIssueConnectionNodesIssueTeam.Key, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetKey() *string { return v.Key }

// GetName returns listIssueIssuesIssueConnectionNodesIssueTeam.Name, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetName() *string { return v.Name }

// GetPrivate returns listIssueIssuesIssueConnectionNodesIssueTeam.Private, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetPrivate() *bool { return v.Private }

// GetRequirePriorityToLeaveTriage returns listIssueIssuesIssueConnectionNodesIssueTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetRequirePriorityToLeaveTriage() *bool {
	return v.RequirePriorityToLeaveTriage
}

// GetSlackIssueComments returns listIssueIssuesIssueConnectionNodesIssueTeam.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listIssueIssuesIssueConnectionNodesIssueTeam.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listIssueIssuesIssueConnectionNodesIssueTeam.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetSlackNewIssue() *bool {
	return v.SlackNewIssue
}

// GetTimezone returns listIssueIssuesIssueConnectionNodesIssueTeam.Timezone, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetTimezone() *string { return v.Timezone }

// GetTriageEnabled returns listIssueIssuesIssueConnectionNodesIssueTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetTriageEnabled() *bool {
	return v.TriageEnabled
}

// GetUpcomingCycleCount returns listIssueIssuesIssueConnectionNodesIssueTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetUpcomingCycleCount() *float64 {
	return v.UpcomingCycleCount
}

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssueTeam.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// listIssueIssuesIssueConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listIssueIssuesIssueConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listIssueIssuesIssueConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionPageInfo) GetHasNextPage() *bool { return v.HasNextPage }

// GetEndCursor returns listIssueIssuesIssueConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// listIssueLabelIssueLabelsIssueLabelConnection includes the requested fields of the GraphQL type IssueLabelConnection.
type listIssueLabelIssueLabelsIssueLabelConnection struct {
	PageInfo *listIssueLabelIssueLabelsIssueLabelConnectionPageInfo          `json:"pageInfo"`
	Nodes    []*listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel `json:"nodes"`
}

// GetPageInfo returns listIssueLabelIssueLabelsIssueLabelConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnection) GetPageInfo() *listIssueLabelIssueLabelsIssueLabelConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listIssueLabelIssueLabelsIssueLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnection) GetNodes() []*listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel {
	return v.Nodes
}

// listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The label's color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The label's description.
	Description *string `json:"description"`
	// The label's name.
	Name *string `json:"name"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Issues associated with the label.
	Issues *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnection `json:"issues"`
	// The team that the label is associated with. If null, the label is associated with the global workspace.
	Team *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam `json:"team"`
	// The user who created the label.
	Creator      *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser  `json:"creator"`
	Organization *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization `json:"organization"`
	// The parent label.
	Parent *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel `json:"parent"`
}

// GetId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetId() *string { return v.Id }

// GetArchivedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetDescription() *string {
	return v.Description
}

// GetName returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetName() *string {
	return v.Name
}

// GetUpdatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetIssues returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Issues, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetIssues() *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnection {
	return v.Issues
}

// GetTeam returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Team, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetTeam() *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam {
	return v.Team
}

// GetCreator returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Creator, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetCreator() *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser {
	return v.Creator
}

// GetOrganization returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Organization, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetOrganization() *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization {
	return v.Organization
}

// GetParent returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Parent, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetParent() *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel {
	return v.Parent
}

// listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetId() *string {
	return v.Id
}

// GetActive returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Active, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetActive() *bool {
	return v.Active
}

// GetAdmin returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Admin, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetAdmin() *bool {
	return v.Admin
}

// GetArchivedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Description, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Email, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetEmail() *string {
	return v.Email
}

// GetGuest returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Guest, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetGuest() *bool {
	return v.Guest
}

// GetInviteHash returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.IsMe, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetIsMe() *bool {
	return v.IsMe
}

// GetLastSeen returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Name, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetName() *string {
	return v.Name
}

// GetStatusEmoji returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Timezone, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser.Url, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelCreatorUser) GetUrl() *string {
	return v.Url
}

// listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
type listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnection struct {
	PageInfo *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionPageInfo     `json:"pageInfo"`
	Nodes    []*listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionNodesIssue `json:"nodes"`
}

// GetPageInfo returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnection) GetPageInfo() *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnection) GetNodes() []*listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionNodesIssue {
	return v.Nodes
}

// listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionNodesIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionNodesIssue struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
}

// GetId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionNodesIssue.Id, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionNodesIssue) GetId() *string {
	return v.Id
}

// listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionPageInfo) GetHasNextPage() *bool {
	return v.HasNextPage
}

// GetEndCursor returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelIssuesIssueConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Allowed authentication providers, empty array means all are allowed
	AllowedAuthServices []*string `json:"allowedAuthServices"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues in the organization.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// The time at which deletion of the organization was requested.
	DeletionRequestedAt *time.Time `json:"deletionRequestedAt"`
	// How git branches are formatted. If null, default formatting will be used.
	GitBranchFormat *string `json:"gitBranchFormat"`
	// Whether the Git integration linkback messages should be sent to private repositories.
	GitLinkbackMessagesEnabled *bool `json:"gitLinkbackMessagesEnabled"`
	// Whether the Git integration linkback messages should be sent to public repositories.
	GitPublicLinkbackMessagesEnabled *bool `json:"gitPublicLinkbackMessagesEnabled"`
	// The organization's logo URL.
	LogoUrl *string `json:"logoUrl"`
	// The organization's name.
	Name *string `json:"name"`
	// Rolling 30-day total upload volume for the organization, in megabytes.
	PeriodUploadVolume *float64 `json:"periodUploadVolume"`
	// Previously used URL keys for the organization (last 3 are kept and redirected).
	PreviousUrlKeys []*string `json:"previousUrlKeys"`
	// The day at which to prompt for project updates.
	ProjectUpdateRemindersDay *Day `json:"projectUpdateRemindersDay"`
	// The hour at which to prompt for project updates.
	ProjectUpdateRemindersHour *float64 `json:"projectUpdateRemindersHour"`
	// The frequency at which to prompt for project updates.
	ProjectUpdatesReminderFrequency *ProjectUpdateReminderFrequency `json:"projectUpdatesReminderFrequency"`
	// The feature release channel the organization belongs to.
	ReleaseChannel *ReleaseChannel `json:"releaseChannel"`
	// Whether the organization is using a roadmap.
	RoadmapEnabled *bool `json:"roadmapEnabled"`
	// Whether SAML authentication is enabled for organization.
	SamlEnabled *bool `json:"samlEnabled"`
	// Whether SCIM provisioning is enabled for organization.
	ScimEnabled *bool `json:"scimEnabled"`
	// The time at which the trial of the plus plan will end.
	TrialEndsAt *time.Time `json:"trialEndsAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The organization's unique URL key.
	UrlKey *string `json:"urlKey"`
	// Number of active users in the organization.
	UserCount *int `json:"userCount"`
}

// GetId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.Id, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetId() *string {
	return v.Id
}

// GetAllowedAuthServices returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.AllowedAuthServices, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetAllowedAuthServices() []*string {
	return v.AllowedAuthServices
}

// GetArchivedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDeletionRequestedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.DeletionRequestedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetDeletionRequestedAt() *time.Time {
	return v.DeletionRequestedAt
}

// GetGitBranchFormat returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.GitBranchFormat, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetGitBranchFormat() *string {
	return v.GitBranchFormat
}

// GetGitLinkbackMessagesEnabled returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetGitLinkbackMessagesEnabled() *bool {
	return v.GitLinkbackMessagesEnabled
}

// GetGitPublicLinkbackMessagesEnabled returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetGitPublicLinkbackMessagesEnabled() *bool {
	return v.GitPublicLinkbackMessagesEnabled
}

// GetLogoUrl returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.LogoUrl, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetLogoUrl() *string {
	return v.LogoUrl
}

// GetName returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.Name, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetName() *string {
	return v.Name
}

// GetPeriodUploadVolume returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.PeriodUploadVolume, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetPeriodUploadVolume() *float64 {
	return v.PeriodUploadVolume
}

// GetPreviousUrlKeys returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.PreviousUrlKeys, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetPreviousUrlKeys() []*string {
	return v.PreviousUrlKeys
}

// GetProjectUpdateRemindersDay returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.ProjectUpdateRemindersDay, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetProjectUpdateRemindersDay() *Day {
	return v.ProjectUpdateRemindersDay
}

// GetProjectUpdateRemindersHour returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.ProjectUpdateRemindersHour, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetProjectUpdateRemindersHour() *float64 {
	return v.ProjectUpdateRemindersHour
}

// GetProjectUpdatesReminderFrequency returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.ProjectUpdatesReminderFrequency, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetProjectUpdatesReminderFrequency() *ProjectUpdateReminderFrequency {
	return v.ProjectUpdatesReminderFrequency
}

// GetReleaseChannel returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.ReleaseChannel, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetReleaseChannel() *ReleaseChannel {
	return v.ReleaseChannel
}

// GetRoadmapEnabled returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetRoadmapEnabled() *bool {
	return v.RoadmapEnabled
}

// GetSamlEnabled returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.SamlEnabled, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetSamlEnabled() *bool {
	return v.SamlEnabled
}

// GetScimEnabled returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.ScimEnabled, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetScimEnabled() *bool {
	return v.ScimEnabled
}

// GetTrialEndsAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.TrialEndsAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetTrialEndsAt() *time.Time {
	return v.TrialEndsAt
}

// GetUpdatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrlKey returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.UrlKey, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetUrlKey() *string {
	return v.UrlKey
}

// GetUserCount returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization.UserCount, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelOrganization) GetUserCount() *int {
	return v.UserCount
}

// listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The label's color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The label's description.
	Description *string `json:"description"`
	// The label's name.
	Name *string `json:"name"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel) GetDescription() *string {
	return v.Description
}

// GetName returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel) GetName() *string {
	return v.Name
}

// GetUpdatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelParentIssueLabel) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod *float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
	AutoCloseStateId *string `json:"autoCloseStateId"`
	// The team's color.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Calendar feed URL (iCal) for cycles.
	CycleCalenderUrl *string `json:"cycleCalenderUrl"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime *float64 `json:"cycleCooldownTime"`
	// The duration of a cycle in weeks.
	CycleDuration *float64 `json:"cycleDuration"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted *bool `json:"cycleIssueAutoAssignCompleted"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted *bool `json:"cycleIssueAutoAssignStarted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive *bool `json:"cycleLockToActive"`
	// The day of the week that a new cycle starts.
	CycleStartDay *float64 `json:"cycleStartDay"`
	// Whether the team uses cycles.
	CyclesEnabled *bool `json:"cyclesEnabled"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate *float64 `json:"defaultIssueEstimate"`
	// The id of the default template to use for new issues created by members of the team.
	DefaultTemplateForMembersId *string `json:"defaultTemplateForMembersId"`
	// The id of the default template to use for new issues created by non-members of the team.
	DefaultTemplateForNonMembersId *string `json:"defaultTemplateForNonMembersId"`
	// The team's description.
	Description *string `json:"description"`
	// Whether to group recent issue history entries.
	GroupIssueHistory *bool `json:"groupIssueHistory"`
	// The icon of the team.
	Icon *string `json:"icon"`
	// Unique hash for the team to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero *bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended *bool `json:"issueEstimationExtended"`
	// The issue estimation type to use.
	IssueEstimationType *string `json:"issueEstimationType"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst *bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom *bool `json:"issueSortOrderDefaultToBottom"`
	// The team's unique key. The key is used in URLs.
	Key *string `json:"key"`
	// The team's name.
	Name *string `json:"name"`
	// Whether the team is private or not.
	Private *bool `json:"private"`
	// Whether an issue needs to have a priority set before leaving triage
	RequirePriorityToLeaveTriage *bool `json:"requirePriorityToLeaveTriage"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone *string `json:"timezone"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled *bool `json:"triageEnabled"`
	// How many upcoming cycles to create.
	UpcomingCycleCount *float64 `json:"upcomingCycleCount"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Id, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivePeriod returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetAutoArchivePeriod() *float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetAutoClosePeriod() *float64 {
	return v.AutoClosePeriod
}

// GetAutoCloseStateId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetAutoCloseStateId() *string {
	return v.AutoCloseStateId
}

// GetColor returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Color, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCycleCalenderUrl returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CycleCalenderUrl, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCycleCalenderUrl() *string {
	return v.CycleCalenderUrl
}

// GetCycleCooldownTime returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCycleCooldownTime() *float64 {
	return v.CycleCooldownTime
}

// GetCycleDuration returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCycleDuration() *float64 {
	return v.CycleDuration
}

// GetCycleIssueAutoAssignCompleted returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCycleIssueAutoAssignCompleted() *bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleIssueAutoAssignStarted returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCycleIssueAutoAssignStarted() *bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleLockToActive returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCycleLockToActive() *bool {
	return v.CycleLockToActive
}

// GetCycleStartDay returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCycleStartDay() *float64 {
	return v.CycleStartDay
}

// GetCyclesEnabled returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetCyclesEnabled() *bool {
	return v.CyclesEnabled
}

// GetDefaultIssueEstimate returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetDefaultIssueEstimate() *float64 {
	return v.DefaultIssueEstimate
}

// GetDefaultTemplateForMembersId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetDefaultTemplateForMembersId() *string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetDefaultTemplateForNonMembersId() *string {
	return v.DefaultTemplateForNonMembersId
}

// GetDescription returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Description, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetDescription() *string {
	return v.Description
}

// GetGroupIssueHistory returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetGroupIssueHistory() *bool {
	return v.GroupIssueHistory
}

// GetIcon returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Icon, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetIcon() *string {
	return v.Icon
}

// GetInviteHash returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.InviteHash, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetInviteHash() *string {
	return v.InviteHash
}

// GetIssueEstimationAllowZero returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetIssueEstimationAllowZero() *bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetIssueEstimationExtended() *bool {
	return v.IssueEstimationExtended
}

// GetIssueEstimationType returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetIssueEstimationType() *string {
	return v.IssueEstimationType
}

// GetIssueOrderingNoPriorityFirst returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetIssueOrderingNoPriorityFirst() *bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueSortOrderDefaultToBottom returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetIssueSortOrderDefaultToBottom() *bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetKey returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Key, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetKey() *string {
	return v.Key
}

// GetName returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Name, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetName() *string {
	return v.Name
}

// GetPrivate returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Private, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetPrivate() *bool {
	return v.Private
}

// GetRequirePriorityToLeaveTriage returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetRequirePriorityToLeaveTriage() *bool {
	return v.RequirePriorityToLeaveTriage
}

// GetSlackIssueComments returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetSlackNewIssue() *bool {
	return v.SlackNewIssue
}

// GetTimezone returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Timezone, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetTimezone() *string {
	return v.Timezone
}

// GetTriageEnabled returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetTriageEnabled() *bool {
	return v.TriageEnabled
}

// GetUpcomingCycleCount returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetUpcomingCycleCount() *float64 {
	return v.UpcomingCycleCount
}

// GetUpdatedAt returns listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listIssueLabelIssueLabelsIssueLabelConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listIssueLabelIssueLabelsIssueLabelConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listIssueLabelIssueLabelsIssueLabelConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionPageInfo) GetHasNextPage() *bool {
	return v.HasNextPage
}

// GetEndCursor returns listIssueLabelIssueLabelsIssueLabelConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listIssueLabelIssueLabelsIssueLabelConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// listIssueLabelResponse is returned by listIssueLabel on success.
type listIssueLabelResponse struct {
	// All issue labels.
	IssueLabels *listIssueLabelIssueLabelsIssueLabelConnection `json:"issueLabels"`
}

// GetIssueLabels returns listIssueLabelResponse.IssueLabels, and is useful for accessing the field via an interface.
func (v *listIssueLabelResponse) GetIssueLabels() *listIssueLabelIssueLabelsIssueLabelConnection {
	return v.IssueLabels
}

// listIssueResponse is returned by listIssue on success.
type listIssueResponse struct {
	// All issues.
	Issues *listIssueIssuesIssueConnection `json:"issues"`
}

// GetIssues returns listIssueResponse.Issues, and is useful for accessing the field via an interface.
func (v *listIssueResponse) GetIssues() *listIssueIssuesIssueConnection { return v.Issues }

// listOrganizationOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type listOrganizationOrganization struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Allowed authentication providers, empty array means all are allowed
	AllowedAuthServices []*string `json:"allowedAuthServices"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues in the organization.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// The time at which deletion of the organization was requested.
	DeletionRequestedAt *time.Time `json:"deletionRequestedAt"`
	// How git branches are formatted. If null, default formatting will be used.
	GitBranchFormat *string `json:"gitBranchFormat"`
	// Whether the Git integration linkback messages should be sent to private repositories.
	GitLinkbackMessagesEnabled *bool `json:"gitLinkbackMessagesEnabled"`
	// Whether the Git integration linkback messages should be sent to public repositories.
	GitPublicLinkbackMessagesEnabled *bool `json:"gitPublicLinkbackMessagesEnabled"`
	// The organization's logo URL.
	LogoUrl *string `json:"logoUrl"`
	// The organization's name.
	Name *string `json:"name"`
	// Rolling 30-day total upload volume for the organization, in megabytes.
	PeriodUploadVolume *float64 `json:"periodUploadVolume"`
	// Previously used URL keys for the organization (last 3 are kept and redirected).
	PreviousUrlKeys []*string `json:"previousUrlKeys"`
	// The day at which to prompt for project updates.
	ProjectUpdateRemindersDay *Day `json:"projectUpdateRemindersDay"`
	// The hour at which to prompt for project updates.
	ProjectUpdateRemindersHour *float64 `json:"projectUpdateRemindersHour"`
	// The frequency at which to prompt for project updates.
	ProjectUpdatesReminderFrequency *ProjectUpdateReminderFrequency `json:"projectUpdatesReminderFrequency"`
	// The feature release channel the organization belongs to.
	ReleaseChannel *ReleaseChannel `json:"releaseChannel"`
	// Whether the organization is using a roadmap.
	RoadmapEnabled *bool `json:"roadmapEnabled"`
	// Whether SAML authentication is enabled for organization.
	SamlEnabled *bool `json:"samlEnabled"`
	// Whether SCIM provisioning is enabled for organization.
	ScimEnabled *bool `json:"scimEnabled"`
	// The time at which the trial of the plus plan will end.
	TrialEndsAt *time.Time `json:"trialEndsAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The organization's unique URL key.
	UrlKey *string `json:"urlKey"`
	// Number of active users in the organization.
	UserCount *int `json:"userCount"`
	// The organization's subscription to a paid plan.
	Subscription *listOrganizationOrganizationSubscriptionPaidSubscription `json:"subscription"`
}

// GetId returns listOrganizationOrganization.Id, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetId() *string { return v.Id }

// GetAllowedAuthServices returns listOrganizationOrganization.AllowedAuthServices, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetAllowedAuthServices() []*string {
	return v.AllowedAuthServices
}

// GetArchivedAt returns listOrganizationOrganization.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetArchivedAt() *time.Time { return v.ArchivedAt }

// GetCreatedAt returns listOrganizationOrganization.CreatedAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetCreatedIssueCount returns listOrganizationOrganization.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetCreatedIssueCount() *int { return v.CreatedIssueCount }

// GetDeletionRequestedAt returns listOrganizationOrganization.DeletionRequestedAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetDeletionRequestedAt() *time.Time {
	return v.DeletionRequestedAt
}

// GetGitBranchFormat returns listOrganizationOrganization.GitBranchFormat, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetGitBranchFormat() *string { return v.GitBranchFormat }

// GetGitLinkbackMessagesEnabled returns listOrganizationOrganization.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetGitLinkbackMessagesEnabled() *bool {
	return v.GitLinkbackMessagesEnabled
}

// GetGitPublicLinkbackMessagesEnabled returns listOrganizationOrganization.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetGitPublicLinkbackMessagesEnabled() *bool {
	return v.GitPublicLinkbackMessagesEnabled
}

// GetLogoUrl returns listOrganizationOrganization.LogoUrl, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetLogoUrl() *string { return v.LogoUrl }

// GetName returns listOrganizationOrganization.Name, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetName() *string { return v.Name }

// GetPeriodUploadVolume returns listOrganizationOrganization.PeriodUploadVolume, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetPeriodUploadVolume() *float64 { return v.PeriodUploadVolume }

// GetPreviousUrlKeys returns listOrganizationOrganization.PreviousUrlKeys, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetPreviousUrlKeys() []*string { return v.PreviousUrlKeys }

// GetProjectUpdateRemindersDay returns listOrganizationOrganization.ProjectUpdateRemindersDay, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetProjectUpdateRemindersDay() *Day {
	return v.ProjectUpdateRemindersDay
}

// GetProjectUpdateRemindersHour returns listOrganizationOrganization.ProjectUpdateRemindersHour, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetProjectUpdateRemindersHour() *float64 {
	return v.ProjectUpdateRemindersHour
}

// GetProjectUpdatesReminderFrequency returns listOrganizationOrganization.ProjectUpdatesReminderFrequency, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetProjectUpdatesReminderFrequency() *ProjectUpdateReminderFrequency {
	return v.ProjectUpdatesReminderFrequency
}

// GetReleaseChannel returns listOrganizationOrganization.ReleaseChannel, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetReleaseChannel() *ReleaseChannel { return v.ReleaseChannel }

// GetRoadmapEnabled returns listOrganizationOrganization.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetRoadmapEnabled() *bool { return v.RoadmapEnabled }

// GetSamlEnabled returns listOrganizationOrganization.SamlEnabled, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetSamlEnabled() *bool { return v.SamlEnabled }

// GetScimEnabled returns listOrganizationOrganization.ScimEnabled, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetScimEnabled() *bool { return v.ScimEnabled }

// GetTrialEndsAt returns listOrganizationOrganization.TrialEndsAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetTrialEndsAt() *time.Time { return v.TrialEndsAt }

// GetUpdatedAt returns listOrganizationOrganization.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetUrlKey returns listOrganizationOrganization.UrlKey, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetUrlKey() *string { return v.UrlKey }

// GetUserCount returns listOrganizationOrganization.UserCount, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetUserCount() *int { return v.UserCount }

// GetSubscription returns listOrganizationOrganization.Subscription, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganization) GetSubscription() *listOrganizationOrganizationSubscriptionPaidSubscription {
	return v.Subscription
}

// listOrganizationOrganizationSubscriptionPaidSubscription includes the requested fields of the GraphQL type PaidSubscription.
// The GraphQL type's documentation follows.
//
// The paid subscription of an organization.
type listOrganizationOrganizationSubscriptionPaidSubscription struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The date the subscription was canceled, if any.
	CanceledAt *time.Time `json:"canceledAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The date the subscription will be billed next.
	NextBillingAt *time.Time `json:"nextBillingAt"`
	// The subscription type of a pending change. Null if no change pending.
	PendingChangeType *string `json:"pendingChangeType"`
	// The number of seats in the subscription.
	Seats *float64 `json:"seats"`
	// The maximum number of seats that will be billed in the subscription.
	SeatsMaximum *float64 `json:"seatsMaximum"`
	// The minimum number of seats that will be billed in the subscription.
	SeatsMinimum *float64 `json:"seatsMinimum"`
	// The subscription type.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listOrganizationOrganizationSubscriptionPaidSubscription.Id, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetId() *string { return v.Id }

// GetArchivedAt returns listOrganizationOrganizationSubscriptionPaidSubscription.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCanceledAt returns listOrganizationOrganizationSubscriptionPaidSubscription.CanceledAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetCanceledAt() *time.Time {
	return v.CanceledAt
}

// GetCreatedAt returns listOrganizationOrganizationSubscriptionPaidSubscription.CreatedAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetNextBillingAt returns listOrganizationOrganizationSubscriptionPaidSubscription.NextBillingAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetNextBillingAt() *time.Time {
	return v.NextBillingAt
}

// GetPendingChangeType returns listOrganizationOrganizationSubscriptionPaidSubscription.PendingChangeType, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetPendingChangeType() *string {
	return v.PendingChangeType
}

// GetSeats returns listOrganizationOrganizationSubscriptionPaidSubscription.Seats, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetSeats() *float64 {
	return v.Seats
}

// GetSeatsMaximum returns listOrganizationOrganizationSubscriptionPaidSubscription.SeatsMaximum, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetSeatsMaximum() *float64 {
	return v.SeatsMaximum
}

// GetSeatsMinimum returns listOrganizationOrganizationSubscriptionPaidSubscription.SeatsMinimum, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetSeatsMinimum() *float64 {
	return v.SeatsMinimum
}

// GetType returns listOrganizationOrganizationSubscriptionPaidSubscription.Type, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetType() *string { return v.Type }

// GetUpdatedAt returns listOrganizationOrganizationSubscriptionPaidSubscription.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listOrganizationOrganizationSubscriptionPaidSubscription) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listOrganizationResponse is returned by listOrganization on success.
type listOrganizationResponse struct {
	// The user's organization.
	Organization *listOrganizationOrganization `json:"organization"`
}

// GetOrganization returns listOrganizationResponse.Organization, and is useful for accessing the field via an interface.
func (v *listOrganizationResponse) GetOrganization() *listOrganizationOrganization {
	return v.Organization
}

// listProjectProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type listProjectProjectsProjectConnection struct {
	PageInfo *listProjectProjectsProjectConnectionPageInfo       `json:"pageInfo"`
	Nodes    []*listProjectProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetPageInfo returns listProjectProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnection) GetPageInfo() *listProjectProjectsProjectConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listProjectProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnection) GetNodes() []*listProjectProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// listProjectProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type listProjectProjectsProjectConnectionNodesProject struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the project was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The time at which the project was moved into canceled state.
	CanceledAt *time.Time `json:"canceledAt"`
	// The project's color.
	Color *string `json:"color"`
	// The time at which the project was moved into completed state.
	CompletedAt *time.Time `json:"completedAt"`
	// The number of completed issues in the project after each week.
	CompletedIssueCountHistory []*float64 `json:"completedIssueCountHistory"`
	// The number of completed estimation points after each week.
	CompletedScopeHistory []*float64 `json:"completedScopeHistory"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The project's description.
	Description *string `json:"description"`
	// The icon of the project.
	Icon *string `json:"icon"`
	// The number of in progress estimation points after each week.
	InProgressScopeHistory []*float64 `json:"inProgressScopeHistory"`
	// The total number of issues in the project after each week.
	IssueCountHistory []*float64 `json:"issueCountHistory"`
	// The project's name.
	Name *string `json:"name"`
	// The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
	Progress *float64 `json:"progress"`
	// The time until which project update reminders are paused.
	ProjectUpdateRemindersPausedUntilAt *time.Time `json:"projectUpdateRemindersPausedUntilAt"`
	// The overall scope (total estimate points) of the project.
	Scope *float64 `json:"scope"`
	// The total number of estimation points after each week.
	ScopeHistory []*float64 `json:"scopeHistory"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The project's unique URL slug.
	SlugId *string `json:"slugId"`
	// The sort order for the project within the organization.
	SortOrder *float64 `json:"sortOrder"`
	// [Internal] The estimated start date of the project.
	StartDate *time.Time `json:"startDate"`
	// The time at which the project was moved into started state.
	StartedAt *time.Time `json:"startedAt"`
	// The type of the state.
	State *string `json:"state"`
	// The estimated completion date of the project.
	TargetDate *time.Time `json:"targetDate"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Project URL.
	Url *string `json:"url"`
	// The project was created based on this issue.
	ConvertedFromIssue *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue `json:"convertedFromIssue"`
	// Settings for all integrations associated with that project.
	IntegrationsSettings *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings `json:"integrationsSettings"`
	// The user who created the project.
	Creator *listProjectProjectsProjectConnectionNodesProjectCreatorUser `json:"creator"`
	// The project lead.
	Lead *listProjectProjectsProjectConnectionNodesProjectLeadUser `json:"lead"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetId() *string { return v.Id }

// GetArchivedAt returns listProjectProjectsProjectConnectionNodesProject.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivedAt returns listProjectProjectsProjectConnectionNodesProject.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetCanceledAt returns listProjectProjectsProjectConnectionNodesProject.CanceledAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCanceledAt() *time.Time {
	return v.CanceledAt
}

// GetColor returns listProjectProjectsProjectConnectionNodesProject.Color, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetColor() *string { return v.Color }

// GetCompletedAt returns listProjectProjectsProjectConnectionNodesProject.CompletedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCompletedAt() *time.Time {
	return v.CompletedAt
}

// GetCompletedIssueCountHistory returns listProjectProjectsProjectConnectionNodesProject.CompletedIssueCountHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCompletedIssueCountHistory() []*float64 {
	return v.CompletedIssueCountHistory
}

// GetCompletedScopeHistory returns listProjectProjectsProjectConnectionNodesProject.CompletedScopeHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCompletedScopeHistory() []*float64 {
	return v.CompletedScopeHistory
}

// GetCreatedAt returns listProjectProjectsProjectConnectionNodesProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listProjectProjectsProjectConnectionNodesProject.Description, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetDescription() *string {
	return v.Description
}

// GetIcon returns listProjectProjectsProjectConnectionNodesProject.Icon, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetIcon() *string { return v.Icon }

// GetInProgressScopeHistory returns listProjectProjectsProjectConnectionNodesProject.InProgressScopeHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetInProgressScopeHistory() []*float64 {
	return v.InProgressScopeHistory
}

// GetIssueCountHistory returns listProjectProjectsProjectConnectionNodesProject.IssueCountHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetIssueCountHistory() []*float64 {
	return v.IssueCountHistory
}

// GetName returns listProjectProjectsProjectConnectionNodesProject.Name, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetName() *string { return v.Name }

// GetProgress returns listProjectProjectsProjectConnectionNodesProject.Progress, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetProgress() *float64 { return v.Progress }

// GetProjectUpdateRemindersPausedUntilAt returns listProjectProjectsProjectConnectionNodesProject.ProjectUpdateRemindersPausedUntilAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetProjectUpdateRemindersPausedUntilAt() *time.Time {
	return v.ProjectUpdateRemindersPausedUntilAt
}

// GetScope returns listProjectProjectsProjectConnectionNodesProject.Scope, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetScope() *float64 { return v.Scope }

// GetScopeHistory returns listProjectProjectsProjectConnectionNodesProject.ScopeHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetScopeHistory() []*float64 {
	return v.ScopeHistory
}

// GetSlackIssueComments returns listProjectProjectsProjectConnectionNodesProject.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listProjectProjectsProjectConnectionNodesProject.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listProjectProjectsProjectConnectionNodesProject.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSlackNewIssue() *bool {
	return v.SlackNewIssue
}

// GetSlugId returns listProjectProjectsProjectConnectionNodesProject.SlugId, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSlugId() *string { return v.SlugId }

// GetSortOrder returns listProjectProjectsProjectConnectionNodesProject.SortOrder, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSortOrder() *float64 {
	return v.SortOrder
}

// GetStartDate returns listProjectProjectsProjectConnectionNodesProject.StartDate, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetStartDate() *time.Time {
	return v.StartDate
}

// GetStartedAt returns listProjectProjectsProjectConnectionNodesProject.StartedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetStartedAt() *time.Time {
	return v.StartedAt
}

// GetState returns listProjectProjectsProjectConnectionNodesProject.State, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetState() *string { return v.State }

// GetTargetDate returns listProjectProjectsProjectConnectionNodesProject.TargetDate, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetTargetDate() *time.Time {
	return v.TargetDate
}

// GetUpdatedAt returns listProjectProjectsProjectConnectionNodesProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listProjectProjectsProjectConnectionNodesProject.Url, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetUrl() *string { return v.Url }

// GetConvertedFromIssue returns listProjectProjectsProjectConnectionNodesProject.ConvertedFromIssue, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetConvertedFromIssue() *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue {
	return v.ConvertedFromIssue
}

// GetIntegrationsSettings returns listProjectProjectsProjectConnectionNodesProject.IntegrationsSettings, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetIntegrationsSettings() *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings {
	return v.IntegrationsSettings
}

// GetCreator returns listProjectProjectsProjectConnectionNodesProject.Creator, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCreator() *listProjectProjectsProjectConnectionNodesProjectCreatorUser {
	return v.Creator
}

// GetLead returns listProjectProjectsProjectConnectionNodesProject.Lead, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetLead() *listProjectProjectsProjectConnectionNodesProjectLeadUser {
	return v.Lead
}

// listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number *float64 `json:"number"`
	// The issue's title.
	Title *string `json:"title"`
	// The issue's description in markdown format.
	Description *string `json:"description"`
	// The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
	Priority *float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate *float64 `json:"estimate"`
	// The order of the item in relation to other items in the organization.
	SortOrder *float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt *time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt *time.Time `json:"completedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt *time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt *time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate *time.Time `json:"dueDate"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed *bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt *time.Time `json:"snoozedUntilAt"`
	// Previous identifiers of the issue if it has been moved between teams.
	PreviousIdentifiers []*string `json:"previousIdentifiers"`
	// The order of the item in the sub-issue list. Only set if the issue has a parent.
	SubIssueSortOrder *float64 `json:"subIssueSortOrder"`
	// Label for the priority.
	PriorityLabel *string `json:"priorityLabel"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier *string `json:"identifier"`
	// Issue URL.
	Url *string `json:"url"`
	// Suggested branch name for the issue.
	BranchName *string `json:"branchName"`
	// Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
	CustomerTicketCount *int `json:"customerTicketCount"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetId() *string {
	return v.Id
}

// GetCreatedAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetArchivedAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetNumber returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Number, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetNumber() *float64 {
	return v.Number
}

// GetTitle returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Title, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetTitle() *string {
	return v.Title
}

// GetDescription returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Description, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetDescription() *string {
	return v.Description
}

// GetPriority returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Priority, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetPriority() *float64 {
	return v.Priority
}

// GetEstimate returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Estimate, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetEstimate() *float64 {
	return v.Estimate
}

// GetSortOrder returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetSortOrder() *float64 {
	return v.SortOrder
}

// GetStartedAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetStartedAt() *time.Time {
	return v.StartedAt
}

// GetCompletedAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetCompletedAt() *time.Time {
	return v.CompletedAt
}

// GetCanceledAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetCanceledAt() *time.Time {
	return v.CanceledAt
}

// GetAutoClosedAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetAutoClosedAt() *time.Time {
	return v.AutoClosedAt
}

// GetAutoArchivedAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetDueDate returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.DueDate, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetDueDate() *time.Time {
	return v.DueDate
}

// GetTrashed returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Trashed, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetTrashed() *bool {
	return v.Trashed
}

// GetSnoozedUntilAt returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetSnoozedUntilAt() *time.Time {
	return v.SnoozedUntilAt
}

// GetPreviousIdentifiers returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.PreviousIdentifiers, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetPreviousIdentifiers() []*string {
	return v.PreviousIdentifiers
}

// GetSubIssueSortOrder returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.SubIssueSortOrder, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetSubIssueSortOrder() *float64 {
	return v.SubIssueSortOrder
}

// GetPriorityLabel returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.PriorityLabel, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetPriorityLabel() *string {
	return v.PriorityLabel
}

// GetIdentifier returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Identifier, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetIdentifier() *string {
	return v.Identifier
}

// GetUrl returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Url, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetUrl() *string {
	return v.Url
}

// GetBranchName returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.BranchName, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetBranchName() *string {
	return v.BranchName
}

// GetCustomerTicketCount returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.CustomerTicketCount, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetCustomerTicketCount() *int {
	return v.CustomerTicketCount
}

// listProjectProjectsProjectConnectionNodesProjectCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listProjectProjectsProjectConnectionNodesProjectCreatorUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetId() *string { return v.Id }

// GetActive returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Active, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetActive() *bool {
	return v.Active
}

// GetAdmin returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Admin, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetAdmin() *bool {
	return v.Admin
}

// GetArchivedAt returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Description, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Email, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetEmail() *string {
	return v.Email
}

// GetGuest returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Guest, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetGuest() *bool {
	return v.Guest
}

// GetInviteHash returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.IsMe, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetIsMe() *bool { return v.IsMe }

// GetLastSeen returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Name, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetName() *string {
	return v.Name
}

// GetStatusEmoji returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Timezone, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Url, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetUrl() *string { return v.Url }

// listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings includes the requested fields of the GraphQL type IntegrationsSettings.
// The GraphQL type's documentation follows.
//
// The configuration of all integrations for a project or a team.
type listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Whether to send a Slack message when a new issue is added to triage.
	SlackIssueAddedToTriage *bool `json:"slackIssueAddedToTriage"`
	// Whether to send a Slack message when a new issue is created for the project or the team.
	SlackIssueCreated *bool `json:"slackIssueCreated"`
	// Whether to send a Slack message when a comment is created on any of the project or team's issues.
	SlackIssueNewComment *bool `json:"slackIssueNewComment"`
	// Whether to send a Slack message when an SLA is breached
	SlackIssueSlaBreached *bool `json:"slackIssueSlaBreached"`
	// Whether to send a Slack message when an SLA is at high risk
	SlackIssueSlaHighRisk *bool `json:"slackIssueSlaHighRisk"`
	// Whether to send a Slack message when any of the project or team's issues has a change in status.
	SlackIssueStatusChangedAll *bool `json:"slackIssueStatusChangedAll"`
	// Whether to send a Slack message when any of the project or team's issues change to completed or cancelled.
	SlackIssueStatusChangedDone *bool `json:"slackIssueStatusChangedDone"`
	// Whether to send a Slack message when a project update is created.
	SlackProjectUpdateCreated *bool `json:"slackProjectUpdateCreated"`
	// Whether to send a new project update to team Slack channels.
	SlackProjectUpdateCreatedToTeam *bool `json:"slackProjectUpdateCreatedToTeam"`
	// Whether to send a new project update to workspace Slack channel.
	SlackProjectUpdateCreatedToWorkspace *bool `json:"slackProjectUpdateCreatedToWorkspace"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.CreatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetSlackIssueAddedToTriage returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackIssueAddedToTriage, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackIssueAddedToTriage() *bool {
	return v.SlackIssueAddedToTriage
}

// GetSlackIssueCreated returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackIssueCreated, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackIssueCreated() *bool {
	return v.SlackIssueCreated
}

// GetSlackIssueNewComment returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackIssueNewComment, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackIssueNewComment() *bool {
	return v.SlackIssueNewComment
}

// GetSlackIssueSlaBreached returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackIssueSlaBreached, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackIssueSlaBreached() *bool {
	return v.SlackIssueSlaBreached
}

// GetSlackIssueSlaHighRisk returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackIssueSlaHighRisk, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackIssueSlaHighRisk() *bool {
	return v.SlackIssueSlaHighRisk
}

// GetSlackIssueStatusChangedAll returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackIssueStatusChangedAll, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackIssueStatusChangedAll() *bool {
	return v.SlackIssueStatusChangedAll
}

// GetSlackIssueStatusChangedDone returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackIssueStatusChangedDone, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackIssueStatusChangedDone() *bool {
	return v.SlackIssueStatusChangedDone
}

// GetSlackProjectUpdateCreated returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackProjectUpdateCreated, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackProjectUpdateCreated() *bool {
	return v.SlackProjectUpdateCreated
}

// GetSlackProjectUpdateCreatedToTeam returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackProjectUpdateCreatedToTeam, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackProjectUpdateCreatedToTeam() *bool {
	return v.SlackProjectUpdateCreatedToTeam
}

// GetSlackProjectUpdateCreatedToWorkspace returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.SlackProjectUpdateCreatedToWorkspace, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetSlackProjectUpdateCreatedToWorkspace() *bool {
	return v.SlackProjectUpdateCreatedToWorkspace
}

// GetUpdatedAt returns listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectIntegrationsSettings) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listProjectProjectsProjectConnectionNodesProjectLeadUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listProjectProjectsProjectConnectionNodesProjectLeadUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetId() *string { return v.Id }

// GetActive returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Active, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetActive() *bool { return v.Active }

// GetAdmin returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Admin, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetAdmin() *bool { return v.Admin }

// GetArchivedAt returns listProjectProjectsProjectConnectionNodesProjectLeadUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listProjectProjectsProjectConnectionNodesProjectLeadUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listProjectProjectsProjectConnectionNodesProjectLeadUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listProjectProjectsProjectConnectionNodesProjectLeadUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listProjectProjectsProjectConnectionNodesProjectLeadUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Description, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listProjectProjectsProjectConnectionNodesProjectLeadUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listProjectProjectsProjectConnectionNodesProjectLeadUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Email, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetEmail() *string { return v.Email }

// GetGuest returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Guest, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetGuest() *bool { return v.Guest }

// GetInviteHash returns listProjectProjectsProjectConnectionNodesProjectLeadUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listProjectProjectsProjectConnectionNodesProjectLeadUser.IsMe, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetIsMe() *bool { return v.IsMe }

// GetLastSeen returns listProjectProjectsProjectConnectionNodesProjectLeadUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Name, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetName() *string { return v.Name }

// GetStatusEmoji returns listProjectProjectsProjectConnectionNodesProjectLeadUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listProjectProjectsProjectConnectionNodesProjectLeadUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listProjectProjectsProjectConnectionNodesProjectLeadUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Timezone, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listProjectProjectsProjectConnectionNodesProjectLeadUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Url, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetUrl() *string { return v.Url }

// listProjectProjectsProjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listProjectProjectsProjectConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listProjectProjectsProjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionPageInfo) GetHasNextPage() *bool { return v.HasNextPage }

// GetEndCursor returns listProjectProjectsProjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// listProjectResponse is returned by listProject on success.
type listProjectResponse struct {
	// All projects.
	Projects *listProjectProjectsProjectConnection `json:"projects"`
}

// GetProjects returns listProjectResponse.Projects, and is useful for accessing the field via an interface.
func (v *listProjectResponse) GetProjects() *listProjectProjectsProjectConnection { return v.Projects }

// listTeamMembershipResponse is returned by listTeamMembership on success.
type listTeamMembershipResponse struct {
	// All team memberships.
	TeamMemberships *listTeamMembershipTeamMembershipsTeamMembershipConnection `json:"teamMemberships"`
}

// GetTeamMemberships returns listTeamMembershipResponse.TeamMemberships, and is useful for accessing the field via an interface.
func (v *listTeamMembershipResponse) GetTeamMemberships() *listTeamMembershipTeamMembershipsTeamMembershipConnection {
	return v.TeamMemberships
}

// listTeamMembershipTeamMembershipsTeamMembershipConnection includes the requested fields of the GraphQL type TeamMembershipConnection.
type listTeamMembershipTeamMembershipsTeamMembershipConnection struct {
	PageInfo *listTeamMembershipTeamMembershipsTeamMembershipConnectionPageInfo              `json:"pageInfo"`
	Nodes    []*listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership `json:"nodes"`
}

// GetPageInfo returns listTeamMembershipTeamMembershipsTeamMembershipConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnection) GetPageInfo() *listTeamMembershipTeamMembershipsTeamMembershipConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listTeamMembershipTeamMembershipsTeamMembershipConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnection) GetNodes() []*listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership {
	return v.Nodes
}

// listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership includes the requested fields of the GraphQL type TeamMembership.
// The GraphQL type's documentation follows.
//
// Defines the membership of a user to a team.
type listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Whether the user is the owner of the team
	Owner *bool `json:"owner"`
	// The order of the item in the users team list.
	SortOrder *float64 `json:"sortOrder"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The team that the membership is associated with.
	Team *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam `json:"team"`
	// The user that the membership is associated with.
	User *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser `json:"user"`
}

// GetId returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership.Id, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetOwner returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership.Owner, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership) GetOwner() *bool {
	return v.Owner
}

// GetSortOrder returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership.SortOrder, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership) GetSortOrder() *float64 {
	return v.SortOrder
}

// GetUpdatedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetTeam returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership.Team, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership) GetTeam() *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam {
	return v.Team
}

// GetUser returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership.User, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembership) GetUser() *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser {
	return v.User
}

// listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod *float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
	AutoCloseStateId *string `json:"autoCloseStateId"`
	// The team's color.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Calendar feed URL (iCal) for cycles.
	CycleCalenderUrl *string `json:"cycleCalenderUrl"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime *float64 `json:"cycleCooldownTime"`
	// The duration of a cycle in weeks.
	CycleDuration *float64 `json:"cycleDuration"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted *bool `json:"cycleIssueAutoAssignCompleted"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted *bool `json:"cycleIssueAutoAssignStarted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive *bool `json:"cycleLockToActive"`
	// The day of the week that a new cycle starts.
	CycleStartDay *float64 `json:"cycleStartDay"`
	// Whether the team uses cycles.
	CyclesEnabled *bool `json:"cyclesEnabled"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate *float64 `json:"defaultIssueEstimate"`
	// The id of the default template to use for new issues created by members of the team.
	DefaultTemplateForMembersId *string `json:"defaultTemplateForMembersId"`
	// The id of the default template to use for new issues created by non-members of the team.
	DefaultTemplateForNonMembersId *string `json:"defaultTemplateForNonMembersId"`
	// The team's description.
	Description *string `json:"description"`
	// Whether to group recent issue history entries.
	GroupIssueHistory *bool `json:"groupIssueHistory"`
	// The icon of the team.
	Icon *string `json:"icon"`
	// Unique hash for the team to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero *bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended *bool `json:"issueEstimationExtended"`
	// The issue estimation type to use.
	IssueEstimationType *string `json:"issueEstimationType"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst *bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom *bool `json:"issueSortOrderDefaultToBottom"`
	// The team's unique key. The key is used in URLs.
	Key *string `json:"key"`
	// The team's name.
	Name *string `json:"name"`
	// Whether the team is private or not.
	Private *bool `json:"private"`
	// Whether an issue needs to have a priority set before leaving triage
	RequirePriorityToLeaveTriage *bool `json:"requirePriorityToLeaveTriage"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone *string `json:"timezone"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled *bool `json:"triageEnabled"`
	// How many upcoming cycles to create.
	UpcomingCycleCount *float64 `json:"upcomingCycleCount"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.Id, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivePeriod returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetAutoArchivePeriod() *float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetAutoClosePeriod() *float64 {
	return v.AutoClosePeriod
}

// GetAutoCloseStateId returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetAutoCloseStateId() *string {
	return v.AutoCloseStateId
}

// GetColor returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.Color, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCycleCalenderUrl returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CycleCalenderUrl, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCycleCalenderUrl() *string {
	return v.CycleCalenderUrl
}

// GetCycleCooldownTime returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCycleCooldownTime() *float64 {
	return v.CycleCooldownTime
}

// GetCycleDuration returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCycleDuration() *float64 {
	return v.CycleDuration
}

// GetCycleIssueAutoAssignCompleted returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCycleIssueAutoAssignCompleted() *bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleIssueAutoAssignStarted returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCycleIssueAutoAssignStarted() *bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleLockToActive returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCycleLockToActive() *bool {
	return v.CycleLockToActive
}

// GetCycleStartDay returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCycleStartDay() *float64 {
	return v.CycleStartDay
}

// GetCyclesEnabled returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetCyclesEnabled() *bool {
	return v.CyclesEnabled
}

// GetDefaultIssueEstimate returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetDefaultIssueEstimate() *float64 {
	return v.DefaultIssueEstimate
}

// GetDefaultTemplateForMembersId returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetDefaultTemplateForMembersId() *string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetDefaultTemplateForNonMembersId() *string {
	return v.DefaultTemplateForNonMembersId
}

// GetDescription returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.Description, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetDescription() *string {
	return v.Description
}

// GetGroupIssueHistory returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetGroupIssueHistory() *bool {
	return v.GroupIssueHistory
}

// GetIcon returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.Icon, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetIcon() *string {
	return v.Icon
}

// GetInviteHash returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.InviteHash, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetInviteHash() *string {
	return v.InviteHash
}

// GetIssueEstimationAllowZero returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetIssueEstimationAllowZero() *bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetIssueEstimationExtended() *bool {
	return v.IssueEstimationExtended
}

// GetIssueEstimationType returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetIssueEstimationType() *string {
	return v.IssueEstimationType
}

// GetIssueOrderingNoPriorityFirst returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetIssueOrderingNoPriorityFirst() *bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueSortOrderDefaultToBottom returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetIssueSortOrderDefaultToBottom() *bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetKey returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.Key, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetKey() *string {
	return v.Key
}

// GetName returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.Name, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetName() *string {
	return v.Name
}

// GetPrivate returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.Private, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetPrivate() *bool {
	return v.Private
}

// GetRequirePriorityToLeaveTriage returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetRequirePriorityToLeaveTriage() *bool {
	return v.RequirePriorityToLeaveTriage
}

// GetSlackIssueComments returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetSlackNewIssue() *bool {
	return v.SlackNewIssue
}

// GetTimezone returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.Timezone, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetTimezone() *string {
	return v.Timezone
}

// GetTriageEnabled returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetTriageEnabled() *bool {
	return v.TriageEnabled
}

// GetUpcomingCycleCount returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetUpcomingCycleCount() *float64 {
	return v.UpcomingCycleCount
}

// GetUpdatedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipTeam) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
}

// GetId returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Id, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetId() *string {
	return v.Id
}

// GetActive returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Active, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetActive() *bool {
	return v.Active
}

// GetAdmin returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Admin, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetAdmin() *bool {
	return v.Admin
}

// GetArchivedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAvatarUrl returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetAvatarUrl() *string {
	return v.AvatarUrl
}

// GetCalendarHash returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetCalendarHash() *string {
	return v.CalendarHash
}

// GetCreatedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Description, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetDescription() *string {
	return v.Description
}

// GetDisableReason returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetDisableReason() *string {
	return v.DisableReason
}

// GetDisplayName returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetDisplayName() *string {
	return v.DisplayName
}

// GetEmail returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Email, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetEmail() *string {
	return v.Email
}

// GetGuest returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Guest, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetGuest() *bool {
	return v.Guest
}

// GetInviteHash returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetInviteHash() *string {
	return v.InviteHash
}

// GetIsMe returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.IsMe, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetIsMe() *bool {
	return v.IsMe
}

// GetLastSeen returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetLastSeen() *time.Time {
	return v.LastSeen
}

// GetName returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Name, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetName() *string {
	return v.Name
}

// GetStatusEmoji returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetStatusEmoji() *string {
	return v.StatusEmoji
}

// GetStatusLabel returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetStatusLabel() *string {
	return v.StatusLabel
}

// GetStatusUntilAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetStatusUntilAt() *time.Time {
	return v.StatusUntilAt
}

// GetTimezone returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Timezone, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetTimezone() *string {
	return v.Timezone
}

// GetUpdatedAt returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrl returns listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser.Url, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionNodesTeamMembershipUser) GetUrl() *string {
	return v.Url
}

// listTeamMembershipTeamMembershipsTeamMembershipConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listTeamMembershipTeamMembershipsTeamMembershipConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listTeamMembershipTeamMembershipsTeamMembershipConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionPageInfo) GetHasNextPage() *bool {
	return v.HasNextPage
}

// GetEndCursor returns listTeamMembershipTeamMembershipsTeamMembershipConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listTeamMembershipTeamMembershipsTeamMembershipConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// listTeamResponse is returned by listTeam on success.
type listTeamResponse struct {
	// All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user.
	Teams *listTeamTeamsTeamConnection `json:"teams"`
}

// GetTeams returns listTeamResponse.Teams, and is useful for accessing the field via an interface.
func (v *listTeamResponse) GetTeams() *listTeamTeamsTeamConnection { return v.Teams }

// listTeamTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
type listTeamTeamsTeamConnection struct {
	PageInfo *listTeamTeamsTeamConnectionPageInfo    `json:"pageInfo"`
	Nodes    []*listTeamTeamsTeamConnectionNodesTeam `json:"nodes"`
}

// GetPageInfo returns listTeamTeamsTeamConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnection) GetPageInfo() *listTeamTeamsTeamConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listTeamTeamsTeamConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnection) GetNodes() []*listTeamTeamsTeamConnectionNodesTeam {
	return v.Nodes
}

// listTeamTeamsTeamConnectionNodesTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listTeamTeamsTeamConnectionNodesTeam struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod *float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
	AutoCloseStateId *string `json:"autoCloseStateId"`
	// The team's color.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Calendar feed URL (iCal) for cycles.
	CycleCalenderUrl *string `json:"cycleCalenderUrl"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime *float64 `json:"cycleCooldownTime"`
	// The duration of a cycle in weeks.
	CycleDuration *float64 `json:"cycleDuration"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted *bool `json:"cycleIssueAutoAssignCompleted"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted *bool `json:"cycleIssueAutoAssignStarted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive *bool `json:"cycleLockToActive"`
	// The day of the week that a new cycle starts.
	CycleStartDay *float64 `json:"cycleStartDay"`
	// Whether the team uses cycles.
	CyclesEnabled *bool `json:"cyclesEnabled"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate *float64 `json:"defaultIssueEstimate"`
	// The id of the default template to use for new issues created by members of the team.
	DefaultTemplateForMembersId *string `json:"defaultTemplateForMembersId"`
	// The id of the default template to use for new issues created by non-members of the team.
	DefaultTemplateForNonMembersId *string `json:"defaultTemplateForNonMembersId"`
	// The team's description.
	Description *string `json:"description"`
	// Whether to group recent issue history entries.
	GroupIssueHistory *bool `json:"groupIssueHistory"`
	// The icon of the team.
	Icon *string `json:"icon"`
	// Unique hash for the team to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero *bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended *bool `json:"issueEstimationExtended"`
	// The issue estimation type to use.
	IssueEstimationType *string `json:"issueEstimationType"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst *bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom *bool `json:"issueSortOrderDefaultToBottom"`
	// The team's unique key. The key is used in URLs.
	Key *string `json:"key"`
	// The team's name.
	Name *string `json:"name"`
	// Whether the team is private or not.
	Private *bool `json:"private"`
	// Whether an issue needs to have a priority set before leaving triage
	RequirePriorityToLeaveTriage *bool `json:"requirePriorityToLeaveTriage"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone *string `json:"timezone"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled *bool `json:"triageEnabled"`
	// How many upcoming cycles to create.
	UpcomingCycleCount *float64 `json:"upcomingCycleCount"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Team's currently active cycle.
	ActiveCycle *listTeamTeamsTeamConnectionNodesTeamActiveCycle `json:"activeCycle"`
	// The default workflow state into which issues are set when they are opened by team members.
	DefaultIssueState *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState `json:"defaultIssueState"`
	// The default template to use for new issues created by members of the team.
	DefaultTemplateForMembers *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate `json:"defaultTemplateForMembers"`
	// The default template to use for new issues created by non-members of the team.
	DefaultTemplateForNonMembers *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate `json:"defaultTemplateForNonMembers"`
	// The workflow state into which issues are moved when a PR has been opened as draft.
	DraftWorkflowState *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState `json:"draftWorkflowState"`
	// Settings for all integrations associated with that team.
	IntegrationsSettings *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings `json:"integrationsSettings"`
	// The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state.
	MarkedAsDuplicateWorkflowState *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState `json:"markedAsDuplicateWorkflowState"`
	// The organization that the team is associated with.
	Organization *listTeamTeamsTeamConnectionNodesTeamOrganization `json:"organization"`
	// The workflow state into which issues are moved when a review has been requested for the PR.
	ReviewWorkflowState *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState `json:"reviewWorkflowState"`
	// The workflow state into which issues are moved when a PR has been opened.
	StartWorkflowState *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState `json:"startWorkflowState"`
	// The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled.
	TriageIssueState *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState `json:"triageIssueState"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeam.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetId() *string { return v.Id }

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeam.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetArchivedAt() *time.Time { return v.ArchivedAt }

// GetAutoArchivePeriod returns listTeamTeamsTeamConnectionNodesTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetAutoArchivePeriod() *float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns listTeamTeamsTeamConnectionNodesTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetAutoClosePeriod() *float64 {
	return v.AutoClosePeriod
}

// GetAutoCloseStateId returns listTeamTeamsTeamConnectionNodesTeam.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetAutoCloseStateId() *string {
	return v.AutoCloseStateId
}

// GetColor returns listTeamTeamsTeamConnectionNodesTeam.Color, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetColor() *string { return v.Color }

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeam.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetCycleCalenderUrl returns listTeamTeamsTeamConnectionNodesTeam.CycleCalenderUrl, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCycleCalenderUrl() *string {
	return v.CycleCalenderUrl
}

// GetCycleCooldownTime returns listTeamTeamsTeamConnectionNodesTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCycleCooldownTime() *float64 {
	return v.CycleCooldownTime
}

// GetCycleDuration returns listTeamTeamsTeamConnectionNodesTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCycleDuration() *float64 { return v.CycleDuration }

// GetCycleIssueAutoAssignCompleted returns listTeamTeamsTeamConnectionNodesTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCycleIssueAutoAssignCompleted() *bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleIssueAutoAssignStarted returns listTeamTeamsTeamConnectionNodesTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCycleIssueAutoAssignStarted() *bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleLockToActive returns listTeamTeamsTeamConnectionNodesTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCycleLockToActive() *bool {
	return v.CycleLockToActive
}

// GetCycleStartDay returns listTeamTeamsTeamConnectionNodesTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCycleStartDay() *float64 { return v.CycleStartDay }

// GetCyclesEnabled returns listTeamTeamsTeamConnectionNodesTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetCyclesEnabled() *bool { return v.CyclesEnabled }

// GetDefaultIssueEstimate returns listTeamTeamsTeamConnectionNodesTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetDefaultIssueEstimate() *float64 {
	return v.DefaultIssueEstimate
}

// GetDefaultTemplateForMembersId returns listTeamTeamsTeamConnectionNodesTeam.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetDefaultTemplateForMembersId() *string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns listTeamTeamsTeamConnectionNodesTeam.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetDefaultTemplateForNonMembersId() *string {
	return v.DefaultTemplateForNonMembersId
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeam.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetDescription() *string { return v.Description }

// GetGroupIssueHistory returns listTeamTeamsTeamConnectionNodesTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetGroupIssueHistory() *bool {
	return v.GroupIssueHistory
}

// GetIcon returns listTeamTeamsTeamConnectionNodesTeam.Icon, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetIcon() *string { return v.Icon }

// GetInviteHash returns listTeamTeamsTeamConnectionNodesTeam.InviteHash, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetInviteHash() *string { return v.InviteHash }

// GetIssueEstimationAllowZero returns listTeamTeamsTeamConnectionNodesTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetIssueEstimationAllowZero() *bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns listTeamTeamsTeamConnectionNodesTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetIssueEstimationExtended() *bool {
	return v.IssueEstimationExtended
}

// GetIssueEstimationType returns listTeamTeamsTeamConnectionNodesTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetIssueEstimationType() *string {
	return v.IssueEstimationType
}

// GetIssueOrderingNoPriorityFirst returns listTeamTeamsTeamConnectionNodesTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetIssueOrderingNoPriorityFirst() *bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueSortOrderDefaultToBottom returns listTeamTeamsTeamConnectionNodesTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetIssueSortOrderDefaultToBottom() *bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetKey returns listTeamTeamsTeamConnectionNodesTeam.Key, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetKey() *string { return v.Key }

// GetName returns listTeamTeamsTeamConnectionNodesTeam.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetName() *string { return v.Name }

// GetPrivate returns listTeamTeamsTeamConnectionNodesTeam.Private, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetPrivate() *bool { return v.Private }

// GetRequirePriorityToLeaveTriage returns listTeamTeamsTeamConnectionNodesTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetRequirePriorityToLeaveTriage() *bool {
	return v.RequirePriorityToLeaveTriage
}

// GetSlackIssueComments returns listTeamTeamsTeamConnectionNodesTeam.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listTeamTeamsTeamConnectionNodesTeam.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listTeamTeamsTeamConnectionNodesTeam.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetSlackNewIssue() *bool { return v.SlackNewIssue }

// GetTimezone returns listTeamTeamsTeamConnectionNodesTeam.Timezone, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetTimezone() *string { return v.Timezone }

// GetTriageEnabled returns listTeamTeamsTeamConnectionNodesTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetTriageEnabled() *bool { return v.TriageEnabled }

// GetUpcomingCycleCount returns listTeamTeamsTeamConnectionNodesTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetUpcomingCycleCount() *float64 {
	return v.UpcomingCycleCount
}

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeam.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetActiveCycle returns listTeamTeamsTeamConnectionNodesTeam.ActiveCycle, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetActiveCycle() *listTeamTeamsTeamConnectionNodesTeamActiveCycle {
	return v.ActiveCycle
}

// GetDefaultIssueState returns listTeamTeamsTeamConnectionNodesTeam.DefaultIssueState, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetDefaultIssueState() *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState {
	return v.DefaultIssueState
}

// GetDefaultTemplateForMembers returns listTeamTeamsTeamConnectionNodesTeam.DefaultTemplateForMembers, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetDefaultTemplateForMembers() *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate {
	return v.DefaultTemplateForMembers
}

// GetDefaultTemplateForNonMembers returns listTeamTeamsTeamConnectionNodesTeam.DefaultTemplateForNonMembers, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetDefaultTemplateForNonMembers() *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate {
	return v.DefaultTemplateForNonMembers
}

// GetDraftWorkflowState returns listTeamTeamsTeamConnectionNodesTeam.DraftWorkflowState, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetDraftWorkflowState() *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState {
	return v.DraftWorkflowState
}

// GetIntegrationsSettings returns listTeamTeamsTeamConnectionNodesTeam.IntegrationsSettings, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetIntegrationsSettings() *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings {
	return v.IntegrationsSettings
}

// GetMarkedAsDuplicateWorkflowState returns listTeamTeamsTeamConnectionNodesTeam.MarkedAsDuplicateWorkflowState, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetMarkedAsDuplicateWorkflowState() *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState {
	return v.MarkedAsDuplicateWorkflowState
}

// GetOrganization returns listTeamTeamsTeamConnectionNodesTeam.Organization, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetOrganization() *listTeamTeamsTeamConnectionNodesTeamOrganization {
	return v.Organization
}

// GetReviewWorkflowState returns listTeamTeamsTeamConnectionNodesTeam.ReviewWorkflowState, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetReviewWorkflowState() *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState {
	return v.ReviewWorkflowState
}

// GetStartWorkflowState returns listTeamTeamsTeamConnectionNodesTeam.StartWorkflowState, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetStartWorkflowState() *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState {
	return v.StartWorkflowState
}

// GetTriageIssueState returns listTeamTeamsTeamConnectionNodesTeam.TriageIssueState, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeam) GetTriageIssueState() *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState {
	return v.TriageIssueState
}

// listTeamTeamsTeamConnectionNodesTeamActiveCycle includes the requested fields of the GraphQL type Cycle.
// The GraphQL type's documentation follows.
//
// A set of issues to be resolved in a specified amount of time.
type listTeamTeamsTeamConnectionNodesTeamActiveCycle struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the cycle was automatically archived by the auto pruning process.
	AutoArchivedAt *time.Time `json:"autoArchivedAt"`
	// The completion time of the cycle. If null, the cycle hasn't been completed.
	CompletedAt *time.Time `json:"completedAt"`
	// The number of completed issues in the cycle after each day.
	CompletedIssueCountHistory []*float64 `json:"completedIssueCountHistory"`
	// The number of completed estimation points after each day.
	CompletedScopeHistory []*float64 `json:"completedScopeHistory"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The cycle's description.
	Description *string `json:"description"`
	// The end time of the cycle.
	EndsAt *time.Time `json:"endsAt"`
	// The number of in progress estimation points after each day.
	InProgressScopeHistory []*float64 `json:"inProgressScopeHistory"`
	// The total number of issues in the cycle after each day.
	IssueCountHistory []*float64 `json:"issueCountHistory"`
	// The custom name of the cycle.
	Name *string `json:"name"`
	// The number of the cycle.
	Number *float64 `json:"number"`
	// The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
	Progress *float64 `json:"progress"`
	// The total number of estimation points after each day.
	ScopeHistory []*float64 `json:"scopeHistory"`
	// The start time of the cycle.
	StartsAt *time.Time `json:"startsAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetId() *string { return v.Id }

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivedAt returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetAutoArchivedAt() *time.Time {
	return v.AutoArchivedAt
}

// GetCompletedAt returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.CompletedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetCompletedAt() *time.Time {
	return v.CompletedAt
}

// GetCompletedIssueCountHistory returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.CompletedIssueCountHistory, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetCompletedIssueCountHistory() []*float64 {
	return v.CompletedIssueCountHistory
}

// GetCompletedScopeHistory returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.CompletedScopeHistory, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetCompletedScopeHistory() []*float64 {
	return v.CompletedScopeHistory
}

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetDescription() *string {
	return v.Description
}

// GetEndsAt returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.EndsAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetEndsAt() *time.Time { return v.EndsAt }

// GetInProgressScopeHistory returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.InProgressScopeHistory, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetInProgressScopeHistory() []*float64 {
	return v.InProgressScopeHistory
}

// GetIssueCountHistory returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.IssueCountHistory, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetIssueCountHistory() []*float64 {
	return v.IssueCountHistory
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetName() *string { return v.Name }

// GetNumber returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.Number, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetNumber() *float64 { return v.Number }

// GetProgress returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.Progress, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetProgress() *float64 { return v.Progress }

// GetScopeHistory returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.ScopeHistory, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetScopeHistory() []*float64 {
	return v.ScopeHistory
}

// GetStartsAt returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.StartsAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetStartsAt() *time.Time { return v.StartsAt }

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamActiveCycle.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamActiveCycle) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The state's UI color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Description of the state.
	Description *string `json:"description"`
	// The state's name.
	Name *string `json:"name"`
	// The position of the state in the team flow.
	Position *float64 `json:"position"`
	// The type of the state.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetDescription() *string {
	return v.Description
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetName() *string {
	return v.Name
}

// GetPosition returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetPosition() *float64 {
	return v.Position
}

// GetType returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetType() *string {
	return v.Type
}

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultIssueStateWorkflowState) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate includes the requested fields of the GraphQL type Template.
// The GraphQL type's documentation follows.
//
// A template object used for creating entities faster.
type listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Template description.
	Description *string `json:"description"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The entity type this template is for.
	Type *string `json:"type"`
	// The name of the template.
	Name *string `json:"name"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Template data.
	TemplateData *string `json:"templateData"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate) GetDescription() *string {
	return v.Description
}

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetType returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate.Type, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate) GetType() *string {
	return v.Type
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate) GetName() *string {
	return v.Name
}

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetTemplateData returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate.TemplateData, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForMembersTemplate) GetTemplateData() *string {
	return v.TemplateData
}

// listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate includes the requested fields of the GraphQL type Template.
// The GraphQL type's documentation follows.
//
// A template object used for creating entities faster.
type listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Template description.
	Description *string `json:"description"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// The entity type this template is for.
	Type *string `json:"type"`
	// The name of the template.
	Name *string `json:"name"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Template data.
	TemplateData *string `json:"templateData"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate) GetDescription() *string {
	return v.Description
}

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetType returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate.Type, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate) GetType() *string {
	return v.Type
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate) GetName() *string {
	return v.Name
}

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetTemplateData returns listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate.TemplateData, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDefaultTemplateForNonMembersTemplate) GetTemplateData() *string {
	return v.TemplateData
}

// listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The state's UI color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Description of the state.
	Description *string `json:"description"`
	// The state's name.
	Name *string `json:"name"`
	// The position of the state in the team flow.
	Position *float64 `json:"position"`
	// The type of the state.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetId() *string { return v.Id }

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetColor() *string { return v.Color }

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetDescription() *string {
	return v.Description
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetName() *string { return v.Name }

// GetPosition returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetPosition() *float64 {
	return v.Position
}

// GetType returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetType() *string { return v.Type }

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamDraftWorkflowState) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings includes the requested fields of the GraphQL type IntegrationsSettings.
// The GraphQL type's documentation follows.
//
// The configuration of all integrations for a project or a team.
type listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Whether to send a Slack message when a new issue is added to triage.
	SlackIssueAddedToTriage *bool `json:"slackIssueAddedToTriage"`
	// Whether to send a Slack message when a new issue is created for the project or the team.
	SlackIssueCreated *bool `json:"slackIssueCreated"`
	// Whether to send a Slack message when a comment is created on any of the project or team's issues.
	SlackIssueNewComment *bool `json:"slackIssueNewComment"`
	// Whether to send a Slack message when an SLA is breached
	SlackIssueSlaBreached *bool `json:"slackIssueSlaBreached"`
	// Whether to send a Slack message when an SLA is at high risk
	SlackIssueSlaHighRisk *bool `json:"slackIssueSlaHighRisk"`
	// Whether to send a Slack message when any of the project or team's issues has a change in status.
	SlackIssueStatusChangedAll *bool `json:"slackIssueStatusChangedAll"`
	// Whether to send a Slack message when any of the project or team's issues change to completed or cancelled.
	SlackIssueStatusChangedDone *bool `json:"slackIssueStatusChangedDone"`
	// Whether to send a Slack message when a project update is created.
	SlackProjectUpdateCreated *bool `json:"slackProjectUpdateCreated"`
	// Whether to send a new project update to team Slack channels.
	SlackProjectUpdateCreatedToTeam *bool `json:"slackProjectUpdateCreatedToTeam"`
	// Whether to send a new project update to workspace Slack channel.
	SlackProjectUpdateCreatedToWorkspace *bool `json:"slackProjectUpdateCreatedToWorkspace"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetId() *string { return v.Id }

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetSlackIssueAddedToTriage returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackIssueAddedToTriage, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackIssueAddedToTriage() *bool {
	return v.SlackIssueAddedToTriage
}

// GetSlackIssueCreated returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackIssueCreated, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackIssueCreated() *bool {
	return v.SlackIssueCreated
}

// GetSlackIssueNewComment returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackIssueNewComment, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackIssueNewComment() *bool {
	return v.SlackIssueNewComment
}

// GetSlackIssueSlaBreached returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackIssueSlaBreached, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackIssueSlaBreached() *bool {
	return v.SlackIssueSlaBreached
}

// GetSlackIssueSlaHighRisk returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackIssueSlaHighRisk, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackIssueSlaHighRisk() *bool {
	return v.SlackIssueSlaHighRisk
}

// GetSlackIssueStatusChangedAll returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackIssueStatusChangedAll, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackIssueStatusChangedAll() *bool {
	return v.SlackIssueStatusChangedAll
}

// GetSlackIssueStatusChangedDone returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackIssueStatusChangedDone, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackIssueStatusChangedDone() *bool {
	return v.SlackIssueStatusChangedDone
}

// GetSlackProjectUpdateCreated returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackProjectUpdateCreated, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackProjectUpdateCreated() *bool {
	return v.SlackProjectUpdateCreated
}

// GetSlackProjectUpdateCreatedToTeam returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackProjectUpdateCreatedToTeam, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackProjectUpdateCreatedToTeam() *bool {
	return v.SlackProjectUpdateCreatedToTeam
}

// GetSlackProjectUpdateCreatedToWorkspace returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.SlackProjectUpdateCreatedToWorkspace, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetSlackProjectUpdateCreatedToWorkspace() *bool {
	return v.SlackProjectUpdateCreatedToWorkspace
}

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamIntegrationsSettings) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The state's UI color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Description of the state.
	Description *string `json:"description"`
	// The state's name.
	Name *string `json:"name"`
	// The position of the state in the team flow.
	Position *float64 `json:"position"`
	// The type of the state.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetDescription() *string {
	return v.Description
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetName() *string {
	return v.Name
}

// GetPosition returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetPosition() *float64 {
	return v.Position
}

// GetType returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetType() *string {
	return v.Type
}

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamMarkedAsDuplicateWorkflowState) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamTeamsTeamConnectionNodesTeamOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type listTeamTeamsTeamConnectionNodesTeamOrganization struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Allowed authentication providers, empty array means all are allowed
	AllowedAuthServices []*string `json:"allowedAuthServices"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues in the organization.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// The time at which deletion of the organization was requested.
	DeletionRequestedAt *time.Time `json:"deletionRequestedAt"`
	// How git branches are formatted. If null, default formatting will be used.
	GitBranchFormat *string `json:"gitBranchFormat"`
	// Whether the Git integration linkback messages should be sent to private repositories.
	GitLinkbackMessagesEnabled *bool `json:"gitLinkbackMessagesEnabled"`
	// Whether the Git integration linkback messages should be sent to public repositories.
	GitPublicLinkbackMessagesEnabled *bool `json:"gitPublicLinkbackMessagesEnabled"`
	// The organization's logo URL.
	LogoUrl *string `json:"logoUrl"`
	// The organization's name.
	Name *string `json:"name"`
	// Rolling 30-day total upload volume for the organization, in megabytes.
	PeriodUploadVolume *float64 `json:"periodUploadVolume"`
	// Previously used URL keys for the organization (last 3 are kept and redirected).
	PreviousUrlKeys []*string `json:"previousUrlKeys"`
	// The day at which to prompt for project updates.
	ProjectUpdateRemindersDay *Day `json:"projectUpdateRemindersDay"`
	// The hour at which to prompt for project updates.
	ProjectUpdateRemindersHour *float64 `json:"projectUpdateRemindersHour"`
	// The frequency at which to prompt for project updates.
	ProjectUpdatesReminderFrequency *ProjectUpdateReminderFrequency `json:"projectUpdatesReminderFrequency"`
	// The feature release channel the organization belongs to.
	ReleaseChannel *ReleaseChannel `json:"releaseChannel"`
	// Whether the organization is using a roadmap.
	RoadmapEnabled *bool `json:"roadmapEnabled"`
	// Whether SAML authentication is enabled for organization.
	SamlEnabled *bool `json:"samlEnabled"`
	// Whether SCIM provisioning is enabled for organization.
	ScimEnabled *bool `json:"scimEnabled"`
	// The time at which the trial of the plus plan will end.
	TrialEndsAt *time.Time `json:"trialEndsAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The organization's unique URL key.
	UrlKey *string `json:"urlKey"`
	// Number of active users in the organization.
	UserCount *int `json:"userCount"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamOrganization.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetId() *string { return v.Id }

// GetAllowedAuthServices returns listTeamTeamsTeamConnectionNodesTeamOrganization.AllowedAuthServices, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetAllowedAuthServices() []*string {
	return v.AllowedAuthServices
}

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamOrganization.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamOrganization.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listTeamTeamsTeamConnectionNodesTeamOrganization.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDeletionRequestedAt returns listTeamTeamsTeamConnectionNodesTeamOrganization.DeletionRequestedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetDeletionRequestedAt() *time.Time {
	return v.DeletionRequestedAt
}

// GetGitBranchFormat returns listTeamTeamsTeamConnectionNodesTeamOrganization.GitBranchFormat, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetGitBranchFormat() *string {
	return v.GitBranchFormat
}

// GetGitLinkbackMessagesEnabled returns listTeamTeamsTeamConnectionNodesTeamOrganization.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetGitLinkbackMessagesEnabled() *bool {
	return v.GitLinkbackMessagesEnabled
}

// GetGitPublicLinkbackMessagesEnabled returns listTeamTeamsTeamConnectionNodesTeamOrganization.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetGitPublicLinkbackMessagesEnabled() *bool {
	return v.GitPublicLinkbackMessagesEnabled
}

// GetLogoUrl returns listTeamTeamsTeamConnectionNodesTeamOrganization.LogoUrl, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetLogoUrl() *string { return v.LogoUrl }

// GetName returns listTeamTeamsTeamConnectionNodesTeamOrganization.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetName() *string { return v.Name }

// GetPeriodUploadVolume returns listTeamTeamsTeamConnectionNodesTeamOrganization.PeriodUploadVolume, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetPeriodUploadVolume() *float64 {
	return v.PeriodUploadVolume
}

// GetPreviousUrlKeys returns listTeamTeamsTeamConnectionNodesTeamOrganization.PreviousUrlKeys, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetPreviousUrlKeys() []*string {
	return v.PreviousUrlKeys
}

// GetProjectUpdateRemindersDay returns listTeamTeamsTeamConnectionNodesTeamOrganization.ProjectUpdateRemindersDay, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetProjectUpdateRemindersDay() *Day {
	return v.ProjectUpdateRemindersDay
}

// GetProjectUpdateRemindersHour returns listTeamTeamsTeamConnectionNodesTeamOrganization.ProjectUpdateRemindersHour, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetProjectUpdateRemindersHour() *float64 {
	return v.ProjectUpdateRemindersHour
}

// GetProjectUpdatesReminderFrequency returns listTeamTeamsTeamConnectionNodesTeamOrganization.ProjectUpdatesReminderFrequency, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetProjectUpdatesReminderFrequency() *ProjectUpdateReminderFrequency {
	return v.ProjectUpdatesReminderFrequency
}

// GetReleaseChannel returns listTeamTeamsTeamConnectionNodesTeamOrganization.ReleaseChannel, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetReleaseChannel() *ReleaseChannel {
	return v.ReleaseChannel
}

// GetRoadmapEnabled returns listTeamTeamsTeamConnectionNodesTeamOrganization.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetRoadmapEnabled() *bool {
	return v.RoadmapEnabled
}

// GetSamlEnabled returns listTeamTeamsTeamConnectionNodesTeamOrganization.SamlEnabled, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetSamlEnabled() *bool {
	return v.SamlEnabled
}

// GetScimEnabled returns listTeamTeamsTeamConnectionNodesTeamOrganization.ScimEnabled, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetScimEnabled() *bool {
	return v.ScimEnabled
}

// GetTrialEndsAt returns listTeamTeamsTeamConnectionNodesTeamOrganization.TrialEndsAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetTrialEndsAt() *time.Time {
	return v.TrialEndsAt
}

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamOrganization.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrlKey returns listTeamTeamsTeamConnectionNodesTeamOrganization.UrlKey, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetUrlKey() *string { return v.UrlKey }

// GetUserCount returns listTeamTeamsTeamConnectionNodesTeamOrganization.UserCount, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamOrganization) GetUserCount() *int { return v.UserCount }

// listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The state's UI color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Description of the state.
	Description *string `json:"description"`
	// The state's name.
	Name *string `json:"name"`
	// The position of the state in the team flow.
	Position *float64 `json:"position"`
	// The type of the state.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetId() *string { return v.Id }

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetColor() *string { return v.Color }

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetDescription() *string {
	return v.Description
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetName() *string { return v.Name }

// GetPosition returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetPosition() *float64 {
	return v.Position
}

// GetType returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetType() *string { return v.Type }

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamReviewWorkflowState) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamTeamsTeamConnectionNodesTeamStartWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listTeamTeamsTeamConnectionNodesTeamStartWorkflowState struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The state's UI color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Description of the state.
	Description *string `json:"description"`
	// The state's name.
	Name *string `json:"name"`
	// The position of the state in the team flow.
	Position *float64 `json:"position"`
	// The type of the state.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetId() *string { return v.Id }

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetColor() *string { return v.Color }

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetDescription() *string {
	return v.Description
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetName() *string { return v.Name }

// GetPosition returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetPosition() *float64 {
	return v.Position
}

// GetType returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetType() *string { return v.Type }

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamStartWorkflowState.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamStartWorkflowState) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The state's UI color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Description of the state.
	Description *string `json:"description"`
	// The state's name.
	Name *string `json:"name"`
	// The position of the state in the team flow.
	Position *float64 `json:"position"`
	// The type of the state.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.CreatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetDescription() *string {
	return v.Description
}

// GetName returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetName() *string {
	return v.Name
}

// GetPosition returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetPosition() *float64 {
	return v.Position
}

// GetType returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetType() *string {
	return v.Type
}

// GetUpdatedAt returns listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionNodesTeamTriageIssueStateWorkflowState) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listTeamTeamsTeamConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listTeamTeamsTeamConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listTeamTeamsTeamConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionPageInfo) GetHasNextPage() *bool { return v.HasNextPage }

// GetEndCursor returns listTeamTeamsTeamConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listTeamTeamsTeamConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// listUserResponse is returned by listUser on success.
type listUserResponse struct {
	// All users for the organization.
	Users *listUserUsersUserConnection `json:"users"`
}

// GetUsers returns listUserResponse.Users, and is useful for accessing the field via an interface.
func (v *listUserResponse) GetUsers() *listUserUsersUserConnection { return v.Users }

// listUserUsersUserConnection includes the requested fields of the GraphQL type UserConnection.
type listUserUsersUserConnection struct {
	PageInfo *listUserUsersUserConnectionPageInfo    `json:"pageInfo"`
	Nodes    []*listUserUsersUserConnectionNodesUser `json:"nodes"`
}

// GetPageInfo returns listUserUsersUserConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnection) GetPageInfo() *listUserUsersUserConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listUserUsersUserConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnection) GetNodes() []*listUserUsersUserConnectionNodesUser {
	return v.Nodes
}

// listUserUsersUserConnectionNodesUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listUserUsersUserConnectionNodesUser struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Whether the user account is active or disabled (suspended).
	Active *bool `json:"active"`
	// Whether the user is an organization administrator.
	Admin *bool `json:"admin"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// An URL to the user's avatar image.
	AvatarUrl *string `json:"avatarUrl"`
	// [DEPRECATED] Hash for the user to be used in calendar URLs.
	CalendarHash *string `json:"calendarHash"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues created.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// A short description of the user, either its title or bio.
	Description *string `json:"description"`
	// Reason why is the account disabled.
	DisableReason *string `json:"disableReason"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName *string `json:"displayName"`
	// The user's email address.
	Email *string `json:"email"`
	// Whether the user is a guest in the workspace and limited to accessing a subset of teams.
	Guest *bool `json:"guest"`
	// Unique hash for the user to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether the user is the currently authenticated user.
	IsMe *bool `json:"isMe"`
	// The last time the user was seen online. If null, the user is currently online.
	LastSeen *time.Time `json:"lastSeen"`
	// The user's full name.
	Name *string `json:"name"`
	// The emoji to represent the user current status.
	StatusEmoji *string `json:"statusEmoji"`
	// The label of the user current status.
	StatusLabel *string `json:"statusLabel"`
	// A date at which the user current status should be cleared.
	StatusUntilAt *time.Time `json:"statusUntilAt"`
	// The local timezone of the user.
	Timezone *string `json:"timezone"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// User's profile URL.
	Url *string `json:"url"`
	// Organization the user belongs to.
	Organization *listUserUsersUserConnectionNodesUserOrganization `json:"organization"`
}

// GetId returns listUserUsersUserConnectionNodesUser.Id, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetId() *string { return v.Id }

// GetActive returns listUserUsersUserConnectionNodesUser.Active, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetActive() *bool { return v.Active }

// GetAdmin returns listUserUsersUserConnectionNodesUser.Admin, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetAdmin() *bool { return v.Admin }

// GetArchivedAt returns listUserUsersUserConnectionNodesUser.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetArchivedAt() *time.Time { return v.ArchivedAt }

// GetAvatarUrl returns listUserUsersUserConnectionNodesUser.AvatarUrl, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetAvatarUrl() *string { return v.AvatarUrl }

// GetCalendarHash returns listUserUsersUserConnectionNodesUser.CalendarHash, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetCalendarHash() *string { return v.CalendarHash }

// GetCreatedAt returns listUserUsersUserConnectionNodesUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetCreatedIssueCount returns listUserUsersUserConnectionNodesUser.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDescription returns listUserUsersUserConnectionNodesUser.Description, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetDescription() *string { return v.Description }

// GetDisableReason returns listUserUsersUserConnectionNodesUser.DisableReason, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetDisableReason() *string { return v.DisableReason }

// GetDisplayName returns listUserUsersUserConnectionNodesUser.DisplayName, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetDisplayName() *string { return v.DisplayName }

// GetEmail returns listUserUsersUserConnectionNodesUser.Email, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetEmail() *string { return v.Email }

// GetGuest returns listUserUsersUserConnectionNodesUser.Guest, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetGuest() *bool { return v.Guest }

// GetInviteHash returns listUserUsersUserConnectionNodesUser.InviteHash, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetInviteHash() *string { return v.InviteHash }

// GetIsMe returns listUserUsersUserConnectionNodesUser.IsMe, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetIsMe() *bool { return v.IsMe }

// GetLastSeen returns listUserUsersUserConnectionNodesUser.LastSeen, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetLastSeen() *time.Time { return v.LastSeen }

// GetName returns listUserUsersUserConnectionNodesUser.Name, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetName() *string { return v.Name }

// GetStatusEmoji returns listUserUsersUserConnectionNodesUser.StatusEmoji, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetStatusEmoji() *string { return v.StatusEmoji }

// GetStatusLabel returns listUserUsersUserConnectionNodesUser.StatusLabel, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetStatusLabel() *string { return v.StatusLabel }

// GetStatusUntilAt returns listUserUsersUserConnectionNodesUser.StatusUntilAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetStatusUntilAt() *time.Time { return v.StatusUntilAt }

// GetTimezone returns listUserUsersUserConnectionNodesUser.Timezone, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetTimezone() *string { return v.Timezone }

// GetUpdatedAt returns listUserUsersUserConnectionNodesUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetUrl returns listUserUsersUserConnectionNodesUser.Url, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetUrl() *string { return v.Url }

// GetOrganization returns listUserUsersUserConnectionNodesUser.Organization, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUser) GetOrganization() *listUserUsersUserConnectionNodesUserOrganization {
	return v.Organization
}

// listUserUsersUserConnectionNodesUserOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type listUserUsersUserConnectionNodesUserOrganization struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// Allowed authentication providers, empty array means all are allowed
	AllowedAuthServices []*string `json:"allowedAuthServices"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Number of issues in the organization.
	CreatedIssueCount *int `json:"createdIssueCount"`
	// The time at which deletion of the organization was requested.
	DeletionRequestedAt *time.Time `json:"deletionRequestedAt"`
	// How git branches are formatted. If null, default formatting will be used.
	GitBranchFormat *string `json:"gitBranchFormat"`
	// Whether the Git integration linkback messages should be sent to private repositories.
	GitLinkbackMessagesEnabled *bool `json:"gitLinkbackMessagesEnabled"`
	// Whether the Git integration linkback messages should be sent to public repositories.
	GitPublicLinkbackMessagesEnabled *bool `json:"gitPublicLinkbackMessagesEnabled"`
	// The organization's logo URL.
	LogoUrl *string `json:"logoUrl"`
	// The organization's name.
	Name *string `json:"name"`
	// Rolling 30-day total upload volume for the organization, in megabytes.
	PeriodUploadVolume *float64 `json:"periodUploadVolume"`
	// Previously used URL keys for the organization (last 3 are kept and redirected).
	PreviousUrlKeys []*string `json:"previousUrlKeys"`
	// The day at which to prompt for project updates.
	ProjectUpdateRemindersDay *Day `json:"projectUpdateRemindersDay"`
	// The hour at which to prompt for project updates.
	ProjectUpdateRemindersHour *float64 `json:"projectUpdateRemindersHour"`
	// The frequency at which to prompt for project updates.
	ProjectUpdatesReminderFrequency *ProjectUpdateReminderFrequency `json:"projectUpdatesReminderFrequency"`
	// The feature release channel the organization belongs to.
	ReleaseChannel *ReleaseChannel `json:"releaseChannel"`
	// Whether the organization is using a roadmap.
	RoadmapEnabled *bool `json:"roadmapEnabled"`
	// Whether SAML authentication is enabled for organization.
	SamlEnabled *bool `json:"samlEnabled"`
	// Whether SCIM provisioning is enabled for organization.
	ScimEnabled *bool `json:"scimEnabled"`
	// The time at which the trial of the plus plan will end.
	TrialEndsAt *time.Time `json:"trialEndsAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The organization's unique URL key.
	UrlKey *string `json:"urlKey"`
	// Number of active users in the organization.
	UserCount *int `json:"userCount"`
}

// GetId returns listUserUsersUserConnectionNodesUserOrganization.Id, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetId() *string { return v.Id }

// GetAllowedAuthServices returns listUserUsersUserConnectionNodesUserOrganization.AllowedAuthServices, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetAllowedAuthServices() []*string {
	return v.AllowedAuthServices
}

// GetArchivedAt returns listUserUsersUserConnectionNodesUserOrganization.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetCreatedAt returns listUserUsersUserConnectionNodesUserOrganization.CreatedAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCreatedIssueCount returns listUserUsersUserConnectionNodesUserOrganization.CreatedIssueCount, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetCreatedIssueCount() *int {
	return v.CreatedIssueCount
}

// GetDeletionRequestedAt returns listUserUsersUserConnectionNodesUserOrganization.DeletionRequestedAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetDeletionRequestedAt() *time.Time {
	return v.DeletionRequestedAt
}

// GetGitBranchFormat returns listUserUsersUserConnectionNodesUserOrganization.GitBranchFormat, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetGitBranchFormat() *string {
	return v.GitBranchFormat
}

// GetGitLinkbackMessagesEnabled returns listUserUsersUserConnectionNodesUserOrganization.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetGitLinkbackMessagesEnabled() *bool {
	return v.GitLinkbackMessagesEnabled
}

// GetGitPublicLinkbackMessagesEnabled returns listUserUsersUserConnectionNodesUserOrganization.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetGitPublicLinkbackMessagesEnabled() *bool {
	return v.GitPublicLinkbackMessagesEnabled
}

// GetLogoUrl returns listUserUsersUserConnectionNodesUserOrganization.LogoUrl, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetLogoUrl() *string { return v.LogoUrl }

// GetName returns listUserUsersUserConnectionNodesUserOrganization.Name, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetName() *string { return v.Name }

// GetPeriodUploadVolume returns listUserUsersUserConnectionNodesUserOrganization.PeriodUploadVolume, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetPeriodUploadVolume() *float64 {
	return v.PeriodUploadVolume
}

// GetPreviousUrlKeys returns listUserUsersUserConnectionNodesUserOrganization.PreviousUrlKeys, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetPreviousUrlKeys() []*string {
	return v.PreviousUrlKeys
}

// GetProjectUpdateRemindersDay returns listUserUsersUserConnectionNodesUserOrganization.ProjectUpdateRemindersDay, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetProjectUpdateRemindersDay() *Day {
	return v.ProjectUpdateRemindersDay
}

// GetProjectUpdateRemindersHour returns listUserUsersUserConnectionNodesUserOrganization.ProjectUpdateRemindersHour, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetProjectUpdateRemindersHour() *float64 {
	return v.ProjectUpdateRemindersHour
}

// GetProjectUpdatesReminderFrequency returns listUserUsersUserConnectionNodesUserOrganization.ProjectUpdatesReminderFrequency, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetProjectUpdatesReminderFrequency() *ProjectUpdateReminderFrequency {
	return v.ProjectUpdatesReminderFrequency
}

// GetReleaseChannel returns listUserUsersUserConnectionNodesUserOrganization.ReleaseChannel, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetReleaseChannel() *ReleaseChannel {
	return v.ReleaseChannel
}

// GetRoadmapEnabled returns listUserUsersUserConnectionNodesUserOrganization.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetRoadmapEnabled() *bool {
	return v.RoadmapEnabled
}

// GetSamlEnabled returns listUserUsersUserConnectionNodesUserOrganization.SamlEnabled, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetSamlEnabled() *bool {
	return v.SamlEnabled
}

// GetScimEnabled returns listUserUsersUserConnectionNodesUserOrganization.ScimEnabled, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetScimEnabled() *bool {
	return v.ScimEnabled
}

// GetTrialEndsAt returns listUserUsersUserConnectionNodesUserOrganization.TrialEndsAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetTrialEndsAt() *time.Time {
	return v.TrialEndsAt
}

// GetUpdatedAt returns listUserUsersUserConnectionNodesUserOrganization.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetUrlKey returns listUserUsersUserConnectionNodesUserOrganization.UrlKey, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetUrlKey() *string { return v.UrlKey }

// GetUserCount returns listUserUsersUserConnectionNodesUserOrganization.UserCount, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionNodesUserOrganization) GetUserCount() *int { return v.UserCount }

// listUserUsersUserConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listUserUsersUserConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listUserUsersUserConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionPageInfo) GetHasNextPage() *bool { return v.HasNextPage }

// GetEndCursor returns listUserUsersUserConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listUserUsersUserConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// listWorkflowStateResponse is returned by listWorkflowState on success.
type listWorkflowStateResponse struct {
	// All issue workflow states.
	WorkflowStates *listWorkflowStateWorkflowStatesWorkflowStateConnection `json:"workflowStates"`
}

// GetWorkflowStates returns listWorkflowStateResponse.WorkflowStates, and is useful for accessing the field via an interface.
func (v *listWorkflowStateResponse) GetWorkflowStates() *listWorkflowStateWorkflowStatesWorkflowStateConnection {
	return v.WorkflowStates
}

// listWorkflowStateWorkflowStatesWorkflowStateConnection includes the requested fields of the GraphQL type WorkflowStateConnection.
type listWorkflowStateWorkflowStatesWorkflowStateConnection struct {
	PageInfo *listWorkflowStateWorkflowStatesWorkflowStateConnectionPageInfo             `json:"pageInfo"`
	Nodes    []*listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState `json:"nodes"`
}

// GetPageInfo returns listWorkflowStateWorkflowStatesWorkflowStateConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnection) GetPageInfo() *listWorkflowStateWorkflowStatesWorkflowStateConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listWorkflowStateWorkflowStatesWorkflowStateConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnection) GetNodes() []*listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState {
	return v.Nodes
}

// listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// The state's UI color as a HEX string.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Description of the state.
	Description *string `json:"description"`
	// The state's name.
	Name *string `json:"name"`
	// The position of the state in the team flow.
	Position *float64 `json:"position"`
	// The type of the state.
	Type *string `json:"type"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
	// The team to which this state belongs to.
	Team *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam `json:"team"`
}

// GetId returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetColor returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.CreatedAt, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetDescription returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetDescription() *string {
	return v.Description
}

// GetName returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetName() *string {
	return v.Name
}

// GetPosition returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetPosition() *float64 {
	return v.Position
}

// GetType returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetType() *string {
	return v.Type
}

// GetUpdatedAt returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetTeam returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Team, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetTeam() *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam {
	return v.Team
}

// listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam struct {
	// The unique identifier of the entity.
	Id *string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod *float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
	AutoCloseStateId *string `json:"autoCloseStateId"`
	// The team's color.
	Color *string `json:"color"`
	// The time at which the entity was created.
	CreatedAt *time.Time `json:"createdAt"`
	// Calendar feed URL (iCal) for cycles.
	CycleCalenderUrl *string `json:"cycleCalenderUrl"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime *float64 `json:"cycleCooldownTime"`
	// The duration of a cycle in weeks.
	CycleDuration *float64 `json:"cycleDuration"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted *bool `json:"cycleIssueAutoAssignCompleted"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted *bool `json:"cycleIssueAutoAssignStarted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive *bool `json:"cycleLockToActive"`
	// The day of the week that a new cycle starts.
	CycleStartDay *float64 `json:"cycleStartDay"`
	// Whether the team uses cycles.
	CyclesEnabled *bool `json:"cyclesEnabled"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate *float64 `json:"defaultIssueEstimate"`
	// The id of the default template to use for new issues created by members of the team.
	DefaultTemplateForMembersId *string `json:"defaultTemplateForMembersId"`
	// The id of the default template to use for new issues created by non-members of the team.
	DefaultTemplateForNonMembersId *string `json:"defaultTemplateForNonMembersId"`
	// The team's description.
	Description *string `json:"description"`
	// Whether to group recent issue history entries.
	GroupIssueHistory *bool `json:"groupIssueHistory"`
	// The icon of the team.
	Icon *string `json:"icon"`
	// Unique hash for the team to be used in invite URLs.
	InviteHash *string `json:"inviteHash"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero *bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended *bool `json:"issueEstimationExtended"`
	// The issue estimation type to use.
	IssueEstimationType *string `json:"issueEstimationType"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst *bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom *bool `json:"issueSortOrderDefaultToBottom"`
	// The team's unique key. The key is used in URLs.
	Key *string `json:"key"`
	// The team's name.
	Name *string `json:"name"`
	// Whether the team is private or not.
	Private *bool `json:"private"`
	// Whether an issue needs to have a priority set before leaving triage
	RequirePriorityToLeaveTriage *bool `json:"requirePriorityToLeaveTriage"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments *bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses *bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue *bool `json:"slackNewIssue"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone *string `json:"timezone"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled *bool `json:"triageEnabled"`
	// How many upcoming cycles to create.
	UpcomingCycleCount *float64 `json:"upcomingCycleCount"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.Id, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetId() *string {
	return v.Id
}

// GetArchivedAt returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetArchivedAt() *time.Time {
	return v.ArchivedAt
}

// GetAutoArchivePeriod returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetAutoArchivePeriod() *float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetAutoClosePeriod() *float64 {
	return v.AutoClosePeriod
}

// GetAutoCloseStateId returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetAutoCloseStateId() *string {
	return v.AutoCloseStateId
}

// GetColor returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.Color, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetColor() *string {
	return v.Color
}

// GetCreatedAt returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CreatedAt, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetCycleCalenderUrl returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CycleCalenderUrl, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCycleCalenderUrl() *string {
	return v.CycleCalenderUrl
}

// GetCycleCooldownTime returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCycleCooldownTime() *float64 {
	return v.CycleCooldownTime
}

// GetCycleDuration returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCycleDuration() *float64 {
	return v.CycleDuration
}

// GetCycleIssueAutoAssignCompleted returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCycleIssueAutoAssignCompleted() *bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleIssueAutoAssignStarted returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCycleIssueAutoAssignStarted() *bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleLockToActive returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCycleLockToActive() *bool {
	return v.CycleLockToActive
}

// GetCycleStartDay returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCycleStartDay() *float64 {
	return v.CycleStartDay
}

// GetCyclesEnabled returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetCyclesEnabled() *bool {
	return v.CyclesEnabled
}

// GetDefaultIssueEstimate returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetDefaultIssueEstimate() *float64 {
	return v.DefaultIssueEstimate
}

// GetDefaultTemplateForMembersId returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetDefaultTemplateForMembersId() *string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetDefaultTemplateForNonMembersId() *string {
	return v.DefaultTemplateForNonMembersId
}

// GetDescription returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.Description, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetDescription() *string {
	return v.Description
}

// GetGroupIssueHistory returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetGroupIssueHistory() *bool {
	return v.GroupIssueHistory
}

// GetIcon returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.Icon, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetIcon() *string {
	return v.Icon
}

// GetInviteHash returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.InviteHash, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetInviteHash() *string {
	return v.InviteHash
}

// GetIssueEstimationAllowZero returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetIssueEstimationAllowZero() *bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetIssueEstimationExtended() *bool {
	return v.IssueEstimationExtended
}

// GetIssueEstimationType returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetIssueEstimationType() *string {
	return v.IssueEstimationType
}

// GetIssueOrderingNoPriorityFirst returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetIssueOrderingNoPriorityFirst() *bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueSortOrderDefaultToBottom returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetIssueSortOrderDefaultToBottom() *bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetKey returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.Key, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetKey() *string {
	return v.Key
}

// GetName returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.Name, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetName() *string {
	return v.Name
}

// GetPrivate returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.Private, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetPrivate() *bool {
	return v.Private
}

// GetRequirePriorityToLeaveTriage returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetRequirePriorityToLeaveTriage() *bool {
	return v.RequirePriorityToLeaveTriage
}

// GetSlackIssueComments returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetSlackIssueComments() *bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetSlackIssueStatuses() *bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetSlackNewIssue() *bool {
	return v.SlackNewIssue
}

// GetTimezone returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.Timezone, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetTimezone() *string {
	return v.Timezone
}

// GetTriageEnabled returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetTriageEnabled() *bool {
	return v.TriageEnabled
}

// GetUpcomingCycleCount returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetUpcomingCycleCount() *float64 {
	return v.UpcomingCycleCount
}

// GetUpdatedAt returns listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowStateTeam) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// listWorkflowStateWorkflowStatesWorkflowStateConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listWorkflowStateWorkflowStatesWorkflowStateConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage *bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns listWorkflowStateWorkflowStatesWorkflowStateConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionPageInfo) GetHasNextPage() *bool {
	return v.HasNextPage
}

// GetEndCursor returns listWorkflowStateWorkflowStatesWorkflowStateConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listWorkflowStateWorkflowStatesWorkflowStateConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// The query or mutation executed by listAttachment.
const listAttachment_Operation = `
query listAttachment ($first: Int, $after: String, $includeArchived: Boolean, $filter: AttachmentFilter, $includeCreator: Boolean!, $includeIssue: Boolean!) {
	attachments(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			createdAt
			groupBySource
			metadata
			source
			sourceType
			subtitle
			title
			updatedAt
			url
			creator @skip(if: $includeCreator) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
			issue @skip(if: $includeIssue) {
				id
				createdAt
				updatedAt
				archivedAt
				number
				title
				description
				priority
				estimate
				sortOrder
				startedAt
				completedAt
				canceledAt
				autoClosedAt
				autoArchivedAt
				dueDate
				trashed
				snoozedUntilAt
				previousIdentifiers
				subIssueSortOrder
				priorityLabel
				identifier
				url
				branchName
				customerTicketCount
			}
		}
	}
}
`

func listAttachment(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *AttachmentFilter,
	includeCreator *bool,
	includeIssue *bool,
) (*listAttachmentResponse, error) {
	req := &graphql.Request{
		OpName: "listAttachment",
		Query:  listAttachment_Operation,
		Variables: &__listAttachmentInput{
			First:           first,
			After:           after,
			IncludeArchived: includeArchived,
			Filter:          filter,
			IncludeCreator:  includeCreator,
			IncludeIssue:    includeIssue,
		},
	}
	var err error

	var data listAttachmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listComment.
const listComment_Operation = `
query listComment ($first: Int, $after: String, $includeArchived: Boolean, $filter: CommentFilter, $includeIssue: Boolean!, $includeParent: Boolean!, $includeUser: Boolean!) {
	comments(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			body
			bodyData
			createdAt
			editedAt
			reactionData
			updatedAt
			url
			user @skip(if: $includeUser) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
			parent @skip(if: $includeParent) {
				id
				archivedAt
				body
				bodyData
				createdAt
				editedAt
				reactionData
				updatedAt
				url
			}
			issue @skip(if: $includeIssue) {
				id
				createdAt
				updatedAt
				archivedAt
				number
				title
				description
				priority
				estimate
				sortOrder
				startedAt
				completedAt
				canceledAt
				autoClosedAt
				autoArchivedAt
				dueDate
				trashed
				snoozedUntilAt
				previousIdentifiers
				subIssueSortOrder
				priorityLabel
				identifier
				url
				branchName
				customerTicketCount
			}
		}
	}
}
`

func listComment(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *CommentFilter,
	includeIssue *bool,
	includeParent *bool,
	includeUser *bool,
) (*listCommentResponse, error) {
	req := &graphql.Request{
		OpName: "listComment",
		Query:  listComment_Operation,
		Variables: &__listCommentInput{
			First:           first,
			After:           after,
			IncludeArchived: includeArchived,
			Filter:          filter,
			IncludeIssue:    includeIssue,
			IncludeParent:   includeParent,
			IncludeUser:     includeUser,
		},
	}
	var err error

	var data listCommentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listCycle.
const listCycle_Operation = `
query listCycle ($first: Int, $after: String, $includeArchived: Boolean, $filter: CycleFilter, $includeTeam: Boolean!) {
	cycles(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			autoArchivedAt
			completedAt
			completedIssueCountHistory
			completedScopeHistory
			createdAt
			description
			endsAt
			inProgressScopeHistory
			issueCountHistory
			name
			number
			progress
			scopeHistory
			startsAt
			updatedAt
			team @skip(if: $includeTeam) {
				id
				archivedAt
				autoArchivePeriod
				autoClosePeriod
				autoCloseStateId
				color
				createdAt
				cycleCalenderUrl
				cycleCooldownTime
				cycleDuration
				cycleIssueAutoAssignCompleted
				cycleIssueAutoAssignStarted
				cycleLockToActive
				cycleStartDay
				cyclesEnabled
				defaultIssueEstimate
				defaultTemplateForMembersId
				defaultTemplateForNonMembersId
				description
				groupIssueHistory
				icon
				inviteHash
				issueEstimationAllowZero
				issueEstimationExtended
				issueEstimationType
				issueOrderingNoPriorityFirst
				issueSortOrderDefaultToBottom
				key
				name
				private
				requirePriorityToLeaveTriage
				slackIssueComments
				slackIssueStatuses
				slackNewIssue
				timezone
				triageEnabled
				upcomingCycleCount
				updatedAt
			}
		}
	}
}
`

func listCycle(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *CycleFilter,
	includeTeam *bool,
) (*listCycleResponse, error) {
	req := &graphql.Request{
		OpName: "listCycle",
		Query:  listCycle_Operation,
		Variables: &__listCycleInput{
			First:           first,
			After:           after,
			IncludeArchived: includeArchived,
			Filter:          filter,
			IncludeTeam:     includeTeam,
		},
	}
	var err error

	var data listCycleResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listIntegration.
const listIntegration_Operation = `
query listIntegration ($first: Int, $after: String, $includeArchived: Boolean, $includeCreator: Boolean!, $includeOrganization: Boolean!, $includeTeam: Boolean!) {
	integrations(first: $first, after: $after, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			createdAt
			service
			updatedAt
			team @skip(if: $includeTeam) {
				id
				archivedAt
				autoArchivePeriod
				autoClosePeriod
				autoCloseStateId
				color
				createdAt
				cycleCalenderUrl
				cycleCooldownTime
				cycleDuration
				cycleIssueAutoAssignCompleted
				cycleIssueAutoAssignStarted
				cycleLockToActive
				cycleStartDay
				cyclesEnabled
				defaultIssueEstimate
				defaultTemplateForMembersId
				defaultTemplateForNonMembersId
				description
				groupIssueHistory
				icon
				inviteHash
				issueEstimationAllowZero
				issueEstimationExtended
				issueEstimationType
				issueOrderingNoPriorityFirst
				issueSortOrderDefaultToBottom
				key
				name
				private
				requirePriorityToLeaveTriage
				slackIssueComments
				slackIssueStatuses
				slackNewIssue
				timezone
				triageEnabled
				upcomingCycleCount
				updatedAt
			}
			creator @skip(if: $includeCreator) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
			organization @skip(if: $includeOrganization) {
				id
				allowedAuthServices
				archivedAt
				createdAt
				createdIssueCount
				deletionRequestedAt
				gitBranchFormat
				gitLinkbackMessagesEnabled
				gitPublicLinkbackMessagesEnabled
				logoUrl
				name
				periodUploadVolume
				previousUrlKeys
				projectUpdateRemindersDay
				projectUpdateRemindersHour
				projectUpdatesReminderFrequency
				releaseChannel
				roadmapEnabled
				samlEnabled
				scimEnabled
				trialEndsAt
				updatedAt
				urlKey
				userCount
			}
		}
	}
}
`

func listIntegration(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	includeCreator *bool,
	includeOrganization *bool,
	includeTeam *bool,
) (*listIntegrationResponse, error) {
	req := &graphql.Request{
		OpName: "listIntegration",
		Query:  listIntegration_Operation,
		Variables: &__listIntegrationInput{
			First:               first,
			After:               after,
			IncludeArchived:     includeArchived,
			IncludeCreator:      includeCreator,
			IncludeOrganization: includeOrganization,
			IncludeTeam:         includeTeam,
		},
	}
	var err error

	var data listIntegrationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listIssue.
const listIssue_Operation = `
query listIssue ($first: Int, $after: String, $includeArchived: Boolean, $filter: IssueFilter, $includeTeam: Boolean!, $includeCycle: Boolean!, $includeProject: Boolean!, $includeCreator: Boolean!, $includeAssignee: Boolean!, $includeSnoozedBy: Boolean!, $includeState: Boolean!, $includeParent: Boolean!, $includeProjectMilestone: Boolean!) {
	issues(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			createdAt
			updatedAt
			archivedAt
			number
			title
			description
			priority
			estimate
			sortOrder
			startedAt
			completedAt
			canceledAt
			autoClosedAt
			autoArchivedAt
			dueDate
			trashed
			snoozedUntilAt
			previousIdentifiers
			subIssueSortOrder
			priorityLabel
			identifier
			url
			branchName
			customerTicketCount
			labels(first: 10, after: $after, includeArchived: $includeArchived) {
				pageInfo {
					hasNextPage
					endCursor
				}
				nodes {
					id
					archivedAt
					color
					createdAt
					description
					name
					updatedAt
				}
			}
			team @skip(if: $includeTeam) {
				id
				archivedAt
				autoArchivePeriod
				autoClosePeriod
				autoCloseStateId
				color
				createdAt
				cycleCalenderUrl
				cycleCooldownTime
				cycleDuration
				cycleIssueAutoAssignCompleted
				cycleIssueAutoAssignStarted
				cycleLockToActive
				cycleStartDay
				cyclesEnabled
				defaultIssueEstimate
				defaultTemplateForMembersId
				defaultTemplateForNonMembersId
				description
				groupIssueHistory
				icon
				inviteHash
				issueEstimationAllowZero
				issueEstimationExtended
				issueEstimationType
				issueOrderingNoPriorityFirst
				issueSortOrderDefaultToBottom
				key
				name
				private
				requirePriorityToLeaveTriage
				slackIssueComments
				slackIssueStatuses
				slackNewIssue
				timezone
				triageEnabled
				upcomingCycleCount
				updatedAt
			}
			cycle @skip(if: $includeCycle) {
				id
				archivedAt
				autoArchivedAt
				completedAt
				completedIssueCountHistory
				completedScopeHistory
				createdAt
				description
				endsAt
				inProgressScopeHistory
				issueCountHistory
				name
				number
				progress
				scopeHistory
				startsAt
				updatedAt
			}
			project @skip(if: $includeProject) {
				id
				archivedAt
				autoArchivedAt
				canceledAt
				color
				completedAt
				completedIssueCountHistory
				completedScopeHistory
				createdAt
				description
				icon
				inProgressScopeHistory
				issueCountHistory
				name
				progress
				projectUpdateRemindersPausedUntilAt
				scope
				scopeHistory
				slackIssueComments
				slackIssueStatuses
				slackNewIssue
				slugId
				sortOrder
				startDate
				startedAt
				state
				targetDate
				updatedAt
				url
			}
			creator @skip(if: $includeCreator) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
			assignee @skip(if: $includeAssignee) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
			snoozedBy @skip(if: $includeSnoozedBy) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
			state @skip(if: $includeState) {
				id
				archivedAt
				color
				createdAt
				description
				name
				position
				type
				updatedAt
			}
			parent @skip(if: $includeParent) {
				id
				createdAt
				updatedAt
				archivedAt
				number
				title
				description
				priority
				estimate
				sortOrder
				startedAt
				completedAt
				canceledAt
				autoClosedAt
				autoArchivedAt
				dueDate
				trashed
				snoozedUntilAt
				previousIdentifiers
			}
			projectMilestone @skip(if: $includeProjectMilestone) {
				archivedAt
				createdAt
				description
				id
				name
				sortOrder
				updatedAt
			}
		}
	}
}
`

func listIssue(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *IssueFilter,
	includeTeam *bool,
	includeCycle *bool,
	includeProject *bool,
	includeCreator *bool,
	includeAssignee *bool,
	includeSnoozedBy *bool,
	includeState *bool,
	includeParent *bool,
	includeProjectMilestone *bool,
) (*listIssueResponse, error) {
	req := &graphql.Request{
		OpName: "listIssue",
		Query:  listIssue_Operation,
		Variables: &__listIssueInput{
			First:                   first,
			After:                   after,
			IncludeArchived:         includeArchived,
			Filter:                  filter,
			IncludeTeam:             includeTeam,
			IncludeCycle:            includeCycle,
			IncludeProject:          includeProject,
			IncludeCreator:          includeCreator,
			IncludeAssignee:         includeAssignee,
			IncludeSnoozedBy:        includeSnoozedBy,
			IncludeState:            includeState,
			IncludeParent:           includeParent,
			IncludeProjectMilestone: includeProjectMilestone,
		},
	}
	var err error

	var data listIssueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listIssueLabel.
const listIssueLabel_Operation = `
query listIssueLabel ($first: Int, $after: String, $includeArchived: Boolean, $filter: IssueLabelFilter, $includeCreator: Boolean!, $includeOrganization: Boolean!, $includeParent: Boolean!, $includeTeam: Boolean!) {
	issueLabels(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			color
			createdAt
			description
			name
			updatedAt
			issues(first: $first, after: $after, includeArchived: $includeArchived) {
				pageInfo {
					hasNextPage
					endCursor
				}
				nodes {
					id
				}
			}
			team @skip(if: $includeTeam) {
				id
				archivedAt
				autoArchivePeriod
				autoClosePeriod
				autoCloseStateId
				color
				createdAt
				cycleCalenderUrl
				cycleCooldownTime
				cycleDuration
				cycleIssueAutoAssignCompleted
				cycleIssueAutoAssignStarted
				cycleLockToActive
				cycleStartDay
				cyclesEnabled
				defaultIssueEstimate
				defaultTemplateForMembersId
				defaultTemplateForNonMembersId
				description
				groupIssueHistory
				icon
				inviteHash
				issueEstimationAllowZero
				issueEstimationExtended
				issueEstimationType
				issueOrderingNoPriorityFirst
				issueSortOrderDefaultToBottom
				key
				name
				private
				requirePriorityToLeaveTriage
				slackIssueComments
				slackIssueStatuses
				slackNewIssue
				timezone
				triageEnabled
				upcomingCycleCount
				updatedAt
			}
			creator @skip(if: $includeCreator) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
			organization @skip(if: $includeOrganization) {
				id
				allowedAuthServices
				archivedAt
				createdAt
				createdIssueCount
				deletionRequestedAt
				gitBranchFormat
				gitLinkbackMessagesEnabled
				gitPublicLinkbackMessagesEnabled
				logoUrl
				name
				periodUploadVolume
				previousUrlKeys
				projectUpdateRemindersDay
				projectUpdateRemindersHour
				projectUpdatesReminderFrequency
				releaseChannel
				roadmapEnabled
				samlEnabled
				scimEnabled
				trialEndsAt
				updatedAt
				urlKey
				userCount
			}
			parent @skip(if: $includeParent) {
				id
				archivedAt
				color
				createdAt
				description
				name
				updatedAt
			}
		}
	}
}
`

func listIssueLabel(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *IssueLabelFilter,
	includeCreator *bool,
	includeOrganization *bool,
	includeParent *bool,
	includeTeam *bool,
) (*listIssueLabelResponse, error) {
	req := &graphql.Request{
		OpName: "listIssueLabel",
		Query:  listIssueLabel_Operation,
		Variables: &__listIssueLabelInput{
			First:               first,
			After:               after,
			IncludeArchived:     includeArchived,
			Filter:              filter,
			IncludeCreator:      includeCreator,
			IncludeOrganization: includeOrganization,
			IncludeParent:       includeParent,
			IncludeTeam:         includeTeam,
		},
	}
	var err error

	var data listIssueLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listOrganization.
const listOrganization_Operation = `
query listOrganization ($includeSubscription: Boolean!) {
	organization {
		id
		allowedAuthServices
		archivedAt
		createdAt
		createdIssueCount
		deletionRequestedAt
		gitBranchFormat
		gitLinkbackMessagesEnabled
		gitPublicLinkbackMessagesEnabled
		logoUrl
		name
		periodUploadVolume
		previousUrlKeys
		projectUpdateRemindersDay
		projectUpdateRemindersHour
		projectUpdatesReminderFrequency
		releaseChannel
		roadmapEnabled
		samlEnabled
		scimEnabled
		trialEndsAt
		updatedAt
		urlKey
		userCount
		projectUpdateRemindersDay
		projectUpdatesReminderFrequency
		releaseChannel
		subscription @skip(if: $includeSubscription) {
			id
			archivedAt
			canceledAt
			createdAt
			nextBillingAt
			pendingChangeType
			seats
			seatsMaximum
			seatsMinimum
			type
			updatedAt
		}
	}
}
`

func listOrganization(
	ctx context.Context,
	client graphql.Client,
	includeSubscription *bool,
) (*listOrganizationResponse, error) {
	req := &graphql.Request{
		OpName: "listOrganization",
		Query:  listOrganization_Operation,
		Variables: &__listOrganizationInput{
			IncludeSubscription: includeSubscription,
		},
	}
	var err error

	var data listOrganizationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listProject.
const listProject_Operation = `
query listProject ($first: Int, $after: String, $includeArchived: Boolean, $filter: ProjectFilter, $includeConvertedFromIssue: Boolean!, $includeIntegrationsSettings: Boolean!, $includeLead: Boolean!, $includeCreator: Boolean!) {
	projects(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			autoArchivedAt
			canceledAt
			color
			completedAt
			completedIssueCountHistory
			completedScopeHistory
			createdAt
			description
			icon
			inProgressScopeHistory
			issueCountHistory
			name
			progress
			projectUpdateRemindersPausedUntilAt
			scope
			scopeHistory
			slackIssueComments
			slackIssueStatuses
			slackNewIssue
			slugId
			sortOrder
			startDate
			startedAt
			state
			targetDate
			updatedAt
			url
			convertedFromIssue @skip(if: $includeConvertedFromIssue) {
				id
				createdAt
				updatedAt
				archivedAt
				number
				title
				description
				priority
				estimate
				sortOrder
				startedAt
				completedAt
				canceledAt
				autoClosedAt
				autoArchivedAt
				dueDate
				trashed
				snoozedUntilAt
				previousIdentifiers
				subIssueSortOrder
				priorityLabel
				identifier
				url
				branchName
				customerTicketCount
			}
			integrationsSettings @skip(if: $includeIntegrationsSettings) {
				id
				archivedAt
				createdAt
				slackIssueAddedToTriage
				slackIssueCreated
				slackIssueNewComment
				slackIssueSlaBreached
				slackIssueSlaHighRisk
				slackIssueStatusChangedAll
				slackIssueStatusChangedDone
				slackProjectUpdateCreated
				slackProjectUpdateCreatedToTeam
				slackProjectUpdateCreatedToWorkspace
				updatedAt
			}
			creator @skip(if: $includeCreator) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
			lead @skip(if: $includeLead) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
		}
	}
}
`

func listProject(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *ProjectFilter,
	includeConvertedFromIssue *bool,
	includeIntegrationsSettings *bool,
	includeLead *bool,
	includeCreator *bool,
) (*listProjectResponse, error) {
	req := &graphql.Request{
		OpName: "listProject",
		Query:  listProject_Operation,
		Variables: &__listProjectInput{
			First:                       first,
			After:                       after,
			IncludeArchived:             includeArchived,
			Filter:                      filter,
			IncludeConvertedFromIssue:   includeConvertedFromIssue,
			IncludeIntegrationsSettings: includeIntegrationsSettings,
			IncludeLead:                 includeLead,
			IncludeCreator:              includeCreator,
		},
	}
	var err error

	var data listProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listTeam.
const listTeam_Operation = `
query listTeam ($first: Int, $after: String, $includeArchived: Boolean, $filter: TeamFilter, $includeCycle: Boolean!, $includeIssueState: Boolean!, $includeTemplateForMembers: Boolean!, $includeTemplateForNonMembers: Boolean!, $includeWorkflowState: Boolean!, $includeIntegrationsSettings: Boolean!, $includeDuplicateWorkflowState: Boolean!, $includeOrganization: Boolean!, $includeReviewWorkflowState: Boolean!, $includeStartWorkflowState: Boolean!, $includeTriageWorkflowState: Boolean!) {
	teams(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			autoArchivePeriod
			autoClosePeriod
			autoCloseStateId
			color
			createdAt
			cycleCalenderUrl
			cycleCooldownTime
			cycleDuration
			cycleIssueAutoAssignCompleted
			cycleIssueAutoAssignStarted
			cycleLockToActive
			cycleStartDay
			cyclesEnabled
			defaultIssueEstimate
			defaultTemplateForMembersId
			defaultTemplateForNonMembersId
			description
			groupIssueHistory
			icon
			inviteHash
			issueEstimationAllowZero
			issueEstimationExtended
			issueEstimationType
			issueOrderingNoPriorityFirst
			issueSortOrderDefaultToBottom
			key
			name
			private
			requirePriorityToLeaveTriage
			slackIssueComments
			slackIssueStatuses
			slackNewIssue
			timezone
			triageEnabled
			upcomingCycleCount
			updatedAt
			activeCycle @skip(if: $includeCycle) {
				id
				archivedAt
				autoArchivedAt
				completedAt
				completedIssueCountHistory
				completedScopeHistory
				createdAt
				description
				endsAt
				inProgressScopeHistory
				issueCountHistory
				name
				number
				progress
				scopeHistory
				startsAt
				updatedAt
			}
			defaultIssueState @skip(if: $includeIssueState) {
				id
				archivedAt
				color
				createdAt
				description
				name
				position
				type
				updatedAt
			}
			defaultTemplateForMembers @skip(if: $includeTemplateForMembers) {
				id
				archivedAt
				description
				createdAt
				type
				name
				updatedAt
				templateData
			}
			defaultTemplateForNonMembers @skip(if: $includeTemplateForNonMembers) {
				id
				archivedAt
				description
				createdAt
				type
				name
				updatedAt
				templateData
			}
			draftWorkflowState @skip(if: $includeWorkflowState) {
				id
				archivedAt
				color
				createdAt
				description
				name
				position
				type
				updatedAt
			}
			integrationsSettings @skip(if: $includeIntegrationsSettings) {
				id
				archivedAt
				createdAt
				slackIssueAddedToTriage
				slackIssueCreated
				slackIssueNewComment
				slackIssueSlaBreached
				slackIssueSlaHighRisk
				slackIssueStatusChangedAll
				slackIssueStatusChangedDone
				slackProjectUpdateCreated
				slackProjectUpdateCreatedToTeam
				slackProjectUpdateCreatedToWorkspace
				updatedAt
			}
			markedAsDuplicateWorkflowState @skip(if: $includeDuplicateWorkflowState) {
				id
				archivedAt
				color
				createdAt
				description
				name
				position
				type
				updatedAt
			}
			organization @skip(if: $includeOrganization) {
				id
				allowedAuthServices
				archivedAt
				createdAt
				createdIssueCount
				deletionRequestedAt
				gitBranchFormat
				gitLinkbackMessagesEnabled
				gitPublicLinkbackMessagesEnabled
				logoUrl
				name
				periodUploadVolume
				previousUrlKeys
				projectUpdateRemindersDay
				projectUpdateRemindersHour
				projectUpdatesReminderFrequency
				releaseChannel
				roadmapEnabled
				samlEnabled
				scimEnabled
				trialEndsAt
				updatedAt
				urlKey
				userCount
			}
			reviewWorkflowState @skip(if: $includeReviewWorkflowState) {
				id
				archivedAt
				color
				createdAt
				description
				name
				position
				type
				updatedAt
			}
			startWorkflowState @skip(if: $includeStartWorkflowState) {
				id
				archivedAt
				color
				createdAt
				description
				name
				position
				type
				updatedAt
			}
			triageIssueState @skip(if: $includeTriageWorkflowState) {
				id
				archivedAt
				color
				createdAt
				description
				name
				position
				type
				updatedAt
			}
		}
	}
}
`

func listTeam(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *TeamFilter,
	includeCycle *bool,
	includeIssueState *bool,
	includeTemplateForMembers *bool,
	includeTemplateForNonMembers *bool,
	includeWorkflowState *bool,
	includeIntegrationsSettings *bool,
	includeDuplicateWorkflowState *bool,
	includeOrganization *bool,
	includeReviewWorkflowState *bool,
	includeStartWorkflowState *bool,
	includeTriageWorkflowState *bool,
) (*listTeamResponse, error) {
	req := &graphql.Request{
		OpName: "listTeam",
		Query:  listTeam_Operation,
		Variables: &__listTeamInput{
			First:                         first,
			After:                         after,
			IncludeArchived:               includeArchived,
			Filter:                        filter,
			IncludeCycle:                  includeCycle,
			IncludeIssueState:             includeIssueState,
			IncludeTemplateForMembers:     includeTemplateForMembers,
			IncludeTemplateForNonMembers:  includeTemplateForNonMembers,
			IncludeWorkflowState:          includeWorkflowState,
			IncludeIntegrationsSettings:   includeIntegrationsSettings,
			IncludeDuplicateWorkflowState: includeDuplicateWorkflowState,
			IncludeOrganization:           includeOrganization,
			IncludeReviewWorkflowState:    includeReviewWorkflowState,
			IncludeStartWorkflowState:     includeStartWorkflowState,
			IncludeTriageWorkflowState:    includeTriageWorkflowState,
		},
	}
	var err error

	var data listTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listTeamMembership.
const listTeamMembership_Operation = `
query listTeamMembership ($first: Int, $after: String, $includeArchived: Boolean, $includeTeam: Boolean!, $includeUser: Boolean!) {
	teamMemberships(first: $first, after: $after, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			createdAt
			owner
			sortOrder
			updatedAt
			team @skip(if: $includeTeam) {
				id
				archivedAt
				autoArchivePeriod
				autoClosePeriod
				autoCloseStateId
				color
				createdAt
				cycleCalenderUrl
				cycleCooldownTime
				cycleDuration
				cycleIssueAutoAssignCompleted
				cycleIssueAutoAssignStarted
				cycleLockToActive
				cycleStartDay
				cyclesEnabled
				defaultIssueEstimate
				defaultTemplateForMembersId
				defaultTemplateForNonMembersId
				description
				groupIssueHistory
				icon
				inviteHash
				issueEstimationAllowZero
				issueEstimationExtended
				issueEstimationType
				issueOrderingNoPriorityFirst
				issueSortOrderDefaultToBottom
				key
				name
				private
				requirePriorityToLeaveTriage
				slackIssueComments
				slackIssueStatuses
				slackNewIssue
				timezone
				triageEnabled
				upcomingCycleCount
				updatedAt
			}
			user @skip(if: $includeUser) {
				id
				active
				admin
				archivedAt
				avatarUrl
				calendarHash
				createdAt
				createdIssueCount
				description
				disableReason
				displayName
				email
				guest
				inviteHash
				isMe
				lastSeen
				name
				statusEmoji
				statusLabel
				statusUntilAt
				timezone
				updatedAt
				url
			}
		}
	}
}
`

func listTeamMembership(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	includeTeam *bool,
	includeUser *bool,
) (*listTeamMembershipResponse, error) {
	req := &graphql.Request{
		OpName: "listTeamMembership",
		Query:  listTeamMembership_Operation,
		Variables: &__listTeamMembershipInput{
			First:           first,
			After:           after,
			IncludeArchived: includeArchived,
			IncludeTeam:     includeTeam,
			IncludeUser:     includeUser,
		},
	}
	var err error

	var data listTeamMembershipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listUser.
const listUser_Operation = `
query listUser ($first: Int, $after: String, $includeArchived: Boolean, $filter: UserFilter, $includeOrganization: Boolean!) {
	users(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			active
			admin
			archivedAt
			avatarUrl
			calendarHash
			createdAt
			createdIssueCount
			description
			disableReason
			displayName
			email
			guest
			inviteHash
			isMe
			lastSeen
			name
			statusEmoji
			statusLabel
			statusUntilAt
			timezone
			updatedAt
			url
			organization @skip(if: $includeOrganization) {
				id
				allowedAuthServices
				archivedAt
				createdAt
				createdIssueCount
				deletionRequestedAt
				gitBranchFormat
				gitLinkbackMessagesEnabled
				gitPublicLinkbackMessagesEnabled
				logoUrl
				name
				periodUploadVolume
				previousUrlKeys
				projectUpdateRemindersDay
				projectUpdateRemindersHour
				projectUpdatesReminderFrequency
				releaseChannel
				roadmapEnabled
				samlEnabled
				scimEnabled
				trialEndsAt
				updatedAt
				urlKey
				userCount
			}
		}
	}
}
`

func listUser(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *UserFilter,
	includeOrganization *bool,
) (*listUserResponse, error) {
	req := &graphql.Request{
		OpName: "listUser",
		Query:  listUser_Operation,
		Variables: &__listUserInput{
			First:               first,
			After:               after,
			IncludeArchived:     includeArchived,
			Filter:              filter,
			IncludeOrganization: includeOrganization,
		},
	}
	var err error

	var data listUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listWorkflowState.
const listWorkflowState_Operation = `
query listWorkflowState ($first: Int, $after: String, $includeArchived: Boolean, $filter: WorkflowStateFilter, $includeTeam: Boolean!) {
	workflowStates(first: $first, after: $after, filter: $filter, includeArchived: $includeArchived) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			color
			createdAt
			description
			name
			position
			type
			updatedAt
			team @skip(if: $includeTeam) {
				id
				archivedAt
				autoArchivePeriod
				autoClosePeriod
				autoCloseStateId
				color
				createdAt
				cycleCalenderUrl
				cycleCooldownTime
				cycleDuration
				cycleIssueAutoAssignCompleted
				cycleIssueAutoAssignStarted
				cycleLockToActive
				cycleStartDay
				cyclesEnabled
				defaultIssueEstimate
				defaultTemplateForMembersId
				defaultTemplateForNonMembersId
				description
				groupIssueHistory
				icon
				inviteHash
				issueEstimationAllowZero
				issueEstimationExtended
				issueEstimationType
				issueOrderingNoPriorityFirst
				issueSortOrderDefaultToBottom
				key
				name
				private
				requirePriorityToLeaveTriage
				slackIssueComments
				slackIssueStatuses
				slackNewIssue
				timezone
				triageEnabled
				upcomingCycleCount
				updatedAt
			}
		}
	}
}
`

func listWorkflowState(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
	includeArchived bool,
	filter *WorkflowStateFilter,
	includeTeam *bool,
) (*listWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "listWorkflowState",
		Query:  listWorkflowState_Operation,
		Variables: &__listWorkflowStateInput{
			First:           first,
			After:           after,
			IncludeArchived: includeArchived,
			Filter:          filter,
			IncludeTeam:     includeTeam,
		},
	}
	var err error

	var data listWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
