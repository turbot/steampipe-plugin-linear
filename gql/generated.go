// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// __getIssueInput is used internally by genqlient
type __getIssueInput struct {
	IssueId string `json:"issueId"`
}

// GetIssueId returns __getIssueInput.IssueId, and is useful for accessing the field via an interface.
func (v *__getIssueInput) GetIssueId() string { return v.IssueId }

// __getProjectInput is used internally by genqlient
type __getProjectInput struct {
	IssueId string `json:"issueId"`
}

// GetIssueId returns __getProjectInput.IssueId, and is useful for accessing the field via an interface.
func (v *__getProjectInput) GetIssueId() string { return v.IssueId }

// __listIssueInput is used internally by genqlient
type __listIssueInput struct {
	First int32  `json:"first,omitempty"`
	After string `json:"after,omitempty"`
}

// GetFirst returns __listIssueInput.First, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetFirst() int32 { return v.First }

// GetAfter returns __listIssueInput.After, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetAfter() string { return v.After }

// __listProjectInput is used internally by genqlient
type __listProjectInput struct {
	First int32  `json:"first,omitempty"`
	After string `json:"after,omitempty"`
}

// GetFirst returns __listProjectInput.First, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetFirst() int32 { return v.First }

// GetAfter returns __listProjectInput.After, and is useful for accessing the field via an interface.
func (v *__listProjectInput) GetAfter() string { return v.After }

// getIssueIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type getIssueIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"createdAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number float64 `json:"number"`
	// The issue's title.
	Title string `json:"title"`
	// The issue's description in markdown format.
	Description string `json:"description"`
	// The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
	Priority float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate float64 `json:"estimate"`
	// The order of the item in relation to other items in the organization.
	SortOrder float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt time.Time `json:"completedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate time.Time `json:"dueDate"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt time.Time `json:"snoozedUntilAt"`
	// The team that the issue is associated with.
	Team getIssueIssueTeam `json:"team"`
	// The cycle that the issue is associated with.
	Cycle getIssueIssueCycle `json:"cycle"`
	// The project that the issue is associated with.
	Project getIssueIssueProject `json:"project"`
	// Previous identifiers of the issue if it has been moved between teams.
	PreviousIdentifiers []string `json:"previousIdentifiers"`
	// The user who created the issue.
	Creator getIssueIssueCreatorUser `json:"creator"`
	// The user to whom the issue is assigned to.
	Assignee getIssueIssueAssigneeUser `json:"assignee"`
	// The user who snoozed the issue.
	SnoozedBy getIssueIssueSnoozedByUser `json:"snoozedBy"`
	// The workflow state that the issue is associated with.
	State getIssueIssueStateWorkflowState `json:"state"`
	// The parent of the issue.
	Parent getIssueIssueParentIssue `json:"parent"`
	// The order of the item in the sub-issue list. Only set if the issue has a parent.
	SubIssueSortOrder float64 `json:"subIssueSortOrder"`
	// Label for the priority.
	PriorityLabel string `json:"priorityLabel"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier string `json:"identifier"`
	// Issue URL.
	Url string `json:"url"`
	// Suggested branch name for the issue.
	BranchName string `json:"branchName"`
	// Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
	CustomerTicketCount int32 `json:"customerTicketCount"`
}

// GetId returns getIssueIssue.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetId() string { return v.Id }

// GetCreatedAt returns getIssueIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns getIssueIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetArchivedAt returns getIssueIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetArchivedAt() time.Time { return v.ArchivedAt }

// GetNumber returns getIssueIssue.Number, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetNumber() float64 { return v.Number }

// GetTitle returns getIssueIssue.Title, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetTitle() string { return v.Title }

// GetDescription returns getIssueIssue.Description, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetDescription() string { return v.Description }

// GetPriority returns getIssueIssue.Priority, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetPriority() float64 { return v.Priority }

// GetEstimate returns getIssueIssue.Estimate, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetEstimate() float64 { return v.Estimate }

// GetSortOrder returns getIssueIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetSortOrder() float64 { return v.SortOrder }

// GetStartedAt returns getIssueIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetStartedAt() time.Time { return v.StartedAt }

// GetCompletedAt returns getIssueIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetCompletedAt() time.Time { return v.CompletedAt }

// GetCanceledAt returns getIssueIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetCanceledAt() time.Time { return v.CanceledAt }

// GetAutoClosedAt returns getIssueIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetAutoClosedAt() time.Time { return v.AutoClosedAt }

// GetAutoArchivedAt returns getIssueIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetAutoArchivedAt() time.Time { return v.AutoArchivedAt }

// GetDueDate returns getIssueIssue.DueDate, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetDueDate() time.Time { return v.DueDate }

// GetTrashed returns getIssueIssue.Trashed, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetTrashed() bool { return v.Trashed }

// GetSnoozedUntilAt returns getIssueIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetSnoozedUntilAt() time.Time { return v.SnoozedUntilAt }

// GetTeam returns getIssueIssue.Team, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetTeam() getIssueIssueTeam { return v.Team }

// GetCycle returns getIssueIssue.Cycle, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetCycle() getIssueIssueCycle { return v.Cycle }

// GetProject returns getIssueIssue.Project, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetProject() getIssueIssueProject { return v.Project }

// GetPreviousIdentifiers returns getIssueIssue.PreviousIdentifiers, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetPreviousIdentifiers() []string { return v.PreviousIdentifiers }

// GetCreator returns getIssueIssue.Creator, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetCreator() getIssueIssueCreatorUser { return v.Creator }

// GetAssignee returns getIssueIssue.Assignee, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetAssignee() getIssueIssueAssigneeUser { return v.Assignee }

// GetSnoozedBy returns getIssueIssue.SnoozedBy, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetSnoozedBy() getIssueIssueSnoozedByUser { return v.SnoozedBy }

// GetState returns getIssueIssue.State, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetState() getIssueIssueStateWorkflowState { return v.State }

// GetParent returns getIssueIssue.Parent, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetParent() getIssueIssueParentIssue { return v.Parent }

// GetSubIssueSortOrder returns getIssueIssue.SubIssueSortOrder, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetSubIssueSortOrder() float64 { return v.SubIssueSortOrder }

// GetPriorityLabel returns getIssueIssue.PriorityLabel, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetPriorityLabel() string { return v.PriorityLabel }

// GetIdentifier returns getIssueIssue.Identifier, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetIdentifier() string { return v.Identifier }

// GetUrl returns getIssueIssue.Url, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetUrl() string { return v.Url }

// GetBranchName returns getIssueIssue.BranchName, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetBranchName() string { return v.BranchName }

// GetCustomerTicketCount returns getIssueIssue.CustomerTicketCount, and is useful for accessing the field via an interface.
func (v *getIssueIssue) GetCustomerTicketCount() int32 { return v.CustomerTicketCount }

// getIssueIssueAssigneeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type getIssueIssueAssigneeUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getIssueIssueAssigneeUser.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssueAssigneeUser) GetId() string { return v.Id }

// getIssueIssueCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type getIssueIssueCreatorUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getIssueIssueCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssueCreatorUser) GetId() string { return v.Id }

// getIssueIssueCycle includes the requested fields of the GraphQL type Cycle.
// The GraphQL type's documentation follows.
//
// A set of issues to be resolved in a specified amount of time.
type getIssueIssueCycle struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getIssueIssueCycle.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssueCycle) GetId() string { return v.Id }

// getIssueIssueParentIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type getIssueIssueParentIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getIssueIssueParentIssue.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssueParentIssue) GetId() string { return v.Id }

// getIssueIssueProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type getIssueIssueProject struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getIssueIssueProject.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssueProject) GetId() string { return v.Id }

// getIssueIssueSnoozedByUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type getIssueIssueSnoozedByUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getIssueIssueSnoozedByUser.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssueSnoozedByUser) GetId() string { return v.Id }

// getIssueIssueStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type getIssueIssueStateWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getIssueIssueStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssueStateWorkflowState) GetId() string { return v.Id }

// getIssueIssueTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type getIssueIssueTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getIssueIssueTeam.Id, and is useful for accessing the field via an interface.
func (v *getIssueIssueTeam) GetId() string { return v.Id }

// getIssueResponse is returned by getIssue on success.
type getIssueResponse struct {
	// One specific issue.
	Issue getIssueIssue `json:"issue"`
}

// GetIssue returns getIssueResponse.Issue, and is useful for accessing the field via an interface.
func (v *getIssueResponse) GetIssue() getIssueIssue { return v.Issue }

// getProjectProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type getProjectProject struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt time.Time `json:"archivedAt"`
	// The time at which the project was automatically archived by the auto pruning process.
	AutoArchivedAt time.Time `json:"autoArchivedAt"`
	// The time at which the project was moved into canceled state.
	CanceledAt time.Time `json:"canceledAt"`
	// The project's color.
	Color string `json:"color"`
	// The time at which the project was moved into completed state.
	CompletedAt time.Time `json:"completedAt"`
	// The number of completed issues in the project after each week.
	CompletedIssueCountHistory []float64 `json:"completedIssueCountHistory"`
	// The number of completed estimation points after each week.
	CompletedScopeHistory []float64 `json:"completedScopeHistory"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"createdAt"`
	// The project's description.
	Description string `json:"description"`
	// The icon of the project.
	Icon string `json:"icon"`
	// The number of in progress estimation points after each week.
	InProgressScopeHistory []float64 `json:"inProgressScopeHistory"`
	// The total number of issues in the project after each week.
	IssueCountHistory []float64 `json:"issueCountHistory"`
	// The project's name.
	Name string `json:"name"`
	// The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
	Progress float64 `json:"progress"`
	// The time until which project update reminders are paused.
	ProjectUpdateRemindersPausedUntilAt time.Time `json:"projectUpdateRemindersPausedUntilAt"`
	// The overall scope (total estimate points) of the project.
	Scope float64 `json:"scope"`
	// The total number of estimation points after each week.
	ScopeHistory []float64 `json:"scopeHistory"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue bool `json:"slackNewIssue"`
	// The project's unique URL slug.
	SlugId string `json:"slugId"`
	// The sort order for the project within the organization.
	SortOrder float64 `json:"sortOrder"`
	// [Internal] The estimated start date of the project.
	StartDate time.Time `json:"startDate"`
	// The time at which the project was moved into started state.
	StartedAt time.Time `json:"startedAt"`
	// The type of the state.
	State string `json:"state"`
	// The estimated completion date of the project.
	TargetDate time.Time `json:"targetDate"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt time.Time `json:"updatedAt"`
	// Project URL.
	Url string `json:"url"`
	// The project was created based on this issue.
	ConvertedFromIssue getProjectProjectConvertedFromIssue `json:"convertedFromIssue"`
	// The project lead.
	Lead getProjectProjectLeadUser `json:"lead"`
	// The user who created the project.
	Creator getProjectProjectCreatorUser `json:"creator"`
}

// GetId returns getProjectProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetId() string { return v.Id }

// GetArchivedAt returns getProjectProject.ArchivedAt, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetArchivedAt() time.Time { return v.ArchivedAt }

// GetAutoArchivedAt returns getProjectProject.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetAutoArchivedAt() time.Time { return v.AutoArchivedAt }

// GetCanceledAt returns getProjectProject.CanceledAt, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetCanceledAt() time.Time { return v.CanceledAt }

// GetColor returns getProjectProject.Color, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetColor() string { return v.Color }

// GetCompletedAt returns getProjectProject.CompletedAt, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetCompletedAt() time.Time { return v.CompletedAt }

// GetCompletedIssueCountHistory returns getProjectProject.CompletedIssueCountHistory, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetCompletedIssueCountHistory() []float64 {
	return v.CompletedIssueCountHistory
}

// GetCompletedScopeHistory returns getProjectProject.CompletedScopeHistory, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetCompletedScopeHistory() []float64 { return v.CompletedScopeHistory }

// GetCreatedAt returns getProjectProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDescription returns getProjectProject.Description, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetDescription() string { return v.Description }

// GetIcon returns getProjectProject.Icon, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetIcon() string { return v.Icon }

// GetInProgressScopeHistory returns getProjectProject.InProgressScopeHistory, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetInProgressScopeHistory() []float64 { return v.InProgressScopeHistory }

// GetIssueCountHistory returns getProjectProject.IssueCountHistory, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetIssueCountHistory() []float64 { return v.IssueCountHistory }

// GetName returns getProjectProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetName() string { return v.Name }

// GetProgress returns getProjectProject.Progress, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetProgress() float64 { return v.Progress }

// GetProjectUpdateRemindersPausedUntilAt returns getProjectProject.ProjectUpdateRemindersPausedUntilAt, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetProjectUpdateRemindersPausedUntilAt() time.Time {
	return v.ProjectUpdateRemindersPausedUntilAt
}

// GetScope returns getProjectProject.Scope, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetScope() float64 { return v.Scope }

// GetScopeHistory returns getProjectProject.ScopeHistory, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetScopeHistory() []float64 { return v.ScopeHistory }

// GetSlackIssueComments returns getProjectProject.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetSlackIssueComments() bool { return v.SlackIssueComments }

// GetSlackIssueStatuses returns getProjectProject.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetSlackIssueStatuses() bool { return v.SlackIssueStatuses }

// GetSlackNewIssue returns getProjectProject.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetSlackNewIssue() bool { return v.SlackNewIssue }

// GetSlugId returns getProjectProject.SlugId, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetSlugId() string { return v.SlugId }

// GetSortOrder returns getProjectProject.SortOrder, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetSortOrder() float64 { return v.SortOrder }

// GetStartDate returns getProjectProject.StartDate, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetStartDate() time.Time { return v.StartDate }

// GetStartedAt returns getProjectProject.StartedAt, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetStartedAt() time.Time { return v.StartedAt }

// GetState returns getProjectProject.State, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetState() string { return v.State }

// GetTargetDate returns getProjectProject.TargetDate, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetTargetDate() time.Time { return v.TargetDate }

// GetUpdatedAt returns getProjectProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUrl returns getProjectProject.Url, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetUrl() string { return v.Url }

// GetConvertedFromIssue returns getProjectProject.ConvertedFromIssue, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetConvertedFromIssue() getProjectProjectConvertedFromIssue {
	return v.ConvertedFromIssue
}

// GetLead returns getProjectProject.Lead, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetLead() getProjectProjectLeadUser { return v.Lead }

// GetCreator returns getProjectProject.Creator, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetCreator() getProjectProjectCreatorUser { return v.Creator }

// getProjectProjectConvertedFromIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type getProjectProjectConvertedFromIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getProjectProjectConvertedFromIssue.Id, and is useful for accessing the field via an interface.
func (v *getProjectProjectConvertedFromIssue) GetId() string { return v.Id }

// getProjectProjectCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type getProjectProjectCreatorUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getProjectProjectCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *getProjectProjectCreatorUser) GetId() string { return v.Id }

// getProjectProjectLeadUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type getProjectProjectLeadUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getProjectProjectLeadUser.Id, and is useful for accessing the field via an interface.
func (v *getProjectProjectLeadUser) GetId() string { return v.Id }

// getProjectResponse is returned by getProject on success.
type getProjectResponse struct {
	// One specific project.
	Project getProjectProject `json:"project"`
}

// GetProject returns getProjectResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectResponse) GetProject() getProjectProject { return v.Project }

// listIssueIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
type listIssueIssuesIssueConnection struct {
	PageInfo listIssueIssuesIssueConnectionPageInfo     `json:"pageInfo"`
	Nodes    []listIssueIssuesIssueConnectionNodesIssue `json:"nodes"`
}

// GetPageInfo returns listIssueIssuesIssueConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnection) GetPageInfo() listIssueIssuesIssueConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listIssueIssuesIssueConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnection) GetNodes() []listIssueIssuesIssueConnectionNodesIssue {
	return v.Nodes
}

// listIssueIssuesIssueConnectionNodesIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listIssueIssuesIssueConnectionNodesIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"createdAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number float64 `json:"number"`
	// The issue's title.
	Title string `json:"title"`
	// The issue's description in markdown format.
	Description string `json:"description"`
	// The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
	Priority float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate float64 `json:"estimate"`
	// The order of the item in relation to other items in the organization.
	SortOrder float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt time.Time `json:"completedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate time.Time `json:"dueDate"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt time.Time `json:"snoozedUntilAt"`
	// The team that the issue is associated with.
	Team *listIssueIssuesIssueConnectionNodesIssueTeam `json:"team"`
	// The cycle that the issue is associated with.
	Cycle *listIssueIssuesIssueConnectionNodesIssueCycle `json:"cycle"`
	// The project that the issue is associated with.
	Project *listIssueIssuesIssueConnectionNodesIssueProject `json:"project"`
	// Previous identifiers of the issue if it has been moved between teams.
	PreviousIdentifiers []string `json:"previousIdentifiers"`
	// The user who created the issue.
	Creator *listIssueIssuesIssueConnectionNodesIssueCreatorUser `json:"creator"`
	// The user to whom the issue is assigned to.
	Assignee *listIssueIssuesIssueConnectionNodesIssueAssigneeUser `json:"assignee"`
	// The user who snoozed the issue.
	SnoozedBy *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser `json:"snoozedBy"`
	// The workflow state that the issue is associated with.
	State *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState `json:"state"`
	// The parent of the issue.
	Parent *listIssueIssuesIssueConnectionNodesIssueParentIssue `json:"parent"`
	// The order of the item in the sub-issue list. Only set if the issue has a parent.
	SubIssueSortOrder float64 `json:"subIssueSortOrder"`
	// Label for the priority.
	PriorityLabel string `json:"priorityLabel"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier string `json:"identifier"`
	// Issue URL.
	Url string `json:"url"`
	// Suggested branch name for the issue.
	BranchName string `json:"branchName"`
	// Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
	CustomerTicketCount int32 `json:"customerTicketCount"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssue.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetId() string { return v.Id }

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetArchivedAt() time.Time { return v.ArchivedAt }

// GetNumber returns listIssueIssuesIssueConnectionNodesIssue.Number, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetNumber() float64 { return v.Number }

// GetTitle returns listIssueIssuesIssueConnectionNodesIssue.Title, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTitle() string { return v.Title }

// GetDescription returns listIssueIssuesIssueConnectionNodesIssue.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetDescription() string { return v.Description }

// GetPriority returns listIssueIssuesIssueConnectionNodesIssue.Priority, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPriority() float64 { return v.Priority }

// GetEstimate returns listIssueIssuesIssueConnectionNodesIssue.Estimate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetEstimate() float64 { return v.Estimate }

// GetSortOrder returns listIssueIssuesIssueConnectionNodesIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSortOrder() float64 { return v.SortOrder }

// GetStartedAt returns listIssueIssuesIssueConnectionNodesIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetStartedAt() time.Time { return v.StartedAt }

// GetCompletedAt returns listIssueIssuesIssueConnectionNodesIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCompletedAt() time.Time { return v.CompletedAt }

// GetCanceledAt returns listIssueIssuesIssueConnectionNodesIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCanceledAt() time.Time { return v.CanceledAt }

// GetAutoClosedAt returns listIssueIssuesIssueConnectionNodesIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAutoClosedAt() time.Time { return v.AutoClosedAt }

// GetAutoArchivedAt returns listIssueIssuesIssueConnectionNodesIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAutoArchivedAt() time.Time {
	return v.AutoArchivedAt
}

// GetDueDate returns listIssueIssuesIssueConnectionNodesIssue.DueDate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetDueDate() time.Time { return v.DueDate }

// GetTrashed returns listIssueIssuesIssueConnectionNodesIssue.Trashed, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTrashed() bool { return v.Trashed }

// GetSnoozedUntilAt returns listIssueIssuesIssueConnectionNodesIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSnoozedUntilAt() time.Time {
	return v.SnoozedUntilAt
}

// GetTeam returns listIssueIssuesIssueConnectionNodesIssue.Team, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTeam() *listIssueIssuesIssueConnectionNodesIssueTeam {
	return v.Team
}

// GetCycle returns listIssueIssuesIssueConnectionNodesIssue.Cycle, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCycle() *listIssueIssuesIssueConnectionNodesIssueCycle {
	return v.Cycle
}

// GetProject returns listIssueIssuesIssueConnectionNodesIssue.Project, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetProject() *listIssueIssuesIssueConnectionNodesIssueProject {
	return v.Project
}

// GetPreviousIdentifiers returns listIssueIssuesIssueConnectionNodesIssue.PreviousIdentifiers, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPreviousIdentifiers() []string {
	return v.PreviousIdentifiers
}

// GetCreator returns listIssueIssuesIssueConnectionNodesIssue.Creator, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCreator() *listIssueIssuesIssueConnectionNodesIssueCreatorUser {
	return v.Creator
}

// GetAssignee returns listIssueIssuesIssueConnectionNodesIssue.Assignee, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAssignee() *listIssueIssuesIssueConnectionNodesIssueAssigneeUser {
	return v.Assignee
}

// GetSnoozedBy returns listIssueIssuesIssueConnectionNodesIssue.SnoozedBy, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSnoozedBy() *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser {
	return v.SnoozedBy
}

// GetState returns listIssueIssuesIssueConnectionNodesIssue.State, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetState() *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState {
	return v.State
}

// GetParent returns listIssueIssuesIssueConnectionNodesIssue.Parent, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetParent() *listIssueIssuesIssueConnectionNodesIssueParentIssue {
	return v.Parent
}

// GetSubIssueSortOrder returns listIssueIssuesIssueConnectionNodesIssue.SubIssueSortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSubIssueSortOrder() float64 {
	return v.SubIssueSortOrder
}

// GetPriorityLabel returns listIssueIssuesIssueConnectionNodesIssue.PriorityLabel, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPriorityLabel() string { return v.PriorityLabel }

// GetIdentifier returns listIssueIssuesIssueConnectionNodesIssue.Identifier, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetIdentifier() string { return v.Identifier }

// GetUrl returns listIssueIssuesIssueConnectionNodesIssue.Url, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetUrl() string { return v.Url }

// GetBranchName returns listIssueIssuesIssueConnectionNodesIssue.BranchName, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetBranchName() string { return v.BranchName }

// GetCustomerTicketCount returns listIssueIssuesIssueConnectionNodesIssue.CustomerTicketCount, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCustomerTicketCount() int32 {
	return v.CustomerTicketCount
}

// listIssueIssuesIssueConnectionNodesIssueAssigneeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueAssigneeUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueCreatorUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueCycle includes the requested fields of the GraphQL type Cycle.
// The GraphQL type's documentation follows.
//
// A set of issues to be resolved in a specified amount of time.
type listIssueIssuesIssueConnectionNodesIssueCycle struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueCycle.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueParentIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listIssueIssuesIssueConnectionNodesIssueParentIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type listIssueIssuesIssueConnectionNodesIssueProject struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueProject.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueSnoozedByUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueSnoozedByUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listIssueIssuesIssueConnectionNodesIssueStateWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listIssueIssuesIssueConnectionNodesIssueTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueTeam.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listIssueIssuesIssueConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns listIssueIssuesIssueConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns listIssueIssuesIssueConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// listIssueResponse is returned by listIssue on success.
type listIssueResponse struct {
	// All issues.
	Issues listIssueIssuesIssueConnection `json:"issues"`
}

// GetIssues returns listIssueResponse.Issues, and is useful for accessing the field via an interface.
func (v *listIssueResponse) GetIssues() listIssueIssuesIssueConnection { return v.Issues }

// listProjectProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type listProjectProjectsProjectConnection struct {
	PageInfo listProjectProjectsProjectConnectionPageInfo       `json:"pageInfo"`
	Nodes    []listProjectProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetPageInfo returns listProjectProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnection) GetPageInfo() listProjectProjectsProjectConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listProjectProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnection) GetNodes() []listProjectProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// listProjectProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type listProjectProjectsProjectConnectionNodesProject struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt time.Time `json:"archivedAt"`
	// The time at which the project was automatically archived by the auto pruning process.
	AutoArchivedAt time.Time `json:"autoArchivedAt"`
	// The time at which the project was moved into canceled state.
	CanceledAt time.Time `json:"canceledAt"`
	// The project's color.
	Color string `json:"color"`
	// The time at which the project was moved into completed state.
	CompletedAt time.Time `json:"completedAt"`
	// The number of completed issues in the project after each week.
	CompletedIssueCountHistory []float64 `json:"completedIssueCountHistory"`
	// The number of completed estimation points after each week.
	CompletedScopeHistory []float64 `json:"completedScopeHistory"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"createdAt"`
	// The project's description.
	Description string `json:"description"`
	// The icon of the project.
	Icon string `json:"icon"`
	// The number of in progress estimation points after each week.
	InProgressScopeHistory []float64 `json:"inProgressScopeHistory"`
	// The total number of issues in the project after each week.
	IssueCountHistory []float64 `json:"issueCountHistory"`
	// The project's name.
	Name string `json:"name"`
	// The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
	Progress float64 `json:"progress"`
	// The time until which project update reminders are paused.
	ProjectUpdateRemindersPausedUntilAt time.Time `json:"projectUpdateRemindersPausedUntilAt"`
	// The overall scope (total estimate points) of the project.
	Scope float64 `json:"scope"`
	// The total number of estimation points after each week.
	ScopeHistory []float64 `json:"scopeHistory"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments bool `json:"slackIssueComments"`
	// Whether to send new issue status updates to Slack.
	SlackIssueStatuses bool `json:"slackIssueStatuses"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue bool `json:"slackNewIssue"`
	// The project's unique URL slug.
	SlugId string `json:"slugId"`
	// The sort order for the project within the organization.
	SortOrder float64 `json:"sortOrder"`
	// [Internal] The estimated start date of the project.
	StartDate time.Time `json:"startDate"`
	// The time at which the project was moved into started state.
	StartedAt time.Time `json:"startedAt"`
	// The type of the state.
	State string `json:"state"`
	// The estimated completion date of the project.
	TargetDate time.Time `json:"targetDate"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt time.Time `json:"updatedAt"`
	// Project URL.
	Url string `json:"url"`
	// The project was created based on this issue.
	ConvertedFromIssue *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue `json:"convertedFromIssue"`
	// The project lead.
	Lead *listProjectProjectsProjectConnectionNodesProjectLeadUser `json:"lead"`
	// The user who created the project.
	Creator *listProjectProjectsProjectConnectionNodesProjectCreatorUser `json:"creator"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetId() string { return v.Id }

// GetArchivedAt returns listProjectProjectsProjectConnectionNodesProject.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetArchivedAt() time.Time {
	return v.ArchivedAt
}

// GetAutoArchivedAt returns listProjectProjectsProjectConnectionNodesProject.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetAutoArchivedAt() time.Time {
	return v.AutoArchivedAt
}

// GetCanceledAt returns listProjectProjectsProjectConnectionNodesProject.CanceledAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCanceledAt() time.Time {
	return v.CanceledAt
}

// GetColor returns listProjectProjectsProjectConnectionNodesProject.Color, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetColor() string { return v.Color }

// GetCompletedAt returns listProjectProjectsProjectConnectionNodesProject.CompletedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCompletedAt() time.Time {
	return v.CompletedAt
}

// GetCompletedIssueCountHistory returns listProjectProjectsProjectConnectionNodesProject.CompletedIssueCountHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCompletedIssueCountHistory() []float64 {
	return v.CompletedIssueCountHistory
}

// GetCompletedScopeHistory returns listProjectProjectsProjectConnectionNodesProject.CompletedScopeHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCompletedScopeHistory() []float64 {
	return v.CompletedScopeHistory
}

// GetCreatedAt returns listProjectProjectsProjectConnectionNodesProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetDescription returns listProjectProjectsProjectConnectionNodesProject.Description, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetDescription() string {
	return v.Description
}

// GetIcon returns listProjectProjectsProjectConnectionNodesProject.Icon, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetIcon() string { return v.Icon }

// GetInProgressScopeHistory returns listProjectProjectsProjectConnectionNodesProject.InProgressScopeHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetInProgressScopeHistory() []float64 {
	return v.InProgressScopeHistory
}

// GetIssueCountHistory returns listProjectProjectsProjectConnectionNodesProject.IssueCountHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetIssueCountHistory() []float64 {
	return v.IssueCountHistory
}

// GetName returns listProjectProjectsProjectConnectionNodesProject.Name, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetName() string { return v.Name }

// GetProgress returns listProjectProjectsProjectConnectionNodesProject.Progress, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetProgress() float64 { return v.Progress }

// GetProjectUpdateRemindersPausedUntilAt returns listProjectProjectsProjectConnectionNodesProject.ProjectUpdateRemindersPausedUntilAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetProjectUpdateRemindersPausedUntilAt() time.Time {
	return v.ProjectUpdateRemindersPausedUntilAt
}

// GetScope returns listProjectProjectsProjectConnectionNodesProject.Scope, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetScope() float64 { return v.Scope }

// GetScopeHistory returns listProjectProjectsProjectConnectionNodesProject.ScopeHistory, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetScopeHistory() []float64 {
	return v.ScopeHistory
}

// GetSlackIssueComments returns listProjectProjectsProjectConnectionNodesProject.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSlackIssueComments() bool {
	return v.SlackIssueComments
}

// GetSlackIssueStatuses returns listProjectProjectsProjectConnectionNodesProject.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSlackIssueStatuses() bool {
	return v.SlackIssueStatuses
}

// GetSlackNewIssue returns listProjectProjectsProjectConnectionNodesProject.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSlackNewIssue() bool {
	return v.SlackNewIssue
}

// GetSlugId returns listProjectProjectsProjectConnectionNodesProject.SlugId, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSlugId() string { return v.SlugId }

// GetSortOrder returns listProjectProjectsProjectConnectionNodesProject.SortOrder, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetSortOrder() float64 { return v.SortOrder }

// GetStartDate returns listProjectProjectsProjectConnectionNodesProject.StartDate, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetStartDate() time.Time {
	return v.StartDate
}

// GetStartedAt returns listProjectProjectsProjectConnectionNodesProject.StartedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetStartedAt() time.Time {
	return v.StartedAt
}

// GetState returns listProjectProjectsProjectConnectionNodesProject.State, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetState() string { return v.State }

// GetTargetDate returns listProjectProjectsProjectConnectionNodesProject.TargetDate, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetTargetDate() time.Time {
	return v.TargetDate
}

// GetUpdatedAt returns listProjectProjectsProjectConnectionNodesProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetUrl returns listProjectProjectsProjectConnectionNodesProject.Url, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetUrl() string { return v.Url }

// GetConvertedFromIssue returns listProjectProjectsProjectConnectionNodesProject.ConvertedFromIssue, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetConvertedFromIssue() *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue {
	return v.ConvertedFromIssue
}

// GetLead returns listProjectProjectsProjectConnectionNodesProject.Lead, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetLead() *listProjectProjectsProjectConnectionNodesProjectLeadUser {
	return v.Lead
}

// GetCreator returns listProjectProjectsProjectConnectionNodesProject.Creator, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProject) GetCreator() *listProjectProjectsProjectConnectionNodesProjectCreatorUser {
	return v.Creator
}

// listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectConvertedFromIssue) GetId() string {
	return v.Id
}

// listProjectProjectsProjectConnectionNodesProjectCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listProjectProjectsProjectConnectionNodesProjectCreatorUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProjectCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectCreatorUser) GetId() string { return v.Id }

// listProjectProjectsProjectConnectionNodesProjectLeadUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listProjectProjectsProjectConnectionNodesProjectLeadUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listProjectProjectsProjectConnectionNodesProjectLeadUser.Id, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionNodesProjectLeadUser) GetId() string { return v.Id }

// listProjectProjectsProjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listProjectProjectsProjectConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns listProjectProjectsProjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns listProjectProjectsProjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listProjectProjectsProjectConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// listProjectResponse is returned by listProject on success.
type listProjectResponse struct {
	// All projects.
	Projects listProjectProjectsProjectConnection `json:"projects"`
}

// GetProjects returns listProjectResponse.Projects, and is useful for accessing the field via an interface.
func (v *listProjectResponse) GetProjects() listProjectProjectsProjectConnection { return v.Projects }

// The query or mutation executed by getIssue.
const getIssue_Operation = `
query getIssue ($issueId: String!) {
	issue(id: $issueId) {
		id
		createdAt
		updatedAt
		archivedAt
		number
		title
		description
		priority
		estimate
		sortOrder
		startedAt
		completedAt
		canceledAt
		autoClosedAt
		autoArchivedAt
		dueDate
		trashed
		snoozedUntilAt
		team {
			id
		}
		cycle {
			id
		}
		project {
			id
		}
		previousIdentifiers
		creator {
			id
		}
		assignee {
			id
		}
		snoozedBy {
			id
		}
		state {
			id
		}
		parent {
			id
		}
		subIssueSortOrder
		priorityLabel
		identifier
		url
		branchName
		customerTicketCount
	}
}
`

func getIssue(
	ctx context.Context,
	client graphql.Client,
	issueId string,
) (*getIssueResponse, error) {
	req := &graphql.Request{
		OpName: "getIssue",
		Query:  getIssue_Operation,
		Variables: &__getIssueInput{
			IssueId: issueId,
		},
	}
	var err error

	var data getIssueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getProject.
const getProject_Operation = `
query getProject ($issueId: String!) {
	project(id: $issueId) {
		id
		archivedAt
		autoArchivedAt
		canceledAt
		color
		completedAt
		completedIssueCountHistory
		completedScopeHistory
		createdAt
		description
		icon
		inProgressScopeHistory
		issueCountHistory
		name
		progress
		projectUpdateRemindersPausedUntilAt
		scope
		scopeHistory
		slackIssueComments
		slackIssueStatuses
		slackNewIssue
		slugId
		sortOrder
		startDate
		startedAt
		state
		targetDate
		updatedAt
		url
		convertedFromIssue {
			id
		}
		lead {
			id
		}
		creator {
			id
		}
	}
}
`

func getProject(
	ctx context.Context,
	client graphql.Client,
	issueId string,
) (*getProjectResponse, error) {
	req := &graphql.Request{
		OpName: "getProject",
		Query:  getProject_Operation,
		Variables: &__getProjectInput{
			IssueId: issueId,
		},
	}
	var err error

	var data getProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listIssue.
const listIssue_Operation = `
query listIssue ($first: Int, $after: String) {
	issues(first: $first, after: $after) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			createdAt
			updatedAt
			archivedAt
			number
			title
			description
			priority
			estimate
			sortOrder
			startedAt
			completedAt
			canceledAt
			autoClosedAt
			autoArchivedAt
			dueDate
			trashed
			snoozedUntilAt
			team {
				id
			}
			cycle {
				id
			}
			project {
				id
			}
			previousIdentifiers
			creator {
				id
			}
			assignee {
				id
			}
			snoozedBy {
				id
			}
			state {
				id
			}
			parent {
				id
			}
			subIssueSortOrder
			priorityLabel
			identifier
			url
			branchName
			customerTicketCount
		}
	}
}
`

func listIssue(
	ctx context.Context,
	client graphql.Client,
	first int32,
	after string,
) (*listIssueResponse, error) {
	req := &graphql.Request{
		OpName: "listIssue",
		Query:  listIssue_Operation,
		Variables: &__listIssueInput{
			First: first,
			After: after,
		},
	}
	var err error

	var data listIssueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listProject.
const listProject_Operation = `
query listProject ($first: Int, $after: String) {
	projects(first: $first, after: $after) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			archivedAt
			autoArchivedAt
			canceledAt
			color
			completedAt
			completedIssueCountHistory
			completedScopeHistory
			createdAt
			description
			icon
			inProgressScopeHistory
			issueCountHistory
			name
			progress
			projectUpdateRemindersPausedUntilAt
			scope
			scopeHistory
			slackIssueComments
			slackIssueStatuses
			slackNewIssue
			slugId
			sortOrder
			startDate
			startedAt
			state
			targetDate
			updatedAt
			url
			convertedFromIssue {
				id
			}
			lead {
				id
			}
			creator {
				id
			}
		}
	}
}
`

func listProject(
	ctx context.Context,
	client graphql.Client,
	first int32,
	after string,
) (*listProjectResponse, error) {
	req := &graphql.Request{
		OpName: "listProject",
		Query:  listProject_Operation,
		Variables: &__listProjectInput{
			First: first,
			After: after,
		},
	}
	var err error

	var data listProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
